
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000718c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800736c  0800736c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007374  08007374  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800737c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000010  0800738c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800738c  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a6d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf4  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  0003abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f39  00000000  00000000  0003bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ad4  00000000  00000000  00062a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f368f  00000000  00000000  0007b56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055b4  00000000  00000000  0016ebfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001741b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800733c 	.word	0x0800733c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800733c 	.word	0x0800733c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <set_motor_pwm>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define MOTORA 0

void set_motor_pwm(uint8_t motor_ID, float duty_cycle){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	ed87 0a00 	vstr	s0, [r7]
 8000510:	71fb      	strb	r3, [r7, #7]
	switch(motor_ID){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d113      	bne.n	8000540 <set_motor_pwm+0x3c>
	case MOTORA:
	{
		TIM3->CCR1 = htim3.Init.Period*(duty_cycle/100);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <set_motor_pwm+0x48>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000524:	edd7 6a00 	vldr	s13, [r7]
 8000528:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8000550 <set_motor_pwm+0x4c>
 800052c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <set_motor_pwm+0x50>)
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	ee17 2a90 	vmov	r2, s15
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	}

};
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200000d0 	.word	0x200000d0
 8000550:	42c80000 	.word	0x42c80000
 8000554:	40000400 	.word	0x40000400

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	f5ad 5de1 	sub.w	sp, sp, #7200	; 0x1c20
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 feaa 	bl	80012ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f871 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fa67 	bl	8000a3c <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f8d3 	bl	8000718 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000572:	f000 f911 	bl	8000798 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000576:	f000 fa03 	bl	8000980 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 fa31 	bl	80009e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800057e:	f000 f963 	bl	8000848 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000582:	f000 f9d9 	bl	8000938 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim10);
  HAL_TIM_Base_Start_IT(&htim10);
 8000586:	482a      	ldr	r0, [pc, #168]	; (8000630 <main+0xd8>)
 8000588:	f003 fdf6 	bl	8004178 <HAL_TIM_Base_Start_IT>





	float current_duty_cycle = 0.0;
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000594:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	4826      	ldr	r0, [pc, #152]	; (8000634 <main+0xdc>)
 800059a:	f003 febd 	bl	8004318 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA (&huart3, Rx_data, 4);  // Receive 4 Bytes of data
 800059e:	2204      	movs	r2, #4
 80005a0:	4925      	ldr	r1, [pc, #148]	; (8000638 <main+0xe0>)
 80005a2:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xe4>)
 80005a4:	f004 ffd4 	bl	8005550 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT (&huart3, Rx_data, 4);
 80005a8:	2204      	movs	r2, #4
 80005aa:	4923      	ldr	r1, [pc, #140]	; (8000638 <main+0xe0>)
 80005ac:	4823      	ldr	r0, [pc, #140]	; (800063c <main+0xe4>)
 80005ae:	f004 ff8b 	bl	80054c8 <HAL_UART_Receive_IT>



	// example write
	uint8_t Input_Byte_Array[3600];
	for (int i = 0; i <= 3599; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	f641 4224 	movw	r2, #7204	; 0x1c24
 80005b8:	443a      	add	r2, r7
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	e014      	b.n	80005e8 <main+0x90>
		Input_Byte_Array[i] = (uint8_t)0b00001011;
 80005be:	f641 4328 	movw	r3, #7208	; 0x1c28
 80005c2:	443b      	add	r3, r7
 80005c4:	f6a3 6218 	subw	r2, r3, #3608	; 0xe18
 80005c8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005cc:	443b      	add	r3, r7
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	220b      	movs	r2, #11
 80005d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 3599; i++) {
 80005d6:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005da:	443b      	add	r3, r7
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	f641 4224 	movw	r2, #7204	; 0x1c24
 80005e4:	443a      	add	r2, r7
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005ec:	443b      	add	r3, r7
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80005f4:	dbe3      	blt.n	80005be <main+0x66>
	}
	writeEEPROM(0, Input_Byte_Array);
 80005f6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80005fa:	4619      	mov	r1, r3
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fb17 	bl	8000c30 <writeEEPROM>


	// example read
	uint8_t Output_Byte_Array[3600];
	readEEPROM(0, Output_Byte_Array);
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0xe8>)
 8000604:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8000608:	f103 0308 	add.w	r3, r3, #8
 800060c:	443b      	add	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fb53 	bl	8000cbc <readEEPROM>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	// create new thread
	timer10Value = __HAL_TIM_GET_COUNTER(&htim10);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0xd8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0xec>)
 8000620:	801a      	strh	r2, [r3, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_motor_pwm(MOTORA, 100.0);
 8000622:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000648 <main+0xf0>
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff6c 	bl	8000504 <set_motor_pwm>
	timer10Value = __HAL_TIM_GET_COUNTER(&htim10);
 800062c:	e7f3      	b.n	8000616 <main+0xbe>
 800062e:	bf00      	nop
 8000630:	2000011c 	.word	0x2000011c
 8000634:	200000d0 	.word	0x200000d0
 8000638:	200006fc 	.word	0x200006fc
 800063c:	20000168 	.word	0x20000168
 8000640:	ffffe3d8 	.word	0xffffe3d8
 8000644:	2000002c 	.word	0x2000002c
 8000648:	42c80000 	.word	0x42c80000

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fe42 	bl	80072e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xc4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <SystemClock_Config+0xc4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xc8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xc8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xc8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fc41 	bl	8002f54 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d8:	f000 fb2c 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fecf 	bl	800349c <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000704:	f000 fb16 	bl	8000d34 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_I2C1_Init+0x74>)
 8000754:	f001 fc10 	bl	8001f78 <HAL_I2C_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075e:	f000 fae9 	bl	8000d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C1_Init+0x74>)
 8000766:	f002 fa16 	bl	8002b96 <HAL_I2CEx_ConfigAnalogFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 fae0 	bl	8000d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2C1_Init+0x74>)
 8000778:	f002 fa58 	bl	8002c2c <HAL_I2CEx_ConfigDigitalFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fad7 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000030 	.word	0x20000030
 8000790:	40005400 	.word	0x40005400
 8000794:	00305fff 	.word	0x00305fff

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_TIM2_Init+0xac>)
 80007be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_TIM2_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_TIM2_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_TIM2_Init+0xac>)
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0xac>)
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <MX_TIM2_Init+0xac>)
 80007e4:	f003 fd40 	bl	8004268 <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007ee:	f000 faa1 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_TIM2_Init+0xac>)
 8000802:	f004 fd67 	bl	80052d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800080c:	f000 fa92 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM2_Init+0xac>)
 8000828:	f003 ff90 	bl	800474c <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000832:	f000 fa7f 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM2_Init+0xac>)
 8000838:	f000 fb6e 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000084 	.word	0x20000084

08000848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_TIM3_Init+0xe8>)
 800087c:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <MX_TIM3_Init+0xec>)
 800087e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_TIM3_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_TIM3_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_TIM3_Init+0xe8>)
 800088e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_TIM3_Init+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_TIM3_Init+0xe8>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a0:	4823      	ldr	r0, [pc, #140]	; (8000930 <MX_TIM3_Init+0xe8>)
 80008a2:	f003 fc11 	bl	80040c8 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008ac:	f000 fa42 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ba:	4619      	mov	r1, r3
 80008bc:	481c      	ldr	r0, [pc, #112]	; (8000930 <MX_TIM3_Init+0xe8>)
 80008be:	f004 f859 	bl	8004974 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008c8:	f000 fa34 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008cc:	4818      	ldr	r0, [pc, #96]	; (8000930 <MX_TIM3_Init+0xe8>)
 80008ce:	f003 fccb 	bl	8004268 <HAL_TIM_PWM_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008d8:	f000 fa2c 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_TIM3_Init+0xe8>)
 80008ec:	f004 fcf2 	bl	80052d4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008f6:	f000 fa1d 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 80008fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000902:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0xe8>)
 8000914:	f003 ff1a 	bl	800474c <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800091e:	f000 fa09 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0xe8>)
 8000924:	f000 faf8 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000d0 	.word	0x200000d0
 8000934:	40000400 	.word	0x40000400

08000938 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_TIM10_Init+0x40>)
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_TIM10_Init+0x44>)
 8000940:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_TIM10_Init+0x40>)
 8000944:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000948:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_TIM10_Init+0x40>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_TIM10_Init+0x40>)
 8000952:	2263      	movs	r2, #99	; 0x63
 8000954:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_TIM10_Init+0x40>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_TIM10_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM10_Init+0x40>)
 8000964:	f003 fbb0 	bl	80040c8 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800096e:	f000 f9e1 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000011c 	.word	0x2000011c
 800097c:	40014400 	.word	0x40014400

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_USART3_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009a8:	220c      	movs	r2, #12
 80009aa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART3_UART_Init+0x58>)
 80009c6:	f004 fd31 	bl	800542c <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80009d0:	f000 f9b0 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000168 	.word	0x20000168
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2206      	movs	r2, #6
 80009f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	f002 f94e 	bl	8002cc4 <HAL_PCD_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f981 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001f0 	.word	0x200001f0

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a67      	ldr	r2, [pc, #412]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b65      	ldr	r3, [pc, #404]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b62      	ldr	r3, [pc, #392]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a61      	ldr	r2, [pc, #388]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a5b      	ldr	r2, [pc, #364]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b59      	ldr	r3, [pc, #356]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a55      	ldr	r2, [pc, #340]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b53      	ldr	r3, [pc, #332]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a49      	ldr	r2, [pc, #292]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b47      	ldr	r3, [pc, #284]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae8:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x1bc>)
 8000aea:	f001 fa11 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2141      	movs	r1, #65	; 0x41
 8000af2:	4842      	ldr	r0, [pc, #264]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000af4:	f001 fa0c 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483c      	ldr	r0, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x1c4>)
 8000b10:	f001 f852 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b14:	2332      	movs	r3, #50	; 0x32
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b24:	230b      	movs	r3, #11
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x1c4>)
 8000b30:	f001 f842 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b34:	2386      	movs	r3, #134	; 0x86
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b44:	230b      	movs	r3, #11
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482d      	ldr	r0, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x1c8>)
 8000b50:	f001 f832 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <MX_GPIO_Init+0x1bc>)
 8000b6e:	f001 f823 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000b72:	2341      	movs	r3, #65	; 0x41
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	481c      	ldr	r0, [pc, #112]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000b8a:	f001 f815 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_GPIO_Init+0x1bc>)
 8000bac:	f001 f804 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000bc4:	f000 fff8 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000be6:	f000 ffe7 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

// Playback Function 12Hz
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim10 )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d103      	bne.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c1c:	f001 f991 	bl	8001f42 <HAL_GPIO_TogglePin>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000011c 	.word	0x2000011c
 8000c2c:	40020400 	.word	0x40020400

08000c30 <writeEEPROM>:
/*
songID index begins at 0. Array expected to be
full, and padded with zeros.
Bit format = 0b00000MBT
*/
int writeEEPROM(int songID, uint8_t *array){
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <writeEEPROM+0x84>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

	if((sizeof(array) > 3600) || songID > 71){
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b47      	cmp	r3, #71	; 0x47
 8000c52:	dd01      	ble.n	8000c58 <writeEEPROM+0x28>
		return 1; // Input array too big or songID too big
 8000c54:	2301      	movs	r3, #1
 8000c56:	e029      	b.n	8000cac <writeEEPROM+0x7c>
	}

	// overwrite first index for checking in read memory
	array[0] = (uint8_t)0b01011000;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2258      	movs	r2, #88	; 0x58
 8000c5c:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 8000c5e:	f000 fe49 	bl	80018f4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_ERSERR | FLASH_FLAG_PGPERR);
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <writeEEPROM+0x88>)
 8000c64:	22f3      	movs	r2, #243	; 0xf3
 8000c66:	60da      	str	r2, [r3, #12]

	for(int i = 0; i + 1 <= 3600; i++){
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	e013      	b.n	8000c96 <writeEEPROM+0x66>
	  HAL_FLASH_Program(FLASH_PROGRAM_BYTE, (MEM_Location), array[i]);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	461c      	mov	r4, r3
 8000c7c:	4615      	mov	r5, r2
 8000c7e:	4622      	mov	r2, r4
 8000c80:	462b      	mov	r3, r5
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fdd9 	bl	800183c <HAL_FLASH_Program>
	  MEM_Location = MEM_Location + 0x1;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i + 1 <= 3600; i++){
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000c9c:	dbe7      	blt.n	8000c6e <writeEEPROM+0x3e>
	}

	HAL_Delay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f000 fb67 	bl	8001374 <HAL_Delay>
	HAL_FLASH_Lock();
 8000ca6:	f000 fe47 	bl	8001938 <HAL_FLASH_Lock>

	return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <readEEPROM>:
/*
Input argument arr will be filled with data
songID index begins at 0
Bit format = 0b00000MBT
*/
int readEEPROM(int songID, uint8_t arr[]) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	// 12 fps * 60 seconds * 5 min = 3600 samples

	if(songID > 71){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b47      	cmp	r3, #71	; 0x47
 8000cca:	dd01      	ble.n	8000cd0 <readEEPROM+0x14>
		return 1; // songID too big
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e027      	b.n	8000d20 <readEEPROM+0x64>
	}

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <readEEPROM+0x70>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i <= 3599; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e00f      	b.n	8000d0a <readEEPROM+0x4e>
		memcpy(&singlePacket, (void *) (MEM_Location), sizeof(singlePacket));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <readEEPROM+0x74>)
 8000cf0:	701a      	strb	r2, [r3, #0]
		arr[i] = singlePacket;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <readEEPROM+0x74>)
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	701a      	strb	r2, [r3, #0]
		MEM_Location = MEM_Location + 0x1;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i <= 3599; i++){
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000d10:	dbeb      	blt.n	8000cea <readEEPROM+0x2e>
	}

	if((uint8_t)arr[0] != (uint8_t)0b01011000){
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b58      	cmp	r3, #88	; 0x58
 8000d18:	d001      	beq.n	8000d1e <readEEPROM+0x62>
		return 1; // checksum failed, song not located in this memory location
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <readEEPROM+0x64>
	}

    return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	200006f8 	.word	0x200006f8

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x44>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x44>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x44>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0aa      	sub	sp, #168	; 0xa8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2284      	movs	r2, #132	; 0x84
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fa9b 	bl	80072e4 <memset>
  if(hi2c->Instance==I2C1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_I2C_MspInit+0xd4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d14c      	bne.n	8000e52 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fd8e 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dd2:	f7ff ffaf 	bl	8000d34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000dee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e12:	4619      	mov	r1, r3
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <HAL_I2C_MspInit+0xdc>)
 8000e16:	f000 fecf 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_I2C_MspInit+0xd8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	201f      	movs	r0, #31
 8000e38:	f000 fb9b 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e3c:	201f      	movs	r0, #31
 8000e3e:	f000 fbb4 	bl	80015aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2020      	movs	r0, #32
 8000e48:	f000 fb93 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e4c:	2020      	movs	r0, #32
 8000e4e:	f000 fbac 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	37a8      	adds	r7, #168	; 0xa8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d10b      	bne.n	8000e92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_TIM_Base_MspInit+0x68>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ece:	e018      	b.n	8000f02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_TIM_Base_MspInit+0x70>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d113      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 fb3b 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000efc:	2019      	movs	r0, #25
 8000efe:	f000 fb54 	bl	80015aa <HAL_NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40014400 	.word	0x40014400

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f38:	d11d      	bne.n	8000f76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f64:	2301      	movs	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <HAL_TIM_MspPostInit+0xac>)
 8000f70:	f000 fe22 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f74:	e020      	b.n	8000fb8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_TIM_MspPostInit+0xb0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d11b      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_TIM_MspPostInit+0xa8>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <HAL_TIM_MspPostInit+0xac>)
 8000fb4:	f000 fe00 	bl	8001bb8 <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40000400 	.word	0x40000400

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0aa      	sub	sp, #168	; 0xa8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2284      	movs	r2, #132	; 0x84
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 f979 	bl	80072e4 <memset>
  if(huart->Instance==USART3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_UART_MspInit+0xc4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d144      	bne.n	8001086 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fc6c 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001016:	f7ff fe8d 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_UART_MspInit+0xc8>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_UART_MspInit+0xc8>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_UART_MspInit+0xc8>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0xc8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_UART_MspInit+0xc8>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0xc8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800104a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_UART_MspInit+0xcc>)
 8001072:	f000 fda1 	bl	8001bb8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2027      	movs	r0, #39	; 0x27
 800107c:	f000 fa79 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001080:	2027      	movs	r0, #39	; 0x27
 8001082:	f000 fa92 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	37a8      	adds	r7, #168	; 0xa8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004800 	.word	0x40004800
 8001094:	40023800 	.word	0x40023800
 8001098:	40020c00 	.word	0x40020c00

0800109c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ac      	sub	sp, #176	; 0xb0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	2284      	movs	r2, #132	; 0x84
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 f911 	bl	80072e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ca:	d159      	bne.n	8001180 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fc03 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010e8:	f7ff fe24 	bl	8000d34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_PCD_MspInit+0xec>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_PCD_MspInit+0xec>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_PCD_MspInit+0xec>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001104:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800111e:	230a      	movs	r3, #10
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001128:	4619      	mov	r1, r3
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <HAL_PCD_MspInit+0xf0>)
 800112c:	f000 fd44 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001148:	4619      	mov	r1, r3
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <HAL_PCD_MspInit+0xf0>)
 800114c:	f000 fd34 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_PCD_MspInit+0xec>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_PCD_MspInit+0xec>)
 8001156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115a:	6353      	str	r3, [r2, #52]	; 0x34
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_PCD_MspInit+0xec>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_PCD_MspInit+0xec>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_PCD_MspInit+0xec>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6453      	str	r3, [r2, #68]	; 0x44
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_PCD_MspInit+0xec>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	37b0      	adds	r7, #176	; 0xb0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f8aa 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ea:	f003 f98f 	bl	800450c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000011c 	.word	0x2000011c

080011f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <I2C1_EV_IRQHandler+0x10>)
 80011fe:	f000 ff4b 	bl	8002098 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000030 	.word	0x20000030

0800120c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <I2C1_ER_IRQHandler+0x10>)
 8001212:	f000 ff5b 	bl	80020cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000030 	.word	0x20000030

08001220 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <USART3_IRQHandler+0x1c>)
 8001226:	f004 f9d7 	bl	80055d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT (&huart3, Rx_data, 256);
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122e:	4904      	ldr	r1, [pc, #16]	; (8001240 <USART3_IRQHandler+0x20>)
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <USART3_IRQHandler+0x1c>)
 8001232:	f004 f949 	bl	80054c8 <HAL_UART_Receive_IT>


  /* USER CODE END USART3_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000168 	.word	0x20000168
 8001240:	200006fc 	.word	0x200006fc

08001244 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff ffd7 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f006 f82d 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff f95d 	bl	8000558 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012ac:	0800737c 	.word	0x0800737c
  ldr r2, =_sbss
 80012b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012b4:	2000081c 	.word	0x2000081c

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>

080012ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f94c 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f805 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ca:	f7ff fd39 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f967 	bl	80015c6 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f92f 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000004 	.word	0x20000004
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000000c 	.word	0x2000000c
 8001358:	200007fc 	.word	0x200007fc

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200007fc 	.word	0x200007fc

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	05fa0000 	.word	0x05fa0000

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff3e 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff31 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_DMA_Start_IT+0x26>
 8001600:	2302      	movs	r3, #2
 8001602:	e048      	b.n	8001696 <HAL_DMA_Start_IT+0xb8>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d137      	bne.n	8001688 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f8d6 	bl	80017de <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	223f      	movs	r2, #63	; 0x3f
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0216 	orr.w	r2, r2, #22
 800164c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165c:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0208 	orr.w	r2, r2, #8
 8001674:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e005      	b.n	8001694 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001690:	2302      	movs	r3, #2
 8001692:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001694:	7dfb      	ldrb	r3, [r7, #23]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fe56 	bl	800135c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d008      	beq.n	80016d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e052      	b.n	8001776 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0216 	bic.w	r2, r2, #22
 80016de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d103      	bne.n	8001700 <HAL_DMA_Abort+0x62>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	e013      	b.n	800174a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fe1b 	bl	800135c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d90c      	bls.n	800174a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e015      	b.n	8001776 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e4      	bne.n	8001722 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	223f      	movs	r2, #63	; 0x3f
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d004      	beq.n	800179c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00c      	b.n	80017b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2205      	movs	r2, #5
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017fa:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b40      	cmp	r3, #64	; 0x40
 800180a:	d108      	bne.n	800181e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800181c:	e007      	b.n	800182e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	60da      	str	r2, [r3, #12]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_FLASH_Program+0xb0>)
 8001850:	7d1b      	ldrb	r3, [r3, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_FLASH_Program+0x1e>
 8001856:	2302      	movs	r3, #2
 8001858:	e043      	b.n	80018e2 <HAL_FLASH_Program+0xa6>
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_FLASH_Program+0xb0>)
 800185c:	2201      	movs	r2, #1
 800185e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001860:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001864:	f000 f878 	bl	8001958 <FLASH_WaitForLastOperation>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d133      	bne.n	80018da <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d823      	bhi.n	80018c0 <HAL_FLASH_Program+0x84>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_FLASH_Program+0x44>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	08001891 	.word	0x08001891
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018a9 	.word	0x080018a9
 800188c:	080018b5 	.word	0x080018b5
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001890:	783b      	ldrb	r3, [r7, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	f000 f921 	bl	8001adc <FLASH_Program_Byte>
        break;
 800189a:	e012      	b.n	80018c2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800189c:	883b      	ldrh	r3, [r7, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f000 f8f5 	bl	8001a90 <FLASH_Program_HalfWord>
        break;
 80018a6:	e00c      	b.n	80018c2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f000 f8c9 	bl	8001a44 <FLASH_Program_Word>
        break;
 80018b2:	e006      	b.n	80018c2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80018b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f000 f88d 	bl	80019d8 <FLASH_Program_DoubleWord>
        break;
 80018be:	e000      	b.n	80018c2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80018c0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c6:	f000 f847 	bl	8001958 <FLASH_WaitForLastOperation>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_FLASH_Program+0xb4>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_FLASH_Program+0xb4>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HAL_FLASH_Program+0xb0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	751a      	strb	r2, [r3, #20]

  return status;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000800 	.word	0x20000800
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_FLASH_Unlock+0x38>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	da0b      	bge.n	800191e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_FLASH_Unlock+0x38>)
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_FLASH_Unlock+0x3c>)
 800190a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_FLASH_Unlock+0x38>)
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_FLASH_Unlock+0x40>)
 8001910:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_FLASH_Unlock+0x38>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da01      	bge.n	800191e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800191e:	79fb      	ldrb	r3, [r7, #7]
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40023c00 	.word	0x40023c00
 8001930:	45670123 	.word	0x45670123
 8001934:	cdef89ab 	.word	0xcdef89ab

08001938 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_FLASH_Lock+0x1c>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_FLASH_Lock+0x1c>)
 8001942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001946:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40023c00 	.word	0x40023c00

08001958 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <FLASH_WaitForLastOperation+0x78>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800196a:	f7ff fcf7 	bl	800135c <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001970:	e010      	b.n	8001994 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d00c      	beq.n	8001994 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <FLASH_WaitForLastOperation+0x38>
 8001980:	f7ff fcec 	bl	800135c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d201      	bcs.n	8001994 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e019      	b.n	80019c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <FLASH_WaitForLastOperation+0x7c>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e8      	bne.n	8001972 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <FLASH_WaitForLastOperation+0x7c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019ac:	f000 f8ba 	bl	8001b24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e009      	b.n	80019c8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <FLASH_WaitForLastOperation+0x7c>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <FLASH_WaitForLastOperation+0x7c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
  
}  
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000800 	.word	0x20000800
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 80019ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 80019f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <FLASH_Program_DoubleWord+0x68>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001a0e:	f3bf 8f6f 	isb	sy
}
 8001a12:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001a14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	000a      	movs	r2, r1
 8001a22:	2300      	movs	r3, #0
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	3104      	adds	r1, #4
 8001a28:	4613      	mov	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a2c:	f3bf 8f4f 	dsb	sy
}
 8001a30:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <FLASH_Program_Word+0x48>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a78:	f3bf 8f4f 	dsb	sy
}
 8001a7c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <FLASH_Program_HalfWord+0x48>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac6:	f3bf 8f4f 	dsb	sy
}
 8001aca:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <FLASH_Program_Byte+0x44>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0e:	f3bf 8f4f 	dsb	sy
}
 8001b12:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b3e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b56:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b6e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b86:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <FLASH_SetErrorCode+0x90>)
 8001b9e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <FLASH_SetErrorCode+0x8c>)
 8001ba2:	22f2      	movs	r2, #242	; 0xf2
 8001ba4:	60da      	str	r2, [r3, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	20000800 	.word	0x20000800

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e175      	b.n	8001ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8164 	bne.w	8001ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x56>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80be 	beq.w	8001ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a65      	ldr	r2, [pc, #404]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_GPIO_Init+0x324>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d5a:	4a61      	ldr	r2, [pc, #388]	; (8001ee0 <HAL_GPIO_Init+0x328>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_GPIO_Init+0x32c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d037      	beq.n	8001df6 <HAL_GPIO_Init+0x23e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_GPIO_Init+0x23a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_GPIO_Init+0x334>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x236>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <HAL_GPIO_Init+0x338>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x232>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_GPIO_Init+0x33c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a53      	ldr	r2, [pc, #332]	; (8001ef8 <HAL_GPIO_Init+0x340>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_GPIO_Init+0x344>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x226>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x348>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x222>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x21e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_GPIO_Init+0x350>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001dce:	2309      	movs	r3, #9
 8001dd0:	e012      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	e010      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	e00e      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x328>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <HAL_GPIO_Init+0x354>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae86 	bls.w	8001bd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40021c00 	.word	0x40021c00
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40022400 	.word	0x40022400
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f54:	887a      	ldrh	r2, [r7, #2]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	400b      	ands	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fef2 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d104      	bne.n	8002012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_I2C_Init+0x11c>)
 800201e:	430b      	orrs	r3, r1
 8002020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69d9      	ldr	r1, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	02008000 	.word	0x02008000

08002098 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
  }
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00f      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0208 	orr.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00f      	beq.n	8002162 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f043 0202 	orr.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002160:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 030b 	and.w	r3, r3, #11
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fb77 	bl	8002868 <I2C_ITError>
  }
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <I2C_Slave_ISR_IT+0x24>
 8002222:	2302      	movs	r3, #2
 8002224:	e0e1      	b.n	80023ea <I2C_Slave_ISR_IT+0x1e8>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002242:	6939      	ldr	r1, [r7, #16]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f9b5 	bl	80025b4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d04b      	beq.n	80022ec <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800225a:	2b00      	cmp	r3, #0
 800225c:	d046      	beq.n	80022ec <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d128      	bne.n	80022ba <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b28      	cmp	r3, #40	; 0x28
 8002272:	d108      	bne.n	8002286 <I2C_Slave_ISR_IT+0x84>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227a:	d104      	bne.n	8002286 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa9e 	bl	80027c0 <I2C_ITListenCplt>
 8002284:	e031      	b.n	80022ea <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b29      	cmp	r3, #41	; 0x29
 8002290:	d10e      	bne.n	80022b0 <I2C_Slave_ISR_IT+0xae>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002298:	d00a      	beq.n	80022b0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2210      	movs	r2, #16
 80022a0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fbd7 	bl	8002a56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f926 	bl	80024fa <I2C_ITSlaveSeqCplt>
 80022ae:	e01c      	b.n	80022ea <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022b8:	e08f      	b.n	80023da <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0204 	orr.w	r2, r3, #4
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <I2C_Slave_ISR_IT+0xda>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022da:	d17e      	bne.n	80023da <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4619      	mov	r1, r3
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fac0 	bl	8002868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022e8:	e077      	b.n	80023da <I2C_Slave_ISR_IT+0x1d8>
 80022ea:	e076      	b.n	80023da <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d02f      	beq.n	8002356 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02a      	beq.n	8002356 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d018      	beq.n	800233c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d14b      	bne.n	80023de <I2C_Slave_ISR_IT+0x1dc>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234c:	d047      	beq.n	80023de <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8d3 	bl	80024fa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002354:	e043      	b.n	80023de <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d009      	beq.n	8002374 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800236a:	6939      	ldr	r1, [r7, #16]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f840 	bl	80023f2 <I2C_ITAddrCplt>
 8002372:	e035      	b.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d030      	beq.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80023c2:	e00d      	b.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ca:	d002      	beq.n	80023d2 <I2C_Slave_ISR_IT+0x1d0>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f891 	bl	80024fa <I2C_ITSlaveSeqCplt>
 80023d8:	e002      	b.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80023de:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002408:	2b28      	cmp	r3, #40	; 0x28
 800240a:	d16a      	bne.n	80024e2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	0c1b      	lsrs	r3, r3, #16
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b29b      	uxth	r3, r3
 8002426:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800242a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002438:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002446:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d138      	bne.n	80024c2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002450:	897b      	ldrh	r3, [r7, #10]
 8002452:	09db      	lsrs	r3, r3, #7
 8002454:	b29a      	uxth	r2, r3
 8002456:	89bb      	ldrh	r3, [r7, #12]
 8002458:	4053      	eors	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	f003 0306 	and.w	r3, r3, #6
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11c      	bne.n	800249e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	2b02      	cmp	r3, #2
 8002478:	d13b      	bne.n	80024f2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002490:	89ba      	ldrh	r2, [r7, #12]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe87 	bl	80021aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800249c:	e029      	b.n	80024f2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fb17 	bl	8002ada <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024b4:	89ba      	ldrh	r2, [r7, #12]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe75 	bl	80021aa <HAL_I2C_AddrCallback>
}
 80024c0:	e017      	b.n	80024f2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fb07 	bl	8002ada <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024d4:	89ba      	ldrh	r2, [r7, #12]
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe65 	bl	80021aa <HAL_I2C_AddrCallback>
}
 80024e0:	e007      	b.n	80024f2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2208      	movs	r2, #8
 80024e8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e00c      	b.n	8002548 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002546:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b29      	cmp	r3, #41	; 0x29
 8002552:	d112      	bne.n	800257a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2228      	movs	r2, #40	; 0x28
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002562:	2101      	movs	r1, #1
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fab8 	bl	8002ada <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe05 	bl	8002182 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002578:	e017      	b.n	80025aa <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b2a      	cmp	r3, #42	; 0x2a
 8002584:	d111      	bne.n	80025aa <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2228      	movs	r2, #40	; 0x28
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2222      	movs	r2, #34	; 0x22
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002594:	2102      	movs	r1, #2
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa9f 	bl	8002ada <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fdf6 	bl	8002196 <HAL_I2C_SlaveRxCpltCallback>
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b21      	cmp	r3, #33	; 0x21
 80025de:	d002      	beq.n	80025e6 <I2C_ITSlaveCplt+0x32>
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b29      	cmp	r3, #41	; 0x29
 80025e4:	d108      	bne.n	80025f8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80025e6:	f248 0101 	movw	r1, #32769	; 0x8001
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa75 	bl	8002ada <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2221      	movs	r2, #33	; 0x21
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
 80025f6:	e00d      	b.n	8002614 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b22      	cmp	r3, #34	; 0x22
 80025fc:	d002      	beq.n	8002604 <I2C_ITSlaveCplt+0x50>
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b2a      	cmp	r3, #42	; 0x2a
 8002602:	d107      	bne.n	8002614 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002604:	f248 0102 	movw	r1, #32770	; 0x8002
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fa66 	bl	8002ada <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002622:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <I2C_ITSlaveCplt+0x204>)
 8002630:	400b      	ands	r3, r1
 8002632:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa0e 	bl	8002a56 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002652:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01f      	beq.n	800269c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800266a:	e017      	b.n	800269c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002684:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	2b00      	cmp	r3, #0
 8002712:	d010      	beq.n	8002736 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8a4 	bl	8002868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b28      	cmp	r3, #40	; 0x28
 800272a:	d141      	bne.n	80027b0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f846 	bl	80027c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002734:	e03c      	b.n	80027b0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273e:	d014      	beq.n	800276a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff feda 	bl	80024fa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <I2C_ITSlaveCplt+0x208>)
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fd2f 	bl	80021c6 <HAL_I2C_ListenCpltCallback>
}
 8002768:	e022      	b.n	80027b0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b22      	cmp	r3, #34	; 0x22
 8002774:	d10e      	bne.n	8002794 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fd02 	bl	8002196 <HAL_I2C_SlaveRxCpltCallback>
}
 8002792:	e00d      	b.n	80027b0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fce9 	bl	8002182 <HAL_I2C_SlaveTxCpltCallback>
}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	fe00e800 	.word	0xfe00e800
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a25      	ldr	r2, [pc, #148]	; (8002864 <I2C_ITListenCplt+0xa4>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d022      	beq.n	800283c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	f043 0204 	orr.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800283c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f94a 	bl	8002ada <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fcb5 	bl	80021c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffff0000 	.word	0xffff0000

08002868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <I2C_ITError+0x194>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b28      	cmp	r3, #40	; 0x28
 800289e:	d005      	beq.n	80028ac <I2C_ITError+0x44>
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b29      	cmp	r3, #41	; 0x29
 80028a4:	d002      	beq.n	80028ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b2a      	cmp	r3, #42	; 0x2a
 80028aa:	d10b      	bne.n	80028c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028ac:	2103      	movs	r1, #3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f913 	bl	8002ada <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2228      	movs	r2, #40	; 0x28
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <I2C_ITError+0x198>)
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	e011      	b.n	80028e8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f906 	bl	8002ada <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b60      	cmp	r3, #96	; 0x60
 80028d8:	d003      	beq.n	80028e2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d039      	beq.n	800296a <I2C_ITError+0x102>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b11      	cmp	r3, #17
 80028fa:	d002      	beq.n	8002902 <I2C_ITError+0x9a>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b21      	cmp	r3, #33	; 0x21
 8002900:	d133      	bne.n	800296a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d107      	bne.n	8002922 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002920:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ff4b 	bl	80017c2 <HAL_DMA_GetState>
 800292c:	4603      	mov	r3, r0
 800292e:	2b01      	cmp	r3, #1
 8002930:	d017      	beq.n	8002962 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <I2C_ITError+0x19c>)
 8002938:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe ff19 	bl	800177e <HAL_DMA_Abort_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04d      	beq.n	80029ee <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295c:	4610      	mov	r0, r2
 800295e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002960:	e045      	b.n	80029ee <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f850 	bl	8002a08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002968:	e041      	b.n	80029ee <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d039      	beq.n	80029e6 <I2C_ITError+0x17e>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b12      	cmp	r3, #18
 8002976:	d002      	beq.n	800297e <I2C_ITError+0x116>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b22      	cmp	r3, #34	; 0x22
 800297c:	d133      	bne.n	80029e6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298c:	d107      	bne.n	800299e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe ff0d 	bl	80017c2 <HAL_DMA_GetState>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d017      	beq.n	80029de <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <I2C_ITError+0x19c>)
 80029b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fedb 	bl	800177e <HAL_DMA_Abort_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d011      	beq.n	80029f2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d8:	4610      	mov	r0, r2
 80029da:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029dc:	e009      	b.n	80029f2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f812 	bl	8002a08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e4:	e005      	b.n	80029f2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f80e 	bl	8002a08 <I2C_TreatErrorCallback>
  }
}
 80029ec:	e002      	b.n	80029f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f2:	bf00      	nop
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	ffff0000 	.word	0xffff0000
 8002a00:	08002203 	.word	0x08002203
 8002a04:	08002a9f 	.word	0x08002a9f

08002a08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b60      	cmp	r3, #96	; 0x60
 8002a1a:	d10e      	bne.n	8002a3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fbdb 	bl	80021ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a38:	e009      	b.n	8002a4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fbc6 	bl	80021da <HAL_I2C_ErrorCallback>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d103      	bne.n	8002a74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d007      	beq.n	8002a92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	619a      	str	r2, [r3, #24]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	2200      	movs	r2, #0
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ff9b 	bl	8002a08 <I2C_TreatErrorCallback>
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002afa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b08:	2b28      	cmp	r3, #40	; 0x28
 8002b0a:	d003      	beq.n	8002b14 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002b24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b32:	2b28      	cmp	r3, #40	; 0x28
 8002b34:	d003      	beq.n	8002b3e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	da03      	bge.n	8002b4e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d103      	bne.n	8002b5c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d103      	bne.n	8002b6a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f043 0320 	orr.w	r3, r3, #32
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d103      	bne.n	8002b78 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	400a      	ands	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d138      	bne.n	8002c1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e032      	b.n	8002c20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2224      	movs	r2, #36	; 0x24
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002be8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d139      	bne.n	8002cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e033      	b.n	8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	b08f      	sub	sp, #60	; 0x3c
 8002cc8:	af0a      	add	r7, sp, #40	; 0x28
 8002cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e116      	b.n	8002f04 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe f9d3 	bl	800109c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f849 	bl	8006dac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	687e      	ldr	r6, [r7, #4]
 8002d22:	466d      	mov	r5, sp
 8002d24:	f106 0410 	add.w	r4, r6, #16
 8002d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d38:	1d33      	adds	r3, r6, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f003 ffdd 	bl	8006cfc <USB_CoreInit>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d7      	b.n	8002f04 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f837 	bl	8006dce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e04a      	b.n	8002dfc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	333d      	adds	r3, #61	; 0x3d
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	333c      	adds	r3, #60	; 0x3c
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	b298      	uxth	r0, r3
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	; 0x44
 8002da2:	4602      	mov	r2, r0
 8002da4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3340      	adds	r3, #64	; 0x40
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3348      	adds	r3, #72	; 0x48
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334c      	adds	r3, #76	; 0x4c
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3354      	adds	r3, #84	; 0x54
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3af      	bcc.n	8002d66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	e044      	b.n	8002e96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	3301      	adds	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d3b5      	bcc.n	8002e0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	687e      	ldr	r6, [r7, #4]
 8002ea8:	466d      	mov	r5, sp
 8002eaa:	f106 0410 	add.w	r4, r6, #16
 8002eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ebe:	1d33      	adds	r3, r6, #4
 8002ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	f003 ffd0 	bl	8006e68 <USB_DevInit>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e014      	b.n	8002f04 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f80a 	bl	8002f0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f004 f98e 	bl	800721e <USB_DevDisconnect>

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	10000003 	.word	0x10000003

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e291      	b.n	800348e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8087 	beq.w	8003086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b96      	ldr	r3, [pc, #600]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d00c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f84:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d112      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
 8002f90:	4b90      	ldr	r3, [pc, #576]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06c      	beq.n	8003084 <HAL_RCC_OscConfig+0x130>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d168      	bne.n	8003084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e26b      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x7a>
 8002fc0:	4b84      	ldr	r3, [pc, #528]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a83      	ldr	r2, [pc, #524]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e02e      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x9c>
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7e      	ldr	r2, [pc, #504]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7b      	ldr	r2, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0xc0>
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a72      	ldr	r2, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xd8>
 8003014:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f992 	bl	800135c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe f98e 	bl	800135c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e21f      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xe8>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe f97e 	bl	800135c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe f97a 	bl	800135c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e20b      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x110>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d069      	beq.n	8003166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003092:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b4d      	ldr	r3, [pc, #308]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x190>
 80030aa:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x17a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1df      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	493d      	ldr	r1, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e040      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d023      	beq.n	8003134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f930 	bl	800135c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe f92c 	bl	800135c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1bd      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4929      	ldr	r1, [pc, #164]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f90c 	bl	800135c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe f908 	bl	800135c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e199      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d038      	beq.n	80031e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe f8e9 	bl	800135c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe f8e5 	bl	800135c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e176      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x23a>
 80031ac:	e01a      	b.n	80031e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <HAL_RCC_OscConfig+0x280>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe f8cf 	bl	800135c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe f8cb 	bl	800135c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d903      	bls.n	80031d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e15c      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
 80031d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ee      	bne.n	80031c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a4 	beq.w	800333a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b8b      	ldr	r3, [pc, #556]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a87      	ldr	r2, [pc, #540]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b85      	ldr	r3, [pc, #532]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b82      	ldr	r3, [pc, #520]	; (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003226:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7e      	ldr	r2, [pc, #504]	; (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fe f893 	bl	800135c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe f88f 	bl	800135c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e120      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324c:	4b75      	ldr	r3, [pc, #468]	; (8003424 <HAL_RCC_OscConfig+0x4d0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x31a>
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a6e      	ldr	r2, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	e02d      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x33c>
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x35e>
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b5e      	ldr	r3, [pc, #376]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a5d      	ldr	r2, [pc, #372]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
 80032b2:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b58      	ldr	r3, [pc, #352]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a57      	ldr	r2, [pc, #348]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe f843 	bl	800135c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe f83f 	bl	800135c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0ce      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x386>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fe f82d 	bl	800135c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe f829 	bl	800135c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0b8      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a3b      	ldr	r2, [pc, #236]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80a4 	beq.w	800348c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d06b      	beq.n	8003428 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d149      	bne.n	80033ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fffa 	bl	800135c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd fff6 	bl	800135c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	4313      	orrs	r3, r2
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd ffca 	bl	800135c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd ffc6 	bl	800135c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e057      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x478>
 80033ea:	e04f      	b.n	800348c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd ffb0 	bl	800135c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd ffac 	bl	800135c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e03d      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_OscConfig+0x4cc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x4ac>
 800341e:	e035      	b.n	800348c <HAL_RCC_OscConfig+0x538>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x544>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	4965      	ldr	r1, [pc, #404]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fd fee4 	bl	800135c <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fd fee0 	bl	800135c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4922      	ldr	r1, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x1cc>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1d0>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1d4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fe40 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023c00 	.word	0x40023c00
 8003664:	40023800 	.word	0x40023800
 8003668:	08007354 	.word	0x08007354
 800366c:	20000004 	.word	0x20000004
 8003670:	20000008 	.word	0x20000008

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003678:	b094      	sub	sp, #80	; 0x50
 800367a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
 8003680:	2300      	movs	r3, #0
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003684:	2300      	movs	r3, #0
 8003686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800368c:	4b79      	ldr	r3, [pc, #484]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d00d      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003698:	2b08      	cmp	r3, #8
 800369a:	f200 80e1 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x34>
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x3a>
 80036a6:	e0db      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_GetSysClockFreq+0x204>)
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ac:	e0db      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ae:	4b73      	ldr	r3, [pc, #460]	; (800387c <HAL_RCC_GetSysClockFreq+0x208>)
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b2:	e0d8      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b4:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d063      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	2200      	movs	r2, #0
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
 80036de:	2300      	movs	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4621      	mov	r1, r4
 8003700:	1a51      	subs	r1, r2, r1
 8003702:	6139      	str	r1, [r7, #16]
 8003704:	4629      	mov	r1, r5
 8003706:	eb63 0301 	sbc.w	r3, r3, r1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003718:	4659      	mov	r1, fp
 800371a:	018b      	lsls	r3, r1, #6
 800371c:	4651      	mov	r1, sl
 800371e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003722:	4651      	mov	r1, sl
 8003724:	018a      	lsls	r2, r1, #6
 8003726:	4651      	mov	r1, sl
 8003728:	ebb2 0801 	subs.w	r8, r2, r1
 800372c:	4659      	mov	r1, fp
 800372e:	eb63 0901 	sbc.w	r9, r3, r1
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800373e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003746:	4690      	mov	r8, r2
 8003748:	4699      	mov	r9, r3
 800374a:	4623      	mov	r3, r4
 800374c:	eb18 0303 	adds.w	r3, r8, r3
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	462b      	mov	r3, r5
 8003754:	eb49 0303 	adc.w	r3, r9, r3
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003766:	4629      	mov	r1, r5
 8003768:	024b      	lsls	r3, r1, #9
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003770:	4621      	mov	r1, r4
 8003772:	024a      	lsls	r2, r1, #9
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377a:	2200      	movs	r2, #0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
 800377e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003784:	f7fc fd40 	bl	8000208 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003790:	e058      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	4618      	mov	r0, r3
 800379c:	4611      	mov	r1, r2
 800379e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037ac:	4642      	mov	r2, r8
 80037ae:	464b      	mov	r3, r9
 80037b0:	f04f 0000 	mov.w	r0, #0
 80037b4:	f04f 0100 	mov.w	r1, #0
 80037b8:	0159      	lsls	r1, r3, #5
 80037ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037be:	0150      	lsls	r0, r2, #5
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4641      	mov	r1, r8
 80037c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ca:	4649      	mov	r1, r9
 80037cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037e4:	ebb2 040a 	subs.w	r4, r2, sl
 80037e8:	eb63 050b 	sbc.w	r5, r3, fp
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	00eb      	lsls	r3, r5, #3
 80037f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	4643      	mov	r3, r8
 8003802:	18e3      	adds	r3, r4, r3
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	464b      	mov	r3, r9
 8003808:	eb45 0303 	adc.w	r3, r5, r3
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800381a:	4629      	mov	r1, r5
 800381c:	028b      	lsls	r3, r1, #10
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003824:	4621      	mov	r1, r4
 8003826:	028a      	lsls	r2, r1, #10
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382e:	2200      	movs	r2, #0
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	61fa      	str	r2, [r7, #28]
 8003834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003838:	f7fc fce6 	bl	8000208 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetSysClockFreq+0x200>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0x204>)
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003868:	4618      	mov	r0, r3
 800386a:	3750      	adds	r7, #80	; 0x50
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000004 	.word	0x20000004

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08007364 	.word	0x08007364

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffdc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0b5b      	lsrs	r3, r3, #13
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08007364 	.word	0x08007364

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d012      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003910:	4b69      	ldr	r3, [pc, #420]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a68      	ldr	r2, [pc, #416]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	4964      	ldr	r1, [pc, #400]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	4959      	ldr	r1, [pc, #356]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800397e:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	494a      	ldr	r1, [pc, #296]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 808b 	beq.w	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	4a39      	ldr	r2, [pc, #228]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	; 0x40
 80039d8:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fd fcb4 	bl	800135c <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fcb0 	bl	800135c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e357      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d035      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d02e      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a34:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d114      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fc78 	bl	800135c <HAL_GetTick>
 8003a6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd fc74 	bl	800135c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e319      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9e:	d111      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aae:	400b      	ands	r3, r1
 8003ab0:	4901      	ldr	r1, [pc, #4]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	0ffffcff 	.word	0x0ffffcff
 8003ac4:	4baa      	ldr	r3, [pc, #680]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4aa9      	ldr	r2, [pc, #676]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	4ba7      	ldr	r3, [pc, #668]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	49a4      	ldr	r1, [pc, #656]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aee:	4ba0      	ldr	r3, [pc, #640]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af4:	4a9e      	ldr	r2, [pc, #632]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003afe:	4b9c      	ldr	r3, [pc, #624]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	4999      	ldr	r1, [pc, #612]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b1c:	4b94      	ldr	r3, [pc, #592]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2a:	4991      	ldr	r1, [pc, #580]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3e:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4c:	4988      	ldr	r1, [pc, #544]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6e:	4980      	ldr	r1, [pc, #512]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b82:	4b7b      	ldr	r3, [pc, #492]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4977      	ldr	r1, [pc, #476]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba4:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	496f      	ldr	r1, [pc, #444]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc6:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f023 020c 	bic.w	r2, r3, #12
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	4966      	ldr	r1, [pc, #408]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	495e      	ldr	r1, [pc, #376]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c0a:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	4955      	ldr	r1, [pc, #340]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c4e:	4b48      	ldr	r3, [pc, #288]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	4944      	ldr	r1, [pc, #272]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c70:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	493c      	ldr	r1, [pc, #240]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	4933      	ldr	r1, [pc, #204]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc2:	492b      	ldr	r1, [pc, #172]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce4:	4922      	ldr	r1, [pc, #136]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	4912      	ldr	r1, [pc, #72]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d48:	4909      	ldr	r1, [pc, #36]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d006      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80d9 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d64:	4b02      	ldr	r3, [pc, #8]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a01      	ldr	r2, [pc, #4]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6e:	e001      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d76:	f7fd faf1 	bl	800135c <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7e:	f7fd faed 	bl	800135c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e194      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d90:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d021      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003db0:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dbe:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	019a      	lsls	r2, r3, #6
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	071b      	lsls	r3, r3, #28
 8003de4:	4957      	ldr	r1, [pc, #348]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02e      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d129      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e18:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2c:	0f1b      	lsrs	r3, r3, #28
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	019a      	lsls	r2, r3, #6
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	071b      	lsls	r3, r3, #28
 8003e4c:	493d      	ldr	r1, [pc, #244]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e54:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5a:	f023 021f 	bic.w	r2, r3, #31
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	3b01      	subs	r3, #1
 8003e64:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7e:	0e1b      	lsrs	r3, r3, #24
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	0f1b      	lsrs	r3, r3, #28
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	019a      	lsls	r2, r3, #6
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	4925      	ldr	r1, [pc, #148]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d011      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	019a      	lsls	r2, r3, #6
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	071b      	lsls	r3, r3, #28
 8003edc:	4919      	ldr	r1, [pc, #100]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee4:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fa34 	bl	800135c <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef8:	f7fd fa30 	bl	800135c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0d7      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 80cd 	bne.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fa17 	bl	800135c <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f32:	f7fd fa13 	bl	800135c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	; 0x64
 8003f3e:	d903      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0ba      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f48:	4b5e      	ldr	r3, [pc, #376]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d0ed      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d02e      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d12a      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f7e:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f8c:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	4944      	ldr	r1, [pc, #272]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fba:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	493d      	ldr	r1, [pc, #244]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d022      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe8:	d11d      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff8:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	0f1b      	lsrs	r3, r3, #28
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	019a      	lsls	r2, r3, #6
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	071b      	lsls	r3, r3, #28
 800401e:	4929      	ldr	r1, [pc, #164]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d028      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	0e1b      	lsrs	r3, r3, #24
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004040:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	431a      	orrs	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	4917      	ldr	r1, [pc, #92]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4911      	ldr	r1, [pc, #68]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd f964 	bl	800135c <HAL_GetTick>
 8004094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004098:	f7fd f960 	bl	800135c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e007      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b6:	d1ef      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800

080040c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e049      	b.n	800416e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fed8 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 fd26 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e054      	b.n	800423a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a26      	ldr	r2, [pc, #152]	; (8004248 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d01d      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a22      	ldr	r2, [pc, #136]	; (800424c <HAL_TIM_Base_Start_IT+0xd4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <HAL_TIM_Base_Start_IT+0xd8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_TIM_Base_Start_IT+0xdc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_TIM_Base_Start_IT+0xe0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_TIM_Base_Start_IT+0xe4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_TIM_Base_Start_IT+0x80>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <HAL_TIM_Base_Start_IT+0xe8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d115      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_TIM_Base_Start_IT+0xec>)
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d015      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0xbe>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d011      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e008      	b.n	8004236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e000      	b.n	8004238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40010400 	.word	0x40010400
 800425c:	40014000 	.word	0x40014000
 8004260:	40001800 	.word	0x40001800
 8004264:	00010007 	.word	0x00010007

08004268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e049      	b.n	800430e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fdea 	bl	8000e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fc56 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start+0x24>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e03c      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d109      	bne.n	8004356 <HAL_TIM_PWM_Start+0x3e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	e02f      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start+0x58>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e022      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d109      	bne.n	800438a <HAL_TIM_PWM_Start+0x72>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e015      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start+0x8c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e092      	b.n	80044e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start+0xb6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start+0xc6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	e01b      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	e013      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start+0xe6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fc:	e00b      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0xf6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	e003      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ff32 	bl	8005288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	; (80044ec <HAL_TIM_PWM_Start+0x1d4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_TIM_PWM_Start+0x120>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_TIM_PWM_Start+0x1d8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_TIM_PWM_Start+0x124>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_TIM_PWM_Start+0x126>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a25      	ldr	r2, [pc, #148]	; (80044ec <HAL_TIM_PWM_Start+0x1d4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d022      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d01d      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <HAL_TIM_PWM_Start+0x1dc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <HAL_TIM_PWM_Start+0x1e4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_TIM_PWM_Start+0x1d8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d009      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_TIM_PWM_Start+0x1e8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x18a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_TIM_PWM_Start+0x1ec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d115      	bne.n	80044ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_TIM_PWM_Start+0x1f0>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d015      	beq.n	80044e0 <HAL_TIM_PWM_Start+0x1c8>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d011      	beq.n	80044e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	e008      	b.n	80044e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e000      	b.n	80044e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40001800 	.word	0x40001800
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0202 	mvn.w	r2, #2
 8004538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fae4 	bl	8004b1c <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fad6 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fae7 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0204 	mvn.w	r2, #4
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 faba 	bl	8004b1c <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 faac 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fabd 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0208 	mvn.w	r2, #8
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa90 	bl	8004b1c <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa82 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fa93 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b10      	cmp	r3, #16
 800461c:	d122      	bne.n	8004664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d11b      	bne.n	8004664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2208      	movs	r2, #8
 800463a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa66 	bl	8004b1c <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa58 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa69 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0201 	mvn.w	r2, #1
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fabc 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b80      	cmp	r3, #128	; 0x80
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fea4 	bl	8005404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fe97 	bl	8005418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa17 	bl	8004b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d10e      	bne.n	8004742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0220 	mvn.w	r2, #32
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fe57 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004766:	2302      	movs	r3, #2
 8004768:	e0ff      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b14      	cmp	r3, #20
 8004776:	f200 80f0 	bhi.w	800495a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047d5 	.word	0x080047d5
 8004784:	0800495b 	.word	0x0800495b
 8004788:	0800495b 	.word	0x0800495b
 800478c:	0800495b 	.word	0x0800495b
 8004790:	08004815 	.word	0x08004815
 8004794:	0800495b 	.word	0x0800495b
 8004798:	0800495b 	.word	0x0800495b
 800479c:	0800495b 	.word	0x0800495b
 80047a0:	08004857 	.word	0x08004857
 80047a4:	0800495b 	.word	0x0800495b
 80047a8:	0800495b 	.word	0x0800495b
 80047ac:	0800495b 	.word	0x0800495b
 80047b0:	08004897 	.word	0x08004897
 80047b4:	0800495b 	.word	0x0800495b
 80047b8:	0800495b 	.word	0x0800495b
 80047bc:	0800495b 	.word	0x0800495b
 80047c0:	080048d9 	.word	0x080048d9
 80047c4:	0800495b 	.word	0x0800495b
 80047c8:	0800495b 	.word	0x0800495b
 80047cc:	0800495b 	.word	0x0800495b
 80047d0:	08004919 	.word	0x08004919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fa5c 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
      break;
 8004812:	e0a5      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 faae 	bl	8004d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	021a      	lsls	r2, r3, #8
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	619a      	str	r2, [r3, #24]
      break;
 8004854:	e084      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fb05 	bl	8004e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      break;
 8004894:	e064      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb5b 	bl	8004f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
      break;
 80048d6:	e043      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fb92 	bl	8005008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0204 	bic.w	r2, r2, #4
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004916:	e023      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fbc4 	bl	80050ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	021a      	lsls	r2, r3, #8
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004958:	e002      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
      break;
 800495e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b4      	b.n	8004afa <HAL_TIM_ConfigClockSource+0x186>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <HAL_TIM_ConfigClockSource+0x190>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xd4>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	f000 8086 	beq.w	8004ae6 <HAL_TIM_ConfigClockSource+0x172>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xa6>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x11a>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xfa>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x13a>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a2a:	f000 fc0d 	bl	8005248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04f      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a58:	f000 fbf6 	bl	8005248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 fb6a 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fbc3 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fb89 	bl	80051b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbb3 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fb4a 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fba3 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 fb9a 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e003      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	fffeff88 	.word	0xfffeff88

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d00f      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	; (8004c70 <TIM_Base_SetConfig+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3c      	ldr	r2, [pc, #240]	; (8004c74 <TIM_Base_SetConfig+0x11c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <TIM_Base_SetConfig+0x120>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3a      	ldr	r2, [pc, #232]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d108      	bne.n	8004baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2f      	ldr	r2, [pc, #188]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d02b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d027      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <TIM_Base_SetConfig+0x118>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d023      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <TIM_Base_SetConfig+0x11c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01f      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <TIM_Base_SetConfig+0x120>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <TIM_Base_SetConfig+0x128>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <TIM_Base_SetConfig+0x12c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <TIM_Base_SetConfig+0x130>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <TIM_Base_SetConfig+0x134>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	; (8004c90 <TIM_Base_SetConfig+0x138>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <TIM_Base_SetConfig+0x13c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <TIM_Base_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0xf8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <TIM_Base_SetConfig+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d103      	bne.n	8004c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	615a      	str	r2, [r3, #20]
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	40001800 	.word	0x40001800
 8004c90:	40001c00 	.word	0x40001c00
 8004c94:	40002000 	.word	0x40002000

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <TIM_OC1_SetConfig+0xd8>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0302 	bic.w	r3, r3, #2
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <TIM_OC1_SetConfig+0xdc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC1_SetConfig+0x64>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <TIM_OC1_SetConfig+0xe0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10c      	bne.n	8004d16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0308 	bic.w	r3, r3, #8
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 0304 	bic.w	r3, r3, #4
 8004d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC1_SetConfig+0xdc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC1_SetConfig+0x8e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC1_SetConfig+0xe0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d111      	bne.n	8004d4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	621a      	str	r2, [r3, #32]
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	fffeff8f 	.word	0xfffeff8f
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <TIM_OC2_SetConfig+0xe4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0320 	bic.w	r3, r3, #32
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a23      	ldr	r2, [pc, #140]	; (8004e64 <TIM_OC2_SetConfig+0xe8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC2_SetConfig+0x68>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <TIM_OC2_SetConfig+0xec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10d      	bne.n	8004e00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <TIM_OC2_SetConfig+0xe8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC2_SetConfig+0x94>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <TIM_OC2_SetConfig+0xec>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d113      	bne.n	8004e38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	feff8fff 	.word	0xfeff8fff
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010400 	.word	0x40010400

08004e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <TIM_OC3_SetConfig+0xe0>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC3_SetConfig+0x66>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <TIM_OC3_SetConfig+0xe8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_OC3_SetConfig+0x92>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <TIM_OC3_SetConfig+0xe8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d113      	bne.n	8004f26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	fffeff8f 	.word	0xfffeff8f
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400

08004f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <TIM_OC4_SetConfig+0xa4>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	031b      	lsls	r3, r3, #12
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <TIM_OC4_SetConfig+0xa8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC4_SetConfig+0x68>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <TIM_OC4_SetConfig+0xac>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	feff8fff 	.word	0xfeff8fff
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <TIM_OC5_SetConfig+0x98>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <TIM_OC5_SetConfig+0x9c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC5_SetConfig+0x5e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <TIM_OC5_SetConfig+0xa0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d109      	bne.n	800507a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	fffeff8f 	.word	0xfffeff8f
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010400 	.word	0x40010400

080050ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <TIM_OC6_SetConfig+0x9c>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	051b      	lsls	r3, r3, #20
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a13      	ldr	r2, [pc, #76]	; (800514c <TIM_OC6_SetConfig+0xa0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC6_SetConfig+0x60>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <TIM_OC6_SetConfig+0xa4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	feff8fff 	.word	0xfeff8fff
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400

08005154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 030a 	bic.w	r3, r3, #10
 8005190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	f043 0307 	orr.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1a      	ldr	r2, [r3, #32]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e06d      	b.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a30      	ldr	r2, [pc, #192]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d022      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d01d      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40001800 	.word	0x40001800

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e040      	b.n	80054c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fb fdbc 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fbba 	bl	8005be4 <UART_SetConfig>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fe12 	bl	80060ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fe99 	bl	80061f0 <UART_CheckIdleState>
 80054be:	4603      	mov	r3, r0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d132      	bne.n	8005546 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Receive_IT+0x24>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e02b      	b.n	8005548 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d018      	beq.n	8005536 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	613b      	str	r3, [r7, #16]
   return(result);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e6      	bne.n	8005504 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	461a      	mov	r2, r3
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 ff55 	bl	80063ec <UART_Start_Receive_IT>
 8005542:	4603      	mov	r3, r0
 8005544:	e000      	b.n	8005548 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005546:	2302      	movs	r3, #2
  }
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	2b20      	cmp	r3, #32
 8005566:	d132      	bne.n	80055ce <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_UART_Receive_DMA+0x24>
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e02b      	b.n	80055d0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d018      	beq.n	80055be <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	69f9      	ldr	r1, [r7, #28]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 ffd7 	bl	8006578 <UART_Start_Receive_DMA>
 80055ca:	4603      	mov	r3, r0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3728      	adds	r7, #40	; 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b0ba      	sub	sp, #232	; 0xe8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005602:	f640 030f 	movw	r3, #2063	; 0x80f
 8005606:	4013      	ands	r3, r2
 8005608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800560c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d115      	bne.n	8005640 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00f      	beq.n	8005640 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8297 	beq.w	8005b64 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
      }
      return;
 800563e:	e291      	b.n	8005b64 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8117 	beq.w	8005878 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800565a:	4b85      	ldr	r3, [pc, #532]	; (8005870 <HAL_UART_IRQHandler+0x298>)
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 810a 	beq.w	8005878 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <HAL_UART_IRQHandler+0xbc>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568a:	f043 0201 	orr.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d011      	beq.n	80056c4 <HAL_UART_IRQHandler+0xec>
 80056a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2202      	movs	r2, #2
 80056b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ba:	f043 0204 	orr.w	r2, r3, #4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d011      	beq.n	80056f4 <HAL_UART_IRQHandler+0x11c>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2204      	movs	r2, #4
 80056e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ea:	f043 0202 	orr.w	r2, r3, #2
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005710:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2208      	movs	r2, #8
 800571e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	f043 0208 	orr.w	r2, r3, #8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_UART_IRQHandler+0x18a>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005758:	f043 0220 	orr.w	r2, r3, #32
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 81fd 	beq.w	8005b68 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d04f      	beq.n	800585a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 ffa2 	bl	8006704 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d141      	bne.n	8005852 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1d9      	bne.n	80057ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005826:	4a13      	ldr	r2, [pc, #76]	; (8005874 <HAL_UART_IRQHandler+0x29c>)
 8005828:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582e:	4618      	mov	r0, r3
 8005830:	f7fb ffa5 	bl	800177e <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d017      	beq.n	800586a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	e00f      	b.n	800586a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9b4 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	e00b      	b.n	800586a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9b0 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e007      	b.n	800586a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ac 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005868:	e17e      	b.n	8005b68 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586a:	bf00      	nop
    return;
 800586c:	e17c      	b.n	8005b68 <HAL_UART_IRQHandler+0x590>
 800586e:	bf00      	nop
 8005870:	04000120 	.word	0x04000120
 8005874:	080069b1 	.word	0x080069b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	2b01      	cmp	r3, #1
 800587e:	f040 814c 	bne.w	8005b1a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8145 	beq.w	8005b1a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 813e 	beq.w	8005b1a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2210      	movs	r2, #16
 80058a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	f040 80b6 	bne.w	8005a22 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8150 	beq.w	8005b6c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f080 8148 	bcs.w	8005b6c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f0:	f000 8086 	beq.w	8005a00 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800591e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800592a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1da      	bne.n	80058f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800594e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800596a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e1      	bne.n	800593e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800598a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800599e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d0:	f023 0310 	bic.w	r3, r3, #16
 80059d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e4      	bne.n	80059c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fb fe4f 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8d6 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a20:	e0a4      	b.n	8005b6c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8096 	beq.w	8005b70 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8091 	beq.w	8005b70 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a70:	647b      	str	r3, [r7, #68]	; 0x44
 8005a72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e4      	bne.n	8005a4e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	623b      	str	r3, [r7, #32]
   return(result);
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aa8:	633a      	str	r2, [r7, #48]	; 0x30
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e3      	bne.n	8005a84 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 0310 	bic.w	r3, r3, #16
 8005ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	617b      	str	r3, [r7, #20]
   return(result);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e4      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f85a 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b18:	e02a      	b.n	8005b70 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01c      	beq.n	8005b74 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
    }
    return;
 8005b42:	e017      	b.n	8005b74 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_UART_IRQHandler+0x59e>
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00c      	beq.n	8005b76 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 ff3d 	bl	80069dc <UART_EndTransmit_IT>
    return;
 8005b62:	e008      	b.n	8005b76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005b64:	bf00      	nop
 8005b66:	e006      	b.n	8005b76 <HAL_UART_IRQHandler+0x59e>
    return;
 8005b68:	bf00      	nop
 8005b6a:	e004      	b.n	8005b76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005b6c:	bf00      	nop
 8005b6e:	e002      	b.n	8005b76 <HAL_UART_IRQHandler+0x59e>
      return;
 8005b70:	bf00      	nop
 8005b72:	e000      	b.n	8005b76 <HAL_UART_IRQHandler+0x59e>
    return;
 8005b74:	bf00      	nop
  }

}
 8005b76:	37e8      	adds	r7, #232	; 0xe8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4ba6      	ldr	r3, [pc, #664]	; (8005ea8 <UART_SetConfig+0x2c4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a94      	ldr	r2, [pc, #592]	; (8005eac <UART_SetConfig+0x2c8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d120      	bne.n	8005ca2 <UART_SetConfig+0xbe>
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d816      	bhi.n	8005c9c <UART_SetConfig+0xb8>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x90>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c91 	.word	0x08005c91
 8005c7c:	08005c8b 	.word	0x08005c8b
 8005c80:	08005c97 	.word	0x08005c97
 8005c84:	2301      	movs	r3, #1
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e150      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e14d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c90:	2304      	movs	r3, #4
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e14a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c96:	2308      	movs	r3, #8
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e147      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e144      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a83      	ldr	r2, [pc, #524]	; (8005eb4 <UART_SetConfig+0x2d0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d132      	bne.n	8005d12 <UART_SetConfig+0x12e>
 8005cac:	4b80      	ldr	r3, [pc, #512]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d828      	bhi.n	8005d0c <UART_SetConfig+0x128>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0xdc>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d01 	.word	0x08005d01
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005cfb 	.word	0x08005cfb
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d0d 	.word	0x08005d0d
 8005cf0:	08005d07 	.word	0x08005d07
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e118      	b.n	8005f2c <UART_SetConfig+0x348>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e115      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e112      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e10f      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e10c      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d120      	bne.n	8005d5e <UART_SetConfig+0x17a>
 8005d1c:	4b64      	ldr	r3, [pc, #400]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d013      	beq.n	8005d52 <UART_SetConfig+0x16e>
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d814      	bhi.n	8005d58 <UART_SetConfig+0x174>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d009      	beq.n	8005d46 <UART_SetConfig+0x162>
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d810      	bhi.n	8005d58 <UART_SetConfig+0x174>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <UART_SetConfig+0x15c>
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d006      	beq.n	8005d4c <UART_SetConfig+0x168>
 8005d3e:	e00b      	b.n	8005d58 <UART_SetConfig+0x174>
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e0f2      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e0ef      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e0ec      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e0e9      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e0e6      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a56      	ldr	r2, [pc, #344]	; (8005ebc <UART_SetConfig+0x2d8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d120      	bne.n	8005daa <UART_SetConfig+0x1c6>
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d72:	2bc0      	cmp	r3, #192	; 0xc0
 8005d74:	d013      	beq.n	8005d9e <UART_SetConfig+0x1ba>
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d814      	bhi.n	8005da4 <UART_SetConfig+0x1c0>
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d009      	beq.n	8005d92 <UART_SetConfig+0x1ae>
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d810      	bhi.n	8005da4 <UART_SetConfig+0x1c0>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <UART_SetConfig+0x1a8>
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d006      	beq.n	8005d98 <UART_SetConfig+0x1b4>
 8005d8a:	e00b      	b.n	8005da4 <UART_SetConfig+0x1c0>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e0cc      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d92:	2302      	movs	r3, #2
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e0c9      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e0c6      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e0c3      	b.n	8005f2c <UART_SetConfig+0x348>
 8005da4:	2310      	movs	r3, #16
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0c0      	b.n	8005f2c <UART_SetConfig+0x348>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a44      	ldr	r2, [pc, #272]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d125      	bne.n	8005e00 <UART_SetConfig+0x21c>
 8005db4:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc2:	d017      	beq.n	8005df4 <UART_SetConfig+0x210>
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	d817      	bhi.n	8005dfa <UART_SetConfig+0x216>
 8005dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dce:	d00b      	beq.n	8005de8 <UART_SetConfig+0x204>
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d811      	bhi.n	8005dfa <UART_SetConfig+0x216>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <UART_SetConfig+0x1fe>
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d006      	beq.n	8005dee <UART_SetConfig+0x20a>
 8005de0:	e00b      	b.n	8005dfa <UART_SetConfig+0x216>
 8005de2:	2300      	movs	r3, #0
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e0a1      	b.n	8005f2c <UART_SetConfig+0x348>
 8005de8:	2302      	movs	r3, #2
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e09e      	b.n	8005f2c <UART_SetConfig+0x348>
 8005dee:	2304      	movs	r3, #4
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e09b      	b.n	8005f2c <UART_SetConfig+0x348>
 8005df4:	2308      	movs	r3, #8
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e098      	b.n	8005f2c <UART_SetConfig+0x348>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e095      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <UART_SetConfig+0x2e0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d125      	bne.n	8005e56 <UART_SetConfig+0x272>
 8005e0a:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e18:	d017      	beq.n	8005e4a <UART_SetConfig+0x266>
 8005e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0x26c>
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e24:	d00b      	beq.n	8005e3e <UART_SetConfig+0x25a>
 8005e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2a:	d811      	bhi.n	8005e50 <UART_SetConfig+0x26c>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x254>
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0x260>
 8005e36:	e00b      	b.n	8005e50 <UART_SetConfig+0x26c>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e076      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e073      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e070      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e06d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e06a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d138      	bne.n	8005ed2 <UART_SetConfig+0x2ee>
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6e:	d017      	beq.n	8005ea0 <UART_SetConfig+0x2bc>
 8005e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e74:	d82a      	bhi.n	8005ecc <UART_SetConfig+0x2e8>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	d00b      	beq.n	8005e94 <UART_SetConfig+0x2b0>
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e80:	d824      	bhi.n	8005ecc <UART_SetConfig+0x2e8>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <UART_SetConfig+0x2aa>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d006      	beq.n	8005e9a <UART_SetConfig+0x2b6>
 8005e8c:	e01e      	b.n	8005ecc <UART_SetConfig+0x2e8>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e04b      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e94:	2302      	movs	r3, #2
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e048      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e045      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e042      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ea6:	bf00      	nop
 8005ea8:	efff69f3 	.word	0xefff69f3
 8005eac:	40011000 	.word	0x40011000
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40004400 	.word	0x40004400
 8005eb8:	40004800 	.word	0x40004800
 8005ebc:	40004c00 	.word	0x40004c00
 8005ec0:	40005000 	.word	0x40005000
 8005ec4:	40011400 	.word	0x40011400
 8005ec8:	40007800 	.word	0x40007800
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e02c      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a72      	ldr	r2, [pc, #456]	; (80060a0 <UART_SetConfig+0x4bc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d125      	bne.n	8005f28 <UART_SetConfig+0x344>
 8005edc:	4b71      	ldr	r3, [pc, #452]	; (80060a4 <UART_SetConfig+0x4c0>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ee6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eea:	d017      	beq.n	8005f1c <UART_SetConfig+0x338>
 8005eec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ef0:	d817      	bhi.n	8005f22 <UART_SetConfig+0x33e>
 8005ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef6:	d00b      	beq.n	8005f10 <UART_SetConfig+0x32c>
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efc:	d811      	bhi.n	8005f22 <UART_SetConfig+0x33e>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <UART_SetConfig+0x326>
 8005f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f06:	d006      	beq.n	8005f16 <UART_SetConfig+0x332>
 8005f08:	e00b      	b.n	8005f22 <UART_SetConfig+0x33e>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e00d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f10:	2302      	movs	r3, #2
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e00a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f16:	2304      	movs	r3, #4
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e007      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e004      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f22:	2310      	movs	r3, #16
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e001      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	d15b      	bne.n	8005fee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f36:	7ffb      	ldrb	r3, [r7, #31]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d828      	bhi.n	8005f8e <UART_SetConfig+0x3aa>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x360>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f8f 	.word	0x08005f8f
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f8f 	.word	0x08005f8f
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fd fc96 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8005f6c:	61b8      	str	r0, [r7, #24]
        break;
 8005f6e:	e013      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fd fca6 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8005f74:	61b8      	str	r0, [r7, #24]
        break;
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b4b      	ldr	r3, [pc, #300]	; (80060a8 <UART_SetConfig+0x4c4>)
 8005f7a:	61bb      	str	r3, [r7, #24]
        break;
 8005f7c:	e00c      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fd fb79 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8005f82:	61b8      	str	r0, [r7, #24]
        break;
 8005f84:	e008      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8a:	61bb      	str	r3, [r7, #24]
        break;
 8005f8c:	e004      	b.n	8005f98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	77bb      	strb	r3, [r7, #30]
        break;
 8005f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d074      	beq.n	8006088 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	005a      	lsls	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	441a      	add	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d916      	bls.n	8005fe8 <UART_SetConfig+0x404>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d212      	bcs.n	8005fe8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f023 030f 	bic.w	r3, r3, #15
 8005fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	89fa      	ldrh	r2, [r7, #14]
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	e04f      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77bb      	strb	r3, [r7, #30]
 8005fec:	e04c      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fee:	7ffb      	ldrb	r3, [r7, #31]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d828      	bhi.n	8006046 <UART_SetConfig+0x462>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x418>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	08006047 	.word	0x08006047
 800600c:	08006037 	.word	0x08006037
 8006010:	08006047 	.word	0x08006047
 8006014:	08006047 	.word	0x08006047
 8006018:	08006047 	.word	0x08006047
 800601c:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fd fc3a 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8006024:	61b8      	str	r0, [r7, #24]
        break;
 8006026:	e013      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fd fc4a 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 800602c:	61b8      	str	r0, [r7, #24]
        break;
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <UART_SetConfig+0x4c4>)
 8006032:	61bb      	str	r3, [r7, #24]
        break;
 8006034:	e00c      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fd fb1d 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800603a:	61b8      	str	r0, [r7, #24]
        break;
 800603c:	e008      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	61bb      	str	r3, [r7, #24]
        break;
 8006044:	e004      	b.n	8006050 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	77bb      	strb	r3, [r7, #30]
        break;
 800604e:	bf00      	nop
    }

    if (pclk != 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	085a      	lsrs	r2, r3, #1
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b0f      	cmp	r3, #15
 800606e:	d909      	bls.n	8006084 <UART_SetConfig+0x4a0>
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d205      	bcs.n	8006084 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e001      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006094:	7fbb      	ldrb	r3, [r7, #30]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40007c00 	.word	0x40007c00
 80060a4:	40023800 	.word	0x40023800
 80060a8:	00f42400 	.word	0x00f42400

080060ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061aa:	d10a      	bne.n	80061c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006200:	f7fb f8ac 	bl	800135c <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d10e      	bne.n	8006232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f81b 	bl	800625e <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e011      	b.n	8006256 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b09c      	sub	sp, #112	; 0x70
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626e:	e0a7      	b.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	f000 80a3 	beq.w	80063c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fb f86f 	bl	800135c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <UART_WaitOnFlagUntilTimeout+0x32>
 800628a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628c:	2b00      	cmp	r3, #0
 800628e:	d13f      	bne.n	8006310 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800629e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062a4:	667b      	str	r3, [r7, #100]	; 0x64
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e6      	bne.n	8006290 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	663b      	str	r3, [r7, #96]	; 0x60
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e5      	bne.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e068      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d050      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632c:	d148      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006336:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800634c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800635c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	66bb      	str	r3, [r7, #104]	; 0x68
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800638a:	623a      	str	r2, [r7, #32]
 800638c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	69f9      	ldr	r1, [r7, #28]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	61bb      	str	r3, [r7, #24]
   return(result);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e010      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	f43f af48 	beq.w	8006270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3770      	adds	r7, #112	; 0x70
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b097      	sub	sp, #92	; 0x5c
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641e:	d10e      	bne.n	800643e <UART_Start_Receive_IT+0x52>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <UART_Start_Receive_IT+0x48>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800642e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006432:	e02d      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	22ff      	movs	r2, #255	; 0xff
 8006438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800643c:	e028      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10d      	bne.n	8006462 <UART_Start_Receive_IT+0x76>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <UART_Start_Receive_IT+0x6c>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22ff      	movs	r2, #255	; 0xff
 8006452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006456:	e01b      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	227f      	movs	r2, #127	; 0x7f
 800645c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006460:	e016      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646a:	d10d      	bne.n	8006488 <UART_Start_Receive_IT+0x9c>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <UART_Start_Receive_IT+0x92>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	227f      	movs	r2, #127	; 0x7f
 8006478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800647c:	e008      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	223f      	movs	r2, #63	; 0x3f
 8006482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006486:	e003      	b.n	8006490 <UART_Start_Receive_IT+0xa4>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2222      	movs	r2, #34	; 0x22
 800649c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	657b      	str	r3, [r7, #84]	; 0x54
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80064c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	d107      	bne.n	80064ee <UART_Start_Receive_IT+0x102>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a21      	ldr	r2, [pc, #132]	; (8006570 <UART_Start_Receive_IT+0x184>)
 80064ea:	669a      	str	r2, [r3, #104]	; 0x68
 80064ec:	e002      	b.n	80064f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a20      	ldr	r2, [pc, #128]	; (8006574 <UART_Start_Receive_IT+0x188>)
 80064f2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d019      	beq.n	8006530 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_Start_Receive_IT+0x110>
 800652e:	e018      	b.n	8006562 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	613b      	str	r3, [r7, #16]
   return(result);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f043 0320 	orr.w	r3, r3, #32
 8006544:	653b      	str	r3, [r7, #80]	; 0x50
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	69f9      	ldr	r1, [r7, #28]
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	61bb      	str	r3, [r7, #24]
   return(result);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e6      	bne.n	8006530 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	375c      	adds	r7, #92	; 0x5c
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	08006b97 	.word	0x08006b97
 8006574:	08006a31 	.word	0x08006a31

08006578 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b096      	sub	sp, #88	; 0x58
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	88fa      	ldrh	r2, [r7, #6]
 8006590:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2222      	movs	r2, #34	; 0x22
 80065a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d028      	beq.n	80065fe <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b0:	4a3e      	ldr	r2, [pc, #248]	; (80066ac <UART_Start_Receive_DMA+0x134>)
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b8:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <UART_Start_Receive_DMA+0x138>)
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c0:	4a3c      	ldr	r2, [pc, #240]	; (80066b4 <UART_Start_Receive_DMA+0x13c>)
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	2200      	movs	r2, #0
 80065ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	4619      	mov	r1, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	461a      	mov	r2, r3
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	f7fa fffd 	bl	80015de <HAL_DMA_Start_IT>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2210      	movs	r2, #16
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e051      	b.n	80066a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661a:	657b      	str	r3, [r7, #84]	; 0x54
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006624:	64bb      	str	r3, [r7, #72]	; 0x48
 8006626:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800662a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	653b      	str	r3, [r7, #80]	; 0x50
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006658:	637a      	str	r2, [r7, #52]	; 0x34
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800665e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800668c:	623a      	str	r2, [r7, #32]
 800668e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	61bb      	str	r3, [r7, #24]
   return(result);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3758      	adds	r7, #88	; 0x58
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	080067cd 	.word	0x080067cd
 80066b0:	080068f5 	.word	0x080068f5
 80066b4:	08006933 	.word	0x08006933

080066b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6979      	ldr	r1, [r7, #20]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	613b      	str	r3, [r7, #16]
   return(result);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80066f8:	bf00      	nop
 80066fa:	3724      	adds	r7, #36	; 0x24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b095      	sub	sp, #84	; 0x54
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	643b      	str	r3, [r7, #64]	; 0x40
 800672c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e6      	bne.n	800670c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3308      	adds	r3, #8
 8006744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	61fb      	str	r3, [r7, #28]
   return(result);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	64bb      	str	r3, [r7, #72]	; 0x48
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e5      	bne.n	800673e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006776:	2b01      	cmp	r3, #1
 8006778:	d118      	bne.n	80067ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	60bb      	str	r3, [r7, #8]
   return(result);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f023 0310 	bic.w	r3, r3, #16
 800678e:	647b      	str	r3, [r7, #68]	; 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	613b      	str	r3, [r7, #16]
   return(result);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067c0:	bf00      	nop
 80067c2:	3754      	adds	r7, #84	; 0x54
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b09c      	sub	sp, #112	; 0x70
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e2:	d071      	beq.n	80068c8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80067e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006800:	66bb      	str	r3, [r7, #104]	; 0x68
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800680a:	65bb      	str	r3, [r7, #88]	; 0x58
 800680c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e6      	bne.n	80067ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	667b      	str	r3, [r7, #100]	; 0x64
 8006836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800683e:	647a      	str	r2, [r7, #68]	; 0x44
 8006840:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800684c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e5      	bne.n	800681e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	623b      	str	r3, [r7, #32]
   return(result);
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006868:	663b      	str	r3, [r7, #96]	; 0x60
 800686a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006872:	633a      	str	r2, [r7, #48]	; 0x30
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006892:	2b01      	cmp	r3, #1
 8006894:	d118      	bne.n	80068c8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	617b      	str	r3, [r7, #20]
   return(result);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e6      	bne.n	8006896 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	2200      	movs	r2, #0
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068dc:	4619      	mov	r1, r3
 80068de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068e0:	f7ff f974 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068e4:	e002      	b.n	80068ec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80068e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068e8:	f7ff f952 	bl	8005b90 <HAL_UART_RxCpltCallback>
}
 80068ec:	bf00      	nop
 80068ee:	3770      	adds	r7, #112	; 0x70
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690c:	2b01      	cmp	r3, #1
 800690e:	d109      	bne.n	8006924 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	b29b      	uxth	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff f955 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006922:	e002      	b.n	800692a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff f93d 	bl	8005ba4 <HAL_UART_RxHalfCpltCallback>
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006944:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d109      	bne.n	8006970 <UART_DMAError+0x3e>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b21      	cmp	r3, #33	; 0x21
 8006960:	d106      	bne.n	8006970 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f7ff fea4 	bl	80066b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d109      	bne.n	8006992 <UART_DMAError+0x60>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b22      	cmp	r3, #34	; 0x22
 8006982:	d106      	bne.n	8006992 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800698c:	6978      	ldr	r0, [r7, #20]
 800698e:	f7ff feb9 	bl	8006704 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006998:	f043 0210 	orr.w	r2, r3, #16
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a2:	6978      	ldr	r0, [r7, #20]
 80069a4:	f7ff f908 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff f8f2 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff f8aa 	bl	8005b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	bf00      	nop
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b096      	sub	sp, #88	; 0x58
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a48:	2b22      	cmp	r3, #34	; 0x22
 8006a4a:	f040 8098 	bne.w	8006b7e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a5c:	b2d9      	uxtb	r1, r3
 8006a5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a68:	400a      	ands	r2, r1
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d17b      	bne.n	8006b8e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae8:	633a      	str	r2, [r7, #48]	; 0x30
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d12e      	bne.n	8006b76 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d103      	bne.n	8006b66 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2210      	movs	r2, #16
 8006b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff f82c 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b74:	e00b      	b.n	8006b8e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff f80a 	bl	8005b90 <HAL_UART_RxCpltCallback>
}
 8006b7c:	e007      	b.n	8006b8e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0208 	orr.w	r2, r2, #8
 8006b8c:	619a      	str	r2, [r3, #24]
}
 8006b8e:	bf00      	nop
 8006b90:	3758      	adds	r7, #88	; 0x58
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b096      	sub	sp, #88	; 0x58
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ba4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bae:	2b22      	cmp	r3, #34	; 0x22
 8006bb0:	f040 8098 	bne.w	8006ce4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bc4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006bc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	1c9a      	adds	r2, r3, #2
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d17b      	bne.n	8006cf4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e6      	bne.n	8006bfc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e5      	bne.n	8006c2e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d12e      	bne.n	8006cdc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d103      	bne.n	8006ccc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2210      	movs	r2, #16
 8006cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fe ff79 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cda:	e00b      	b.n	8006cf4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fe ff57 	bl	8005b90 <HAL_UART_RxCpltCallback>
}
 8006ce2:	e007      	b.n	8006cf4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0208 	orr.w	r2, r2, #8
 8006cf2:	619a      	str	r2, [r3, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	3758      	adds	r7, #88	; 0x58
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	f107 001c 	add.w	r0, r7, #28
 8006d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d120      	bne.n	8006d56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <USB_CoreInit+0xac>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d105      	bne.n	8006d4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa96 	bl	800727c <USB_CoreReset>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]
 8006d54:	e010      	b.n	8006d78 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa8a 	bl	800727c <USB_CoreReset>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10b      	bne.n	8006d96 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f043 0206 	orr.w	r2, r3, #6
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da2:	b004      	add	sp, #16
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	ffbdffbf 	.word	0xffbdffbf

08006dac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f023 0201 	bic.w	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d115      	bne.n	8006e1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7fa fab9 	bl	8001374 <HAL_Delay>
      ms++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa29 	bl	8007260 <USB_GetMode>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d01e      	beq.n	8006e52 <USB_SetCurrentMode+0x84>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b31      	cmp	r3, #49	; 0x31
 8006e18:	d9f0      	bls.n	8006dfc <USB_SetCurrentMode+0x2e>
 8006e1a:	e01a      	b.n	8006e52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d115      	bne.n	8006e4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f7fa faa0 	bl	8001374 <HAL_Delay>
      ms++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa10 	bl	8007260 <USB_GetMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <USB_SetCurrentMode+0x84>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b31      	cmp	r3, #49	; 0x31
 8006e4a:	d9f0      	bls.n	8006e2e <USB_SetCurrentMode+0x60>
 8006e4c:	e001      	b.n	8006e52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e005      	b.n	8006e5e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b32      	cmp	r3, #50	; 0x32
 8006e56:	d101      	bne.n	8006e5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e68:	b084      	sub	sp, #16
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e009      	b.n	8006e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3340      	adds	r3, #64	; 0x40
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b0e      	cmp	r3, #14
 8006ea0:	d9f2      	bls.n	8006e88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11c      	bne.n	8006ee2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e005      	b.n	8006eee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f00:	4619      	mov	r1, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	461a      	mov	r2, r3
 8006f0a:	680b      	ldr	r3, [r1, #0]
 8006f0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d10c      	bne.n	8006f2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f965 	bl	80071ec <USB_SetDevSpeed>
 8006f22:	e008      	b.n	8006f36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f960 	bl	80071ec <USB_SetDevSpeed>
 8006f2c:	e003      	b.n	8006f36 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f2e:	2103      	movs	r1, #3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f95b 	bl	80071ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f36:	2110      	movs	r1, #16
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f8f3 	bl	8007124 <USB_FlushTxFifo>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f91f 	bl	800718c <USB_FlushRxFifo>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e043      	b.n	800700a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f98:	d118      	bne.n	8006fcc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	461a      	mov	r2, r3
 8006fae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	e013      	b.n	8006fde <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e008      	b.n	8006fde <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	461a      	mov	r2, r3
 8006fec:	2300      	movs	r3, #0
 8006fee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	3301      	adds	r3, #1
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3b7      	bcc.n	8006f82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	e043      	b.n	80070a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800702a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800702e:	d118      	bne.n	8007062 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	461a      	mov	r2, r3
 8007044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e013      	b.n	8007074 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e008      	b.n	8007074 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	461a      	mov	r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007098:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3301      	adds	r3, #1
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d3b7      	bcc.n	8007018 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d105      	bne.n	80070dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f043 0210 	orr.w	r2, r3, #16
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	4b0e      	ldr	r3, [pc, #56]	; (800711c <USB_DevInit+0x2b4>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f043 0208 	orr.w	r2, r3, #8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <USB_DevInit+0x2b8>)
 8007106:	4313      	orrs	r3, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007118:	b004      	add	sp, #16
 800711a:	4770      	bx	lr
 800711c:	803c3800 	.word	0x803c3800
 8007120:	40000004 	.word	0x40000004

08007124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a13      	ldr	r2, [pc, #76]	; (8007188 <USB_FlushTxFifo+0x64>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d901      	bls.n	8007144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e01b      	b.n	800717c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	daf2      	bge.n	8007132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	019b      	lsls	r3, r3, #6
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a08      	ldr	r2, [pc, #32]	; (8007188 <USB_FlushTxFifo+0x64>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e006      	b.n	800717c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b20      	cmp	r3, #32
 8007178:	d0f0      	beq.n	800715c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	00030d40 	.word	0x00030d40

0800718c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <USB_FlushRxFifo+0x5c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d901      	bls.n	80071aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e018      	b.n	80071dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	daf2      	bge.n	8007198 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2210      	movs	r2, #16
 80071ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <USB_FlushRxFifo+0x5c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e006      	b.n	80071dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d0f0      	beq.n	80071bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	00030d40 	.word	0x00030d40

080071ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800720c:	4313      	orrs	r3, r2
 800720e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007238:	f023 0303 	bic.w	r3, r3, #3
 800723c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800724c:	f043 0302 	orr.w	r3, r3, #2
 8007250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0301 	and.w	r3, r3, #1
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <USB_CoreReset+0x64>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d901      	bls.n	800729a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e01b      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	daf2      	bge.n	8007288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <USB_CoreReset+0x64>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d0f0      	beq.n	80072b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	00030d40 	.word	0x00030d40

080072e4 <memset>:
 80072e4:	4402      	add	r2, r0
 80072e6:	4603      	mov	r3, r0
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d100      	bne.n	80072ee <memset+0xa>
 80072ec:	4770      	bx	lr
 80072ee:	f803 1b01 	strb.w	r1, [r3], #1
 80072f2:	e7f9      	b.n	80072e8 <memset+0x4>

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	4d0d      	ldr	r5, [pc, #52]	; (800732c <__libc_init_array+0x38>)
 80072f8:	4c0d      	ldr	r4, [pc, #52]	; (8007330 <__libc_init_array+0x3c>)
 80072fa:	1b64      	subs	r4, r4, r5
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	2600      	movs	r6, #0
 8007300:	42a6      	cmp	r6, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	4d0b      	ldr	r5, [pc, #44]	; (8007334 <__libc_init_array+0x40>)
 8007306:	4c0c      	ldr	r4, [pc, #48]	; (8007338 <__libc_init_array+0x44>)
 8007308:	f000 f818 	bl	800733c <_init>
 800730c:	1b64      	subs	r4, r4, r5
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	2600      	movs	r6, #0
 8007312:	42a6      	cmp	r6, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f855 3b04 	ldr.w	r3, [r5], #4
 800731c:	4798      	blx	r3
 800731e:	3601      	adds	r6, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	f855 3b04 	ldr.w	r3, [r5], #4
 8007326:	4798      	blx	r3
 8007328:	3601      	adds	r6, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	08007374 	.word	0x08007374
 8007330:	08007374 	.word	0x08007374
 8007334:	08007374 	.word	0x08007374
 8007338:	08007378 	.word	0x08007378

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
