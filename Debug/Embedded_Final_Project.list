
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800823c  0800823c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008244  08008244  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800824c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f8  20000064  080082b0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000185c  080082b0  0002185c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e31  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df1  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd3  00000000  00000000  0003b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027274  00000000  00000000  0003c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191bb  00000000  00000000  00063357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3c29  00000000  00000000  0007c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b84  00000000  00000000  0017013c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00175cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080081d4 	.word	0x080081d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080081d4 	.word	0x080081d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <set_motor_pwm>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define MOTORA 0

void set_motor_pwm(uint8_t motor_ID, float duty_cycle){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	ed87 0a00 	vstr	s0, [r7]
 80005b8:	71fb      	strb	r3, [r7, #7]
	switch(motor_ID){
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d113      	bne.n	80005e8 <set_motor_pwm+0x3c>
	case MOTORA:
	{
		TIM3->CCR1 = htim3.Init.Period*(duty_cycle/100);
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <set_motor_pwm+0x48>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005cc:	edd7 6a00 	vldr	s13, [r7]
 80005d0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80005f8 <set_motor_pwm+0x4c>
 80005d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <set_motor_pwm+0x50>)
 80005de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e2:	ee17 2a90 	vmov	r2, s15
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	}

};
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	20000124 	.word	0x20000124
 80005f8:	42c80000 	.word	0x42c80000
 80005fc:	40000400 	.word	0x40000400

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	f5ad 5de1 	sub.w	sp, sp, #7200	; 0x1c20
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f001 f8ac 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f8b9 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fadf 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000616:	f000 f91b 	bl	8000850 <MX_I2C1_Init>
  MX_TIM2_Init();
 800061a:	f000 f959 	bl	80008d0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800061e:	f000 fa4b 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000622:	f000 faa9 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000626:	f000 f9ab 	bl	8000980 <MX_TIM3_Init>
  MX_TIM10_Init();
 800062a:	f000 fa21 	bl	8000a70 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 800062e:	f000 fa73 	bl	8000b18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim10);
  HAL_TIM_Base_Start_IT(&htim10);
 8000632:	484d      	ldr	r0, [pc, #308]	; (8000768 <main+0x168>)
 8000634:	f003 ffdc 	bl	80045f0 <HAL_TIM_Base_Start_IT>
//  	uint8_t dataTemp[] = "#0\n";
//	HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);



	float current_duty_cycle = 0.0;
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000640:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000642:	2100      	movs	r1, #0
 8000644:	4849      	ldr	r0, [pc, #292]	; (800076c <main+0x16c>)
 8000646:	f004 f8a3 	bl	8004790 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA (&huart3, Rx_data, 4);  // Receive 4 Bytes of data
 800064a:	2204      	movs	r2, #4
 800064c:	4948      	ldr	r1, [pc, #288]	; (8000770 <main+0x170>)
 800064e:	4849      	ldr	r0, [pc, #292]	; (8000774 <main+0x174>)
 8000650:	f005 fa3d 	bl	8005ace <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT (&huart3, Rx_data, 4);
 8000654:	2204      	movs	r2, #4
 8000656:	4946      	ldr	r1, [pc, #280]	; (8000770 <main+0x170>)
 8000658:	4846      	ldr	r0, [pc, #280]	; (8000774 <main+0x174>)
 800065a:	f005 f9f4 	bl	8005a46 <HAL_UART_Receive_IT>



	// example write
	uint8_t Input_Byte_Array[3600];
	for (int i = 0; i <= 12; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	f641 422c 	movw	r2, #7212	; 0x1c2c
 8000664:	443a      	add	r2, r7
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	e014      	b.n	8000694 <main+0x94>
		Input_Byte_Array[i] = (uint8_t)0b00000100;
 800066a:	f641 4330 	movw	r3, #7216	; 0x1c30
 800066e:	443b      	add	r3, r7
 8000670:	f5a3 6262 	sub.w	r2, r3, #3616	; 0xe20
 8000674:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8000678:	443b      	add	r3, r7
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4413      	add	r3, r2
 800067e:	2204      	movs	r2, #4
 8000680:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 12; i++) {
 8000682:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8000686:	443b      	add	r3, r7
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	f641 422c 	movw	r2, #7212	; 0x1c2c
 8000690:	443a      	add	r2, r7
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	f641 432c 	movw	r3, #7212	; 0x1c2c
 8000698:	443b      	add	r3, r7
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b0c      	cmp	r3, #12
 800069e:	dde4      	ble.n	800066a <main+0x6a>
	}
	for (int i = 12; i <= 24; i++) {
 80006a0:	230c      	movs	r3, #12
 80006a2:	f641 4228 	movw	r2, #7208	; 0x1c28
 80006a6:	443a      	add	r2, r7
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e014      	b.n	80006d6 <main+0xd6>
		Input_Byte_Array[i] = (uint8_t)0b00000010;
 80006ac:	f641 4330 	movw	r3, #7216	; 0x1c30
 80006b0:	443b      	add	r3, r7
 80006b2:	f5a3 6262 	sub.w	r2, r3, #3616	; 0xe20
 80006b6:	f641 4328 	movw	r3, #7208	; 0x1c28
 80006ba:	443b      	add	r3, r7
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	2202      	movs	r2, #2
 80006c2:	701a      	strb	r2, [r3, #0]
	for (int i = 12; i <= 24; i++) {
 80006c4:	f641 4328 	movw	r3, #7208	; 0x1c28
 80006c8:	443b      	add	r3, r7
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	f641 4228 	movw	r2, #7208	; 0x1c28
 80006d2:	443a      	add	r2, r7
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	f641 4328 	movw	r3, #7208	; 0x1c28
 80006da:	443b      	add	r3, r7
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b18      	cmp	r3, #24
 80006e0:	dde4      	ble.n	80006ac <main+0xac>
	}
	for (int i = 24; i <= 48; i++) {
 80006e2:	2318      	movs	r3, #24
 80006e4:	f641 4224 	movw	r2, #7204	; 0x1c24
 80006e8:	443a      	add	r2, r7
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	e014      	b.n	8000718 <main+0x118>
		Input_Byte_Array[i] = (uint8_t)0b00000001;
 80006ee:	f641 4330 	movw	r3, #7216	; 0x1c30
 80006f2:	443b      	add	r3, r7
 80006f4:	f5a3 6262 	sub.w	r2, r3, #3616	; 0xe20
 80006f8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80006fc:	443b      	add	r3, r7
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	for (int i = 24; i <= 48; i++) {
 8000706:	f641 4324 	movw	r3, #7204	; 0x1c24
 800070a:	443b      	add	r3, r7
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	f641 4224 	movw	r2, #7204	; 0x1c24
 8000714:	443a      	add	r2, r7
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	f641 4324 	movw	r3, #7204	; 0x1c24
 800071c:	443b      	add	r3, r7
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b30      	cmp	r3, #48	; 0x30
 8000722:	dde4      	ble.n	80006ee <main+0xee>
	}

	writeEEPROM(0, Input_Byte_Array);
 8000724:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8000728:	4619      	mov	r1, r3
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fc02 	bl	8000f34 <writeEEPROM>


	// example read
	uint8_t Output_Byte_Array[3600];
	readEEPROM(0, Output_Byte_Array);
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0x178>)
 8000732:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8000736:	f103 0310 	add.w	r3, r3, #16
 800073a:	443b      	add	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fc3e 	bl	8000fc0 <readEEPROM>
	// 2 = Swervo - G Herbo
	// q = stop and go to idle state
//	uint8_t dataTemp[] = "q";
//	HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);

	HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f001 f86a 	bl	8001820 <HAL_Delay>

	playSong();
 800074c:	f000 fc74 	bl	8001038 <playSong>
  {



//	// create new thread
	timer10Value = __HAL_TIM_GET_COUNTER(&htim10);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <main+0x168>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <main+0x17c>)
 800075a:	801a      	strh	r2, [r3, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_motor_pwm(MOTORA, 100.0);
 800075c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000780 <main+0x180>
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff23 	bl	80005ac <set_motor_pwm>
	timer10Value = __HAL_TIM_GET_COUNTER(&htim10);
 8000766:	e7f3      	b.n	8000750 <main+0x150>
 8000768:	20000170 	.word	0x20000170
 800076c:	20000124 	.word	0x20000124
 8000770:	200015f0 	.word	0x200015f0
 8000774:	200001bc 	.word	0x200001bc
 8000778:	ffffe3d0 	.word	0xffffe3d0
 800077c:	20000080 	.word	0x20000080
 8000780:	42c80000 	.word	0x42c80000

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 f89a 	bl	80078cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <SystemClock_Config+0xc4>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a26      	ldr	r2, [pc, #152]	; (8000848 <SystemClock_Config+0xc4>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <SystemClock_Config+0xc4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xc8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <SystemClock_Config+0xc8>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <SystemClock_Config+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f4:	2348      	movs	r3, #72	; 0x48
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fde1 	bl	80033cc <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000810:	f000 fc6a 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f003 f86f 	bl	8003914 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800083c:	f000 fc54 	bl	80010e8 <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	; 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f001 fdb0 	bl	80023f0 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fc27 	bl	80010e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f002 fbb6 	bl	800300e <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fc1e 	bl	80010e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f002 fbf8 	bl	80030a4 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fc15 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000084 	.word	0x20000084
 80008c8:	40005400 	.word	0x40005400
 80008cc:	00305fff 	.word	0x00305fff

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_TIM2_Init+0xac>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_TIM2_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM2_Init+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_TIM2_Init+0xac>)
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM2_Init+0xac>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM2_Init+0xac>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_TIM2_Init+0xac>)
 800091c:	f003 fee0 	bl	80046e0 <HAL_TIM_PWM_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000926:	f000 fbdf 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_TIM2_Init+0xac>)
 800093a:	f004 ff07 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000944:	f000 fbd0 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM2_Init+0xac>)
 8000960:	f004 f930 	bl	8004bc4 <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800096a:	f000 fbbd 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM2_Init+0xac>)
 8000970:	f000 fcac 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000d8 	.word	0x200000d8

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_TIM3_Init+0xec>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d8:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009da:	f003 fdb1 	bl	8004540 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009e4:	f000 fb80 	bl	80010e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_TIM3_Init+0xe8>)
 80009f6:	f004 f9f9 	bl	8004dec <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a00:	f000 fb72 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a06:	f003 fe6b 	bl	80046e0 <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a10:	f000 fb6a 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a24:	f004 fe92 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a2e:	f000 fb5b 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 8000a36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a4c:	f004 f8ba 	bl	8004bc4 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a56:	f000 fb47 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM3_Init+0xe8>)
 8000a5c:	f000 fc36 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000124 	.word	0x20000124
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_TIM10_Init+0x44>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a7c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a80:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM10_Init+0x40>)
 8000a9c:	f003 fd50 	bl	8004540 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000aa6:	f000 fb1f 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000170 	.word	0x20000170
 8000ab4:	40014400 	.word	0x40014400

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART3_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000ac4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART3_UART_Init+0x58>)
 8000afc:	f004 fed2 	bl	80058a4 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 faef 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001bc 	.word	0x200001bc
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART6_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART6_UART_Init+0x58>)
 8000b5c:	f004 fea2 	bl	80058a4 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 fabf 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000244 	.word	0x20000244
 8000b74:	40011400 	.word	0x40011400

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f002 fabe 	bl	800313c <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 fa8f 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200002cc 	.word	0x200002cc

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b68      	ldr	r3, [pc, #416]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a67      	ldr	r2, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a61      	ldr	r2, [pc, #388]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a5b      	ldr	r2, [pc, #364]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a55      	ldr	r2, [pc, #340]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b53      	ldr	r3, [pc, #332]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a4f      	ldr	r2, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <MX_GPIO_Init+0x1b8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c80:	4843      	ldr	r0, [pc, #268]	; (8000d90 <MX_GPIO_Init+0x1bc>)
 8000c82:	f001 fb9b 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2141      	movs	r1, #65	; 0x41
 8000c8a:	4842      	ldr	r0, [pc, #264]	; (8000d94 <MX_GPIO_Init+0x1c0>)
 8000c8c:	f001 fb96 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	483c      	ldr	r0, [pc, #240]	; (8000d98 <MX_GPIO_Init+0x1c4>)
 8000ca8:	f001 f9dc 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cac:	2332      	movs	r3, #50	; 0x32
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4834      	ldr	r0, [pc, #208]	; (8000d98 <MX_GPIO_Init+0x1c4>)
 8000cc8:	f001 f9cc 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ccc:	2386      	movs	r3, #134	; 0x86
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cdc:	230b      	movs	r3, #11
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482d      	ldr	r0, [pc, #180]	; (8000d9c <MX_GPIO_Init+0x1c8>)
 8000ce8:	f001 f9bc 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <MX_GPIO_Init+0x1bc>)
 8000d06:	f001 f9ad 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000d0a:	2341      	movs	r3, #65	; 0x41
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_GPIO_Init+0x1c0>)
 8000d22:	f001 f99f 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d38:	230b      	movs	r3, #11
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_GPIO_Init+0x1bc>)
 8000d44:	f001 f98e 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_GPIO_Init+0x1c0>)
 8000d5c:	f001 f982 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x1c0>)
 8000d7e:	f001 f971 	bl	8002064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

// Playback Function 12Hz
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim10 )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 80a6 	bne.w	8000efe <HAL_TIM_PeriodElapsedCallback+0x15e>
  {
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	if(play_flag == 1){
 8000db2:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	f040 80a1 	bne.w	8000efe <HAL_TIM_PeriodElapsedCallback+0x15e>
		if(initial_start_playing == 1){
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d118      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x56>

		    uint8_t dataTemp[] = "#x\n";
 8000dc4:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dc6:	61bb      	str	r3, [r7, #24]
		    // Convert the uint8_t variable to a string
		    char variableString[2]; // Assuming a single-digit number
		    snprintf(variableString, sizeof(variableString), "%u", (current_song));
 8000dc8:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f107 0014 	add.w	r0, r7, #20
 8000dd0:	4a52      	ldr	r2, [pc, #328]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	f006 fd46 	bl	8007864 <sniprintf>
		    // Replace the "2" with the variable in the array
		    dataTemp[1] = variableString[0];
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	767b      	strb	r3, [r7, #25]

			// 0 = Love Sosa - Chief Keef
			// 1 = September - Earth, Wind, and Fire
			// 2 = Swervo - G Herbo
			HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 8000ddc:	f107 0118 	add.w	r1, r7, #24
 8000de0:	230a      	movs	r3, #10
 8000de2:	2204      	movs	r2, #4
 8000de4:	484e      	ldr	r0, [pc, #312]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000de6:	f004 fdab 	bl	8005940 <HAL_UART_Transmit>

			//delay?

			initial_start_playing = 0;
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
			i_play = 0;
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	801a      	strh	r2, [r3, #0]
		}
		uint8_t current_song_byte;
		if(i_play < 3599){
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	f640 620e 	movw	r2, #3598	; 0xe0e
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d87b      	bhi.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x15a>
			current_song_byte = current_song_data[i_play];
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
 8000e0c:	77fb      	strb	r3, [r7, #31]
			switch(current_song_byte){
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d851      	bhi.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e53 	.word	0x08000e53
 8000e24:	08000e75 	.word	0x08000e75
 8000e28:	08000eb9 	.word	0x08000eb9
 8000e2c:	08000e97 	.word	0x08000e97
			case 0b00000000:
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	483d      	ldr	r0, [pc, #244]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e36:	f001 fac1 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	483b      	ldr	r0, [pc, #236]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e40:	f001 fabc 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4a:	4838      	ldr	r0, [pc, #224]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e4c:	f001 fab6 	bl	80023bc <HAL_GPIO_WritePin>
				break;
 8000e50:	e032      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x118>
			case 0b00000001:
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4835      	ldr	r0, [pc, #212]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e58:	f001 fab0 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4832      	ldr	r0, [pc, #200]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e62:	f001 faab 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6c:	482f      	ldr	r0, [pc, #188]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e6e:	f001 faa5 	bl	80023bc <HAL_GPIO_WritePin>
				break;
 8000e72:	e021      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x118>
			case 0b00000010:
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	482c      	ldr	r0, [pc, #176]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e7a:	f001 fa9f 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	482a      	ldr	r0, [pc, #168]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e84:	f001 fa9a 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8e:	4827      	ldr	r0, [pc, #156]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e90:	f001 fa94 	bl	80023bc <HAL_GPIO_WritePin>
				break;
 8000e94:	e010      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x118>
			case 0b00000100:
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4824      	ldr	r0, [pc, #144]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e9c:	f001 fa8e 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4821      	ldr	r0, [pc, #132]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ea6:	f001 fa89 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eb2:	f001 fa83 	bl	80023bc <HAL_GPIO_WritePin>
				break;
 8000eb6:	bf00      	nop
			}
			i_play++;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ec2:	801a      	strh	r2, [r3, #0]
			if(i_play == 120){
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b78      	cmp	r3, #120	; 0x78
 8000eca:	d108      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x13e>
				uint8_t dataTemp[] = "q";
 8000ecc:	2371      	movs	r3, #113	; 0x71
 8000ece:	823b      	strh	r3, [r7, #16]
				HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 8000ed0:	f107 0110 	add.w	r1, r7, #16
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eda:	f004 fd31 	bl	8005940 <HAL_UART_Transmit>
			}
			if(i_play == 180){
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	2bb4      	cmp	r3, #180	; 0xb4
 8000ee4:	d10b      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x15e>
				uint8_t dataTemp[] = "#0\n";
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ee8:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	230a      	movs	r3, #10
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ef4:	f004 fd24 	bl	8005940 <HAL_UART_Transmit>
		else{
			stopSong();
		}
	}
  }
}
 8000ef8:	e001      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x15e>
			stopSong();
 8000efa:	f000 f8c1 	bl	8001080 <stopSong>
}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000170 	.word	0x20000170
 8000f0c:	200015e8 	.word	0x200015e8
 8000f10:	200015e7 	.word	0x200015e7
 8000f14:	000a7823 	.word	0x000a7823
 8000f18:	200007d5 	.word	0x200007d5
 8000f1c:	080081ec 	.word	0x080081ec
 8000f20:	20000244 	.word	0x20000244
 8000f24:	200015ea 	.word	0x200015ea
 8000f28:	200007d8 	.word	0x200007d8
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	000a3023 	.word	0x000a3023

08000f34 <writeEEPROM>:
/*
songID index begins at 0. Array expected to be
full, and padded with zeros.
Bit format = 0b00000MBT
*/
int writeEEPROM(int songID, uint8_t *array){
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <writeEEPROM+0x84>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]

	if((sizeof(array) > 3600) || songID > 71){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b47      	cmp	r3, #71	; 0x47
 8000f56:	dd01      	ble.n	8000f5c <writeEEPROM+0x28>
		return 1; // Input array too big or songID too big
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e029      	b.n	8000fb0 <writeEEPROM+0x7c>
	}

	// overwrite first index for checking in read memory
	array[0] = (uint8_t)0b01011000;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2258      	movs	r2, #88	; 0x58
 8000f60:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 8000f62:	f000 ff1d 	bl	8001da0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_ERSERR | FLASH_FLAG_PGPERR);
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <writeEEPROM+0x88>)
 8000f68:	22f3      	movs	r2, #243	; 0xf3
 8000f6a:	60da      	str	r2, [r3, #12]

	for(int i = 0; i + 1 <= 3600; i++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	e013      	b.n	8000f9a <writeEEPROM+0x66>
	  HAL_FLASH_Program(FLASH_PROGRAM_BYTE, (MEM_Location), array[i]);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4615      	mov	r5, r2
 8000f82:	4622      	mov	r2, r4
 8000f84:	462b      	mov	r3, r5
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fead 	bl	8001ce8 <HAL_FLASH_Program>
	  MEM_Location = MEM_Location + 0x1;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i + 1 <= 3600; i++){
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3301      	adds	r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000fa0:	dbe7      	blt.n	8000f72 <writeEEPROM+0x3e>
	}

	HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f000 fc3b 	bl	8001820 <HAL_Delay>
	HAL_FLASH_Lock();
 8000faa:	f000 ff1b 	bl	8001de4 <HAL_FLASH_Lock>

	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <readEEPROM>:
/*
Input argument arr will be filled with data
songID index begins at 0
Bit format = 0b00000MBT
*/
int readEEPROM(int songID, uint8_t arr[]) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	// 12 fps * 60 seconds * 5 min = 3600 samples

	if(songID > 71){
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b47      	cmp	r3, #71	; 0x47
 8000fce:	dd01      	ble.n	8000fd4 <readEEPROM+0x14>
		return 1; // songID too big
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e027      	b.n	8001024 <readEEPROM+0x64>
	}

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <readEEPROM+0x70>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i <= 3599; i++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e00f      	b.n	800100e <readEEPROM+0x4e>
		memcpy(&singlePacket, (void *) (MEM_Location), sizeof(singlePacket));
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <readEEPROM+0x74>)
 8000ff4:	701a      	strb	r2, [r3, #0]
		arr[i] = singlePacket;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <readEEPROM+0x74>)
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	701a      	strb	r2, [r3, #0]
		MEM_Location = MEM_Location + 0x1;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i <= 3599; i++){
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001014:	dbeb      	blt.n	8000fee <readEEPROM+0x2e>
	}

	if((uint8_t)arr[0] != (uint8_t)0b01011000){
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b58      	cmp	r3, #88	; 0x58
 800101c:	d001      	beq.n	8001022 <readEEPROM+0x62>
		return 1; // checksum failed, song not located in this memory location
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <readEEPROM+0x64>
	}

    return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000000 	.word	0x20000000
 8001034:	200007d4 	.word	0x200007d4

08001038 <playSong>:


/*
AHHHH
*/
int playSong() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	// gather memory
	readEEPROM(current_song, current_song_data);
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <playSong+0x30>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	490a      	ldr	r1, [pc, #40]	; (800106c <playSong+0x34>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffbc 	bl	8000fc0 <readEEPROM>

	// flags
	play_flag = 1;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <playSong+0x38>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	i_play = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <playSong+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
	initial_start_playing = 1;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <playSong+0x40>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]

	// current state is playing
	current_state = 1;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <playSong+0x44>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]

	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200007d5 	.word	0x200007d5
 800106c:	200007d8 	.word	0x200007d8
 8001070:	200015e8 	.word	0x200015e8
 8001074:	200015ea 	.word	0x200015ea
 8001078:	200015e7 	.word	0x200015e7
 800107c:	200015ec 	.word	0x200015ec

08001080 <stopSong>:

/*
AHHHH
*/
int stopSong() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	// Stop playing song, return to idle mode
	uint8_t dataTemp[] = "q";
 8001086:	2371      	movs	r3, #113	; 0x71
 8001088:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 800108a:	1d39      	adds	r1, r7, #4
 800108c:	230a      	movs	r3, #10
 800108e:	2202      	movs	r2, #2
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <stopSong+0x50>)
 8001092:	f004 fc55 	bl	8005940 <HAL_UART_Transmit>

	// iterate song
	current_song++;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <stopSong+0x54>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <stopSong+0x54>)
 80010a0:	701a      	strb	r2, [r3, #0]
	if(current_song > max_songs){
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <stopSong+0x54>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <stopSong+0x58>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d902      	bls.n	80010b4 <stopSong+0x34>
		current_song = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <stopSong+0x54>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
	}

	// reset play counter
	i_play = 0;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <stopSong+0x5c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]

	// current state is paused
	current_state = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <stopSong+0x60>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

	play_flag = 0;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <stopSong+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]

	return 0;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000244 	.word	0x20000244
 80010d4:	200007d5 	.word	0x200007d5
 80010d8:	20000004 	.word	0x20000004
 80010dc:	200015ea 	.word	0x200015ea
 80010e0:	200015ec 	.word	0x200015ec
 80010e4:	200015e8 	.word	0x200015e8

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x44>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_MspInit+0x44>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_MspInit+0x44>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x44>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x44>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x44>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0aa      	sub	sp, #168	; 0xa8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2284      	movs	r2, #132	; 0x84
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f006 fbb5 	bl	80078cc <memset>
  if(hi2c->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <HAL_I2C_MspInit+0xd4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d14c      	bne.n	8001206 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001170:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001172:	2300      	movs	r3, #0
 8001174:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fdf0 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001186:	f7ff ffaf 	bl	80010e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a21      	ldr	r2, [pc, #132]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011bc:	2304      	movs	r3, #4
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011c6:	4619      	mov	r1, r3
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <HAL_I2C_MspInit+0xdc>)
 80011ca:	f000 ff4b 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_I2C_MspInit+0xd8>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	201f      	movs	r0, #31
 80011ec:	f000 fc17 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011f0:	201f      	movs	r0, #31
 80011f2:	f000 fc30 	bl	8001a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2020      	movs	r0, #32
 80011fc:	f000 fc0f 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001200:	2020      	movs	r0, #32
 8001202:	f000 fc28 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	37a8      	adds	r7, #168	; 0xa8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005400 	.word	0x40005400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10b      	bne.n	8001246 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_TIM_PWM_MspInit+0x38>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_TIM_PWM_MspInit+0x38>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_TIM_PWM_MspInit+0x38>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_TIM_Base_MspInit+0x68>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10c      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001282:	e018      	b.n	80012b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_TIM_Base_MspInit+0x70>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_TIM_Base_MspInit+0x6c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 fbb7 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012b0:	2019      	movs	r0, #25
 80012b2:	f000 fbd0 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40014400 	.word	0x40014400

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d11d      	bne.n	800132a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001318:	2301      	movs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4815      	ldr	r0, [pc, #84]	; (8001378 <HAL_TIM_MspPostInit+0xac>)
 8001324:	f000 fe9e 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001328:	e020      	b.n	800136c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <HAL_TIM_MspPostInit+0xb0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d11b      	bne.n	800136c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_TIM_MspPostInit+0xa8>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135c:	2302      	movs	r3, #2
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <HAL_TIM_MspPostInit+0xac>)
 8001368:	f000 fe7c 	bl	8002064 <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000
 800137c:	40000400 	.word	0x40000400

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	; 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2284      	movs	r2, #132	; 0x84
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f006 fa93 	bl	80078cc <memset>
  if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <HAL_UART_MspInit+0x148>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d145      	bne.n	800143c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fcce 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ca:	f7ff fe8d 	bl	80010e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a3e      	ldr	r2, [pc, #248]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a38      	ldr	r2, [pc, #224]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_UART_MspInit+0x14c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001422:	4619      	mov	r1, r3
 8001424:	482a      	ldr	r0, [pc, #168]	; (80014d0 <HAL_UART_MspInit+0x150>)
 8001426:	f000 fe1d 	bl	8002064 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2027      	movs	r0, #39	; 0x27
 8001430:	f000 faf5 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001434:	2027      	movs	r0, #39	; 0x27
 8001436:	f000 fb0e 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800143a:	e040      	b.n	80014be <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_UART_MspInit+0x154>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d13b      	bne.n	80014be <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800144a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800144c:	2300      	movs	r3, #0
 800144e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fc83 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001460:	f7ff fe42 	bl	80010e8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x14c>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_UART_MspInit+0x14c>)
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_UART_MspInit+0x14c>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_UART_MspInit+0x14c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_UART_MspInit+0x14c>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x14c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001494:	23c0      	movs	r3, #192	; 0xc0
 8001496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014ac:	2308      	movs	r3, #8
 80014ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <HAL_UART_MspInit+0x158>)
 80014ba:	f000 fdd3 	bl	8002064 <HAL_GPIO_Init>
}
 80014be:	bf00      	nop
 80014c0:	37b0      	adds	r7, #176	; 0xb0
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40011400 	.word	0x40011400
 80014d8:	40020800 	.word	0x40020800

080014dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ac      	sub	sp, #176	; 0xb0
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	2284      	movs	r2, #132	; 0x84
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f006 f9e5 	bl	80078cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150a:	d159      	bne.n	80015c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800150c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001510:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fc1f 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001528:	f7ff fdde 	bl	80010e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001544:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800155e:	230a      	movs	r3, #10
 8001560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001568:	4619      	mov	r1, r3
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <HAL_PCD_MspInit+0xf0>)
 800156c:	f000 fd7a 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001588:	4619      	mov	r1, r3
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <HAL_PCD_MspInit+0xf0>)
 800158c:	f000 fd6a 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 8001592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 8001596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159a:	6353      	str	r3, [r2, #52]	; 0x34
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 800159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b2:	6453      	str	r3, [r2, #68]	; 0x44
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_PCD_MspInit+0xec>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	37b0      	adds	r7, #176	; 0xb0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f8e0 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800162a:	f003 f9ab 	bl	8004984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000170 	.word	0x20000170

08001638 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <I2C1_EV_IRQHandler+0x10>)
 800163e:	f000 ff67 	bl	8002510 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000084 	.word	0x20000084

0800164c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <I2C1_ER_IRQHandler+0x10>)
 8001652:	f000 ff77 	bl	8002544 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000084 	.word	0x20000084

08001660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <USART3_IRQHandler+0x1c>)
 8001666:	f004 fa77 	bl	8005b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT (&huart3, Rx_data, 256);
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	4904      	ldr	r1, [pc, #16]	; (8001680 <USART3_IRQHandler+0x20>)
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART3_IRQHandler+0x1c>)
 8001672:	f004 f9e8 	bl	8005a46 <HAL_UART_Receive_IT>


  /* USER CODE END USART3_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001bc 	.word	0x200001bc
 8001680:	200015f0 	.word	0x200015f0

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f006 f912 	bl	80078dc <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20050000 	.word	0x20050000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	200016f0 	.word	0x200016f0
 80016ec:	20001860 	.word	0x20001860

080016f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001730:	4c0b      	ldr	r4, [pc, #44]	; (8001760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173e:	f7ff ffd7 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f006 f8d1 	bl	80078e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7fe ff5b 	bl	8000600 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001758:	0800824c 	.word	0x0800824c
  ldr r2, =_sbss
 800175c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001760:	2000185c 	.word	0x2000185c

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>

08001766 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f94c 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f805 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001776:	f7ff fcbd 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f967 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f92f 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000010 	.word	0x20000010
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010
 8001804:	200016f4 	.word	0x200016f4

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200016f4 	.word	0x200016f4

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000010 	.word	0x20000010

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	05fa0000 	.word	0x05fa0000

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Start_IT+0x26>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e048      	b.n	8001b42 <HAL_DMA_Start_IT+0xb8>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d137      	bne.n	8001b34 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8d6 	bl	8001c8a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0216 	orr.w	r2, r2, #22
 8001af8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b08:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0208 	orr.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e005      	b.n	8001b40 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff fe56 	bl	8001808 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d008      	beq.n	8001b7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e052      	b.n	8001c22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0216 	bic.w	r2, r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <HAL_DMA_Abort+0x62>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0208 	bic.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	e013      	b.n	8001bf6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff fe1b 	bl	8001808 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d90c      	bls.n	8001bf6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e015      	b.n	8001c22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e4      	bne.n	8001bce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	223f      	movs	r2, #63	; 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d004      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00c      	b.n	8001c62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2205      	movs	r2, #5
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7c:	b2db      	uxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d108      	bne.n	8001cca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc8:	e007      	b.n	8001cda <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	60da      	str	r2, [r3, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_FLASH_Program+0xb0>)
 8001cfc:	7d1b      	ldrb	r3, [r3, #20]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_FLASH_Program+0x1e>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e043      	b.n	8001d8e <HAL_FLASH_Program+0xa6>
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_FLASH_Program+0xb0>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d10:	f000 f878 	bl	8001e04 <FLASH_WaitForLastOperation>
 8001d14:	4603      	mov	r3, r0
 8001d16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d133      	bne.n	8001d86 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d823      	bhi.n	8001d6c <HAL_FLASH_Program+0x84>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_FLASH_Program+0x44>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d55 	.word	0x08001d55
 8001d38:	08001d61 	.word	0x08001d61
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d3c:	783b      	ldrb	r3, [r7, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f000 f921 	bl	8001f88 <FLASH_Program_Byte>
        break;
 8001d46:	e012      	b.n	8001d6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d48:	883b      	ldrh	r3, [r7, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68b8      	ldr	r0, [r7, #8]
 8001d4e:	f000 f8f5 	bl	8001f3c <FLASH_Program_HalfWord>
        break;
 8001d52:	e00c      	b.n	8001d6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	f000 f8c9 	bl	8001ef0 <FLASH_Program_Word>
        break;
 8001d5e:	e006      	b.n	8001d6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d64:	68b8      	ldr	r0, [r7, #8]
 8001d66:	f000 f88d 	bl	8001e84 <FLASH_Program_DoubleWord>
        break;
 8001d6a:	e000      	b.n	8001d6e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001d6c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d72:	f000 f847 	bl	8001e04 <FLASH_WaitForLastOperation>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_FLASH_Program+0xb4>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_FLASH_Program+0xb4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_FLASH_Program+0xb0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	751a      	strb	r2, [r3, #20]

  return status;
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200016f8 	.word	0x200016f8
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0b      	bge.n	8001dca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_FLASH_Unlock+0x3c>)
 8001db6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_FLASH_Unlock+0x40>)
 8001dbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da01      	bge.n	8001dca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	45670123 	.word	0x45670123
 8001de0:	cdef89ab 	.word	0xcdef89ab

08001de4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_FLASH_Lock+0x1c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_FLASH_Lock+0x1c>)
 8001dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <FLASH_WaitForLastOperation+0x78>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e16:	f7ff fcf7 	bl	8001808 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e1c:	e010      	b.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d00c      	beq.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <FLASH_WaitForLastOperation+0x38>
 8001e2c:	f7ff fcec 	bl	8001808 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d201      	bcs.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e019      	b.n	8001e74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e58:	f000 f8ba 	bl	8001fd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e009      	b.n	8001e74 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
  
}  
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200016f8 	.word	0x200016f8
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001ea2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <FLASH_Program_DoubleWord+0x68>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001eba:	f3bf 8f6f 	isb	sy
}
 8001ebe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	000a      	movs	r2, r1
 8001ece:	2300      	movs	r3, #0
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	3104      	adds	r1, #4
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <FLASH_Program_Word+0x48>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f24:	f3bf 8f4f 	dsb	sy
}
 8001f28:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <FLASH_Program_HalfWord+0x48>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f72:	f3bf 8f4f 	dsb	sy
}
 8001f76:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <FLASH_Program_Byte+0x44>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fba:	f3bf 8f4f 	dsb	sy
}
 8001fbe:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <FLASH_SetErrorCode+0x8c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8001fea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <FLASH_SetErrorCode+0x8c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8002002:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <FLASH_SetErrorCode+0x8c>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <FLASH_SetErrorCode+0x90>)
 800201a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <FLASH_SetErrorCode+0x8c>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <FLASH_SetErrorCode+0x90>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8002032:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <FLASH_SetErrorCode+0x8c>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <FLASH_SetErrorCode+0x90>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <FLASH_SetErrorCode+0x90>)
 800204a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <FLASH_SetErrorCode+0x8c>)
 800204e:	22f2      	movs	r2, #242	; 0xf2
 8002050:	60da      	str	r2, [r3, #12]
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40023c00 	.word	0x40023c00
 8002060:	200016f8 	.word	0x200016f8

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e175      	b.n	8002370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8164 	bne.w	800236a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d005      	beq.n	80020ba <HAL_GPIO_Init+0x56>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80be 	beq.w	800236a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002206:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_GPIO_Init+0x328>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_GPIO_Init+0x32c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d037      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_GPIO_Init+0x334>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_GPIO_Init+0x338>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a54      	ldr	r2, [pc, #336]	; (80023a0 <HAL_GPIO_Init+0x33c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <HAL_GPIO_Init+0x340>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x344>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_GPIO_Init+0x348>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_GPIO_Init+0x34c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x21a>
 800227a:	2309      	movs	r3, #9
 800227c:	e012      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800227e:	230a      	movs	r3, #10
 8002280:	e010      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002282:	2308      	movs	r3, #8
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002286:	2307      	movs	r3, #7
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x328>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae86 	bls.w	8002084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40021c00 	.word	0x40021c00
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40022400 	.word	0x40022400
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fe90 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	; 0x24
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002440:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002450:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e006      	b.n	8002478 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002476:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d104      	bne.n	800248a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_I2C_Init+0x11c>)
 8002496:	430b      	orrs	r3, r1
 8002498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69d9      	ldr	r1, [r3, #28]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	02008000 	.word	0x02008000

08002510 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
  }
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002584:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00f      	beq.n	80025b0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f043 0208 	orr.w	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00f      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0202 	orr.w	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 030b 	and.w	r3, r3, #11
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fb77 	bl	8002ce0 <I2C_ITError>
  }
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <I2C_Slave_ISR_IT+0x24>
 800269a:	2302      	movs	r3, #2
 800269c:	e0e1      	b.n	8002862 <I2C_Slave_ISR_IT+0x1e8>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026ba:	6939      	ldr	r1, [r7, #16]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f9b5 	bl	8002a2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d04b      	beq.n	8002764 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d046      	beq.n	8002764 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d128      	bne.n	8002732 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b28      	cmp	r3, #40	; 0x28
 80026ea:	d108      	bne.n	80026fe <I2C_Slave_ISR_IT+0x84>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f2:	d104      	bne.n	80026fe <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80026f4:	6939      	ldr	r1, [r7, #16]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa9e 	bl	8002c38 <I2C_ITListenCplt>
 80026fc:	e031      	b.n	8002762 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b29      	cmp	r3, #41	; 0x29
 8002708:	d10e      	bne.n	8002728 <I2C_Slave_ISR_IT+0xae>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002710:	d00a      	beq.n	8002728 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fbd7 	bl	8002ece <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f926 	bl	8002972 <I2C_ITSlaveSeqCplt>
 8002726:	e01c      	b.n	8002762 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2210      	movs	r2, #16
 800272e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002730:	e08f      	b.n	8002852 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <I2C_Slave_ISR_IT+0xda>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002752:	d17e      	bne.n	8002852 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	4619      	mov	r1, r3
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fac0 	bl	8002ce0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002760:	e077      	b.n	8002852 <I2C_Slave_ISR_IT+0x1d8>
 8002762:	e076      	b.n	8002852 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d02f      	beq.n	80027ce <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02a      	beq.n	80027ce <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d018      	beq.n	80027b4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d14b      	bne.n	8002856 <I2C_Slave_ISR_IT+0x1dc>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027c4:	d047      	beq.n	8002856 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8d3 	bl	8002972 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80027cc:	e043      	b.n	8002856 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80027e2:	6939      	ldr	r1, [r7, #16]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f840 	bl	800286a <I2C_ITAddrCplt>
 80027ea:	e035      	b.n	8002858 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d030      	beq.n	8002858 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02b      	beq.n	8002858 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
 800283a:	e00d      	b.n	8002858 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002842:	d002      	beq.n	800284a <I2C_Slave_ISR_IT+0x1d0>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f891 	bl	8002972 <I2C_ITSlaveSeqCplt>
 8002850:	e002      	b.n	8002858 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002856:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002880:	2b28      	cmp	r3, #40	; 0x28
 8002882:	d16a      	bne.n	800295a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	b29b      	uxth	r3, r3
 800289e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028a2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028be:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d138      	bne.n	800293a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80028c8:	897b      	ldrh	r3, [r7, #10]
 80028ca:	09db      	lsrs	r3, r3, #7
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	89bb      	ldrh	r3, [r7, #12]
 80028d0:	4053      	eors	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f003 0306 	and.w	r3, r3, #6
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11c      	bne.n	8002916 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d13b      	bne.n	800296a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2208      	movs	r2, #8
 80028fe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002908:	89ba      	ldrh	r2, [r7, #12]
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fe87 	bl	8002622 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002914:	e029      	b.n	800296a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002916:	893b      	ldrh	r3, [r7, #8]
 8002918:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800291a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb17 	bl	8002f52 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800292c:	89ba      	ldrh	r2, [r7, #12]
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fe75 	bl	8002622 <HAL_I2C_AddrCallback>
}
 8002938:	e017      	b.n	800296a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800293a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fb07 	bl	8002f52 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800294c:	89ba      	ldrh	r2, [r7, #12]
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fe65 	bl	8002622 <HAL_I2C_AddrCallback>
}
 8002958:	e007      	b.n	800296a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2208      	movs	r2, #8
 8002960:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e00c      	b.n	80029c0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b29      	cmp	r3, #41	; 0x29
 80029ca:	d112      	bne.n	80029f2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2228      	movs	r2, #40	; 0x28
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2221      	movs	r2, #33	; 0x21
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029da:	2101      	movs	r1, #1
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fab8 	bl	8002f52 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fe05 	bl	80025fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029f0:	e017      	b.n	8002a22 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b2a      	cmp	r3, #42	; 0x2a
 80029fc:	d111      	bne.n	8002a22 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2228      	movs	r2, #40	; 0x28
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2222      	movs	r2, #34	; 0x22
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa9f 	bl	8002f52 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fdf6 	bl	800260e <HAL_I2C_SlaveRxCpltCallback>
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b21      	cmp	r3, #33	; 0x21
 8002a56:	d002      	beq.n	8002a5e <I2C_ITSlaveCplt+0x32>
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b29      	cmp	r3, #41	; 0x29
 8002a5c:	d108      	bne.n	8002a70 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a5e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa75 	bl	8002f52 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6e:	e00d      	b.n	8002a8c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b22      	cmp	r3, #34	; 0x22
 8002a74:	d002      	beq.n	8002a7c <I2C_ITSlaveCplt+0x50>
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b2a      	cmp	r3, #42	; 0x2a
 8002a7a:	d107      	bne.n	8002a8c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a7c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa66 	bl	8002f52 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <I2C_ITSlaveCplt+0x204>)
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fa0e 	bl	8002ece <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01f      	beq.n	8002b14 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ae2:	e017      	b.n	8002b14 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d020      	beq.n	8002b60 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8a4 	bl	8002ce0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b28      	cmp	r3, #40	; 0x28
 8002ba2:	d141      	bne.n	8002c28 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f846 	bl	8002c38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bac:	e03c      	b.n	8002c28 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb6:	d014      	beq.n	8002be2 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff feda 	bl	8002972 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <I2C_ITSlaveCplt+0x208>)
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fd2f 	bl	800263e <HAL_I2C_ListenCpltCallback>
}
 8002be0:	e022      	b.n	8002c28 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b22      	cmp	r3, #34	; 0x22
 8002bec:	d10e      	bne.n	8002c0c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff fd02 	bl	800260e <HAL_I2C_SlaveRxCpltCallback>
}
 8002c0a:	e00d      	b.n	8002c28 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fce9 	bl	80025fa <HAL_I2C_SlaveTxCpltCallback>
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	fe00e800 	.word	0xfe00e800
 8002c34:	ffff0000 	.word	0xffff0000

08002c38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <I2C_ITListenCplt+0xa4>)
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d022      	beq.n	8002cb4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f94a 	bl	8002f52 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fcb5 	bl	800263e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	ffff0000 	.word	0xffff0000

08002ce0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <I2C_ITError+0x194>)
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b28      	cmp	r3, #40	; 0x28
 8002d16:	d005      	beq.n	8002d24 <I2C_ITError+0x44>
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b29      	cmp	r3, #41	; 0x29
 8002d1c:	d002      	beq.n	8002d24 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b2a      	cmp	r3, #42	; 0x2a
 8002d22:	d10b      	bne.n	8002d3c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d24:	2103      	movs	r1, #3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f913 	bl	8002f52 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2228      	movs	r2, #40	; 0x28
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <I2C_ITError+0x198>)
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3a:	e011      	b.n	8002d60 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d3c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f906 	bl	8002f52 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b60      	cmp	r3, #96	; 0x60
 8002d50:	d003      	beq.n	8002d5a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d039      	beq.n	8002de2 <I2C_ITError+0x102>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d002      	beq.n	8002d7a <I2C_ITError+0x9a>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b21      	cmp	r3, #33	; 0x21
 8002d78:	d133      	bne.n	8002de2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d88:	d107      	bne.n	8002d9a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe ff65 	bl	8001c6e <HAL_DMA_GetState>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d017      	beq.n	8002dda <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <I2C_ITError+0x19c>)
 8002db0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe ff33 	bl	8001c2a <HAL_DMA_Abort_IT>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04d      	beq.n	8002e66 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dd8:	e045      	b.n	8002e66 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f850 	bl	8002e80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002de0:	e041      	b.n	8002e66 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d039      	beq.n	8002e5e <I2C_ITError+0x17e>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b12      	cmp	r3, #18
 8002dee:	d002      	beq.n	8002df6 <I2C_ITError+0x116>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b22      	cmp	r3, #34	; 0x22
 8002df4:	d133      	bne.n	8002e5e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d107      	bne.n	8002e16 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ff27 	bl	8001c6e <HAL_DMA_GetState>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d017      	beq.n	8002e56 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <I2C_ITError+0x19c>)
 8002e2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fef5 	bl	8001c2a <HAL_DMA_Abort_IT>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e54:	e009      	b.n	8002e6a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f812 	bl	8002e80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e5c:	e005      	b.n	8002e6a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f80e 	bl	8002e80 <I2C_TreatErrorCallback>
  }
}
 8002e64:	e002      	b.n	8002e6c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e6a:	bf00      	nop
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	ffff0000 	.word	0xffff0000
 8002e78:	0800267b 	.word	0x0800267b
 8002e7c:	08002f17 	.word	0x08002f17

08002e80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d10e      	bne.n	8002eb2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fbdb 	bl	8002666 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002eb0:	e009      	b.n	8002ec6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff fbc6 	bl	8002652 <HAL_I2C_ErrorCallback>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d103      	bne.n	8002eec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d007      	beq.n	8002f0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	619a      	str	r2, [r3, #24]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2200      	movs	r2, #0
 8002f42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff ff9b 	bl	8002e80 <I2C_TreatErrorCallback>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00f      	beq.n	8002f8c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002f72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f80:	2b28      	cmp	r3, #40	; 0x28
 8002f82:	d003      	beq.n	8002f8c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00f      	beq.n	8002fb6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002f9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002faa:	2b28      	cmp	r3, #40	; 0x28
 8002fac:	d003      	beq.n	8002fb6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002fb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da03      	bge.n	8002fc6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d103      	bne.n	8002fd4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d103      	bne.n	8002fe2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d103      	bne.n	8002ff0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	d138      	bne.n	8003096 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800302e:	2302      	movs	r3, #2
 8003030:	e032      	b.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2224      	movs	r2, #36	; 0x24
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003060:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d139      	bne.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e033      	b.n	8003130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	b08f      	sub	sp, #60	; 0x3c
 8003140:	af0a      	add	r7, sp, #40	; 0x28
 8003142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e116      	b.n	800337c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fe f9b7 	bl	80014dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f004 f8cd 	bl	800732c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	687e      	ldr	r6, [r7, #4]
 800319a:	466d      	mov	r5, sp
 800319c:	f106 0410 	add.w	r4, r6, #16
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b0:	1d33      	adds	r3, r6, #4
 80031b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b4:	6838      	ldr	r0, [r7, #0]
 80031b6:	f004 f861 	bl	800727c <USB_CoreInit>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d7      	b.n	800337c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 f8bb 	bl	800734e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e04a      	b.n	8003274 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	333d      	adds	r3, #61	; 0x3d
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	333c      	adds	r3, #60	; 0x3c
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	b298      	uxth	r0, r3
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3344      	adds	r3, #68	; 0x44
 800321a:	4602      	mov	r2, r0
 800321c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3340      	adds	r3, #64	; 0x40
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3348      	adds	r3, #72	; 0x48
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334c      	adds	r3, #76	; 0x4c
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3354      	adds	r3, #84	; 0x54
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	3301      	adds	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d3af      	bcc.n	80031de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e044      	b.n	800330e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	3301      	adds	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3b5      	bcc.n	8003284 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	687e      	ldr	r6, [r7, #4]
 8003320:	466d      	mov	r5, sp
 8003322:	f106 0410 	add.w	r4, r6, #16
 8003326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003332:	e885 0003 	stmia.w	r5, {r0, r1}
 8003336:	1d33      	adds	r3, r6, #4
 8003338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f004 f854 	bl	80073e8 <USB_DevInit>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e014      	b.n	800337c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f80a 	bl	8003384 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fa12 	bl	800779e <USB_DevDisconnect>

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	10000003 	.word	0x10000003

080033cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e291      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8087 	beq.w	80034fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d00c      	beq.n	8003416 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fc:	4b93      	ldr	r3, [pc, #588]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d112      	bne.n	800342e <HAL_RCC_OscConfig+0x62>
 8003408:	4b90      	ldr	r3, [pc, #576]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b8d      	ldr	r3, [pc, #564]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06c      	beq.n	80034fc <HAL_RCC_OscConfig+0x130>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d168      	bne.n	80034fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e26b      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x7a>
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a83      	ldr	r2, [pc, #524]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x9c>
 800344e:	4b7f      	ldr	r3, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7e      	ldr	r2, [pc, #504]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b7c      	ldr	r3, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7b      	ldr	r2, [pc, #492]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0xc0>
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a75      	ldr	r2, [pc, #468]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a72      	ldr	r2, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 800348c:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b6c      	ldr	r3, [pc, #432]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a6b      	ldr	r2, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe f9ac 	bl	8001808 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe f9a8 	bl	8001808 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e21f      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b61      	ldr	r3, [pc, #388]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f998 	bl	8001808 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe f994 	bl	8001808 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e20b      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b57      	ldr	r3, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x110>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d069      	beq.n	80035de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b4d      	ldr	r3, [pc, #308]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x190>
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x17a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1df      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	493d      	ldr	r1, [pc, #244]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e040      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f94a 	bl	8001808 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe f946 	bl	8001808 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1bd      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b30      	ldr	r3, [pc, #192]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4929      	ldr	r1, [pc, #164]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
 80035aa:	e018      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe f926 	bl	8001808 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe f922 	bl	8001808 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e199      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d038      	beq.n	800365c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d019      	beq.n	8003626 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x280>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fe f903 	bl	8001808 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003606:	f7fe f8ff 	bl	8001808 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e176      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x23a>
 8003624:	e01a      	b.n	800365c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x280>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe f8e9 	bl	8001808 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363a:	f7fe f8e5 	bl	8001808 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d903      	bls.n	8003650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e15c      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
 800364c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b91      	ldr	r3, [pc, #580]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a4 	beq.w	80037b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b8b      	ldr	r3, [pc, #556]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a87      	ldr	r2, [pc, #540]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003692:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_OscConfig+0x4d0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7e      	ldr	r2, [pc, #504]	; (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe f8ad 	bl	8001808 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe f8a9 	bl	8001808 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e120      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x31a>
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	e02d      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x33c>
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a66      	ldr	r2, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x35e>
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 800372a:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a5a      	ldr	r2, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	4b58      	ldr	r3, [pc, #352]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a57      	ldr	r2, [pc, #348]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fe f85d 	bl	8001808 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f859 	bl	8001808 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0ce      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x386>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe f847 	bl	8001808 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe f843 	bl	8001808 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80a4 	beq.w	8003904 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d06b      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d149      	bne.n	8003864 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a30      	ldr	r2, [pc, #192]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe f814 	bl	8001808 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe f810 	bl	8001808 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e087      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	4313      	orrs	r3, r2
 8003828:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd ffe4 	bl	8001808 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd ffe0 	bl	8001808 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e057      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x478>
 8003862:	e04f      	b.n	8003904 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd ffca 	bl	8001808 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd ffc6 	bl	8001808 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e03d      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x4ac>
 8003896:	e035      	b.n	8003904 <HAL_RCC_OscConfig+0x538>
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x544>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d121      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11a      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0d0      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d910      	bls.n	800395c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b67      	ldr	r3, [pc, #412]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4965      	ldr	r1, [pc, #404]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d040      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b47      	ldr	r3, [pc, #284]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d115      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b41      	ldr	r3, [pc, #260]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e073      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06b      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0203 	bic.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4936      	ldr	r1, [pc, #216]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd fefe 	bl	8001808 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fd fefa 	bl	8001808 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e053      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 020c 	and.w	r2, r3, #12
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1eb      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a38:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d210      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	4922      	ldr	r1, [pc, #136]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fe5a 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	080081f0 	.word	0x080081f0
 8003ae4:	20000008 	.word	0x20000008
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b094      	sub	sp, #80	; 0x50
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	647b      	str	r3, [r7, #68]	; 0x44
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afc:	2300      	movs	r3, #0
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b04:	4b79      	ldr	r3, [pc, #484]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80e1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e0db      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b24:	e0db      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b2a:	e0d8      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b36:	4b6d      	ldr	r3, [pc, #436]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b70:	0150      	lsls	r0, r2, #5
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4621      	mov	r1, r4
 8003b78:	1a51      	subs	r1, r2, r1
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	018b      	lsls	r3, r1, #6
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	018a      	lsls	r2, r1, #6
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	eb49 0303 	adc.w	r3, r9, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bde:	4629      	mov	r1, r5
 8003be0:	024b      	lsls	r3, r1, #9
 8003be2:	4621      	mov	r1, r4
 8003be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be8:	4621      	mov	r1, r4
 8003bea:	024a      	lsls	r2, r1, #9
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bfc:	f7fc fb58 	bl	80002b0 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c08:	e058      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	4611      	mov	r1, r2
 8003c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c36:	0150      	lsls	r0, r2, #5
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c60:	eb63 050b 	sbc.w	r5, r3, fp
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	61fa      	str	r2, [r7, #28]
 8003cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb0:	f7fc fafe 	bl	80002b0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3750      	adds	r7, #80	; 0x50
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000008 	.word	0x20000008

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08008200 	.word	0x08008200

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08008200 	.word	0x08008200

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d88:	4b69      	ldr	r3, [pc, #420]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d92:	6093      	str	r3, [r2, #8]
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	4964      	ldr	r1, [pc, #400]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d017      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	4959      	ldr	r1, [pc, #356]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	494a      	ldr	r1, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808b 	beq.w	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a39      	ldr	r2, [pc, #228]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd fcce 	bl	8001808 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fd fcca 	bl	8001808 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e357      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e82:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e8e:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d035      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d02e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d114      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fc92 	bl	8001808 <HAL_GetTick>
 8003ee4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fc8e 	bl	8001808 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e319      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d111      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	4901      	ldr	r1, [pc, #4]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000
 8003f38:	0ffffcff 	.word	0x0ffffcff
 8003f3c:	4baa      	ldr	r3, [pc, #680]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4aa9      	ldr	r2, [pc, #676]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	4ba7      	ldr	r3, [pc, #668]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	49a4      	ldr	r1, [pc, #656]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f66:	4ba0      	ldr	r3, [pc, #640]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	4a9e      	ldr	r2, [pc, #632]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f76:	4b9c      	ldr	r3, [pc, #624]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	4999      	ldr	r1, [pc, #612]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f94:	4b94      	ldr	r3, [pc, #592]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa2:	4991      	ldr	r1, [pc, #580]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	4988      	ldr	r1, [pc, #544]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd8:	4b83      	ldr	r3, [pc, #524]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe6:	4980      	ldr	r1, [pc, #512]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4977      	ldr	r1, [pc, #476]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401c:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	496f      	ldr	r1, [pc, #444]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f023 020c 	bic.w	r2, r3, #12
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	4966      	ldr	r1, [pc, #408]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004060:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	495e      	ldr	r1, [pc, #376]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004082:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	4955      	ldr	r1, [pc, #340]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040c6:	4b48      	ldr	r3, [pc, #288]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4944      	ldr	r1, [pc, #272]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	493c      	ldr	r1, [pc, #240]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	4933      	ldr	r1, [pc, #204]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413a:	492b      	ldr	r1, [pc, #172]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	4912      	ldr	r1, [pc, #72]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c0:	4909      	ldr	r1, [pc, #36]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d006      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80d9 	beq.w	800438e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a01      	ldr	r2, [pc, #4]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e6:	e001      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ee:	f7fd fb0b 	bl	8001808 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041f6:	f7fd fb07 	bl	8001808 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d901      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e194      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004208:	4b6c      	ldr	r3, [pc, #432]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11d      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004228:	4b64      	ldr	r3, [pc, #400]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004236:	4b61      	ldr	r3, [pc, #388]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	019a      	lsls	r2, r3, #6
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	071b      	lsls	r3, r3, #28
 800425c:	4957      	ldr	r1, [pc, #348]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004282:	2b00      	cmp	r3, #0
 8004284:	d02e      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428e:	d129      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004290:	4b4a      	ldr	r3, [pc, #296]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	0f1b      	lsrs	r3, r3, #28
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	019a      	lsls	r2, r3, #6
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	071b      	lsls	r3, r3, #28
 80042c4:	493d      	ldr	r1, [pc, #244]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042cc:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d2:	f023 021f 	bic.w	r2, r3, #31
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	3b01      	subs	r3, #1
 80042dc:	4937      	ldr	r1, [pc, #220]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042f0:	4b32      	ldr	r3, [pc, #200]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f6:	0e1b      	lsrs	r3, r3, #24
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042fe:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	0f1b      	lsrs	r3, r3, #28
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	019a      	lsls	r2, r3, #6
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	431a      	orrs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	071b      	lsls	r3, r3, #28
 8004324:	4925      	ldr	r1, [pc, #148]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d011      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	019a      	lsls	r2, r3, #6
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	071b      	lsls	r3, r3, #28
 8004354:	4919      	ldr	r1, [pc, #100]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fd fa4e 	bl	8001808 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004370:	f7fd fa4a 	bl	8001808 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0d7      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b01      	cmp	r3, #1
 8004392:	f040 80cd 	bne.w	8004530 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a2:	f7fd fa31 	bl	8001808 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043aa:	f7fd fa2d 	bl	8001808 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d903      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0ba      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c0:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043cc:	d0ed      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02e      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d12a      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043f6:	4b51      	ldr	r3, [pc, #324]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004404:	4b4d      	ldr	r3, [pc, #308]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	019a      	lsls	r2, r3, #6
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	071b      	lsls	r3, r3, #28
 800442a:	4944      	ldr	r1, [pc, #272]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004432:	4b42      	ldr	r3, [pc, #264]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	493d      	ldr	r1, [pc, #244]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004460:	d11d      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	0e1b      	lsrs	r3, r3, #24
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004470:	4b32      	ldr	r3, [pc, #200]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	0f1b      	lsrs	r3, r3, #28
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	019a      	lsls	r2, r3, #6
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	431a      	orrs	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	4929      	ldr	r1, [pc, #164]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d028      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	0e1b      	lsrs	r3, r3, #24
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	4917      	ldr	r1, [pc, #92]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4911      	ldr	r1, [pc, #68]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0e      	ldr	r2, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fd f97e 	bl	8001808 <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004510:	f7fd f97a 	bl	8001808 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e007      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452e:	d1ef      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fe76 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fd26 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e054      	b.n	80046b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d01d      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIM_Base_Start_IT+0xdc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d115      	bne.n	800469c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_TIM_Base_Start_IT+0xec>)
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d015      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d011      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	e008      	b.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40001800 	.word	0x40001800
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e049      	b.n	8004786 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fd88 	bl	800121c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fc56 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x24>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e03c      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start+0x3e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e02f      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start+0x58>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e022      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d109      	bne.n	8004802 <HAL_TIM_PWM_Start+0x72>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e015      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b10      	cmp	r3, #16
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start+0x8c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e008      	b.n	800482e <HAL_TIM_PWM_Start+0x9e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e092      	b.n	800495c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0xb6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	e023      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xc6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004854:	e01b      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xd6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004864:	e013      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xe6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004874:	e00b      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xf6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004884:	e003      	b.n	800488e <HAL_TIM_PWM_Start+0xfe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 ff32 	bl	8005700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_TIM_PWM_Start+0x1d4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_PWM_Start+0x120>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <HAL_TIM_PWM_Start+0x1d8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_PWM_Start+0x124>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_Start+0x126>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <HAL_TIM_PWM_Start+0x1d4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d01d      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_TIM_PWM_Start+0x1dc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_TIM_PWM_Start+0x1e0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_TIM_PWM_Start+0x1e4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_TIM_PWM_Start+0x1d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <HAL_TIM_PWM_Start+0x1e8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIM_PWM_Start+0x18a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <HAL_TIM_PWM_Start+0x1ec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d115      	bne.n	8004946 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_TIM_PWM_Start+0x1f0>)
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b06      	cmp	r3, #6
 800492a:	d015      	beq.n	8004958 <HAL_TIM_PWM_Start+0x1c8>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004932:	d011      	beq.n	8004958 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	e008      	b.n	8004958 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e000      	b.n	800495a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40010000 	.word	0x40010000
 8004968:	40010400 	.word	0x40010400
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40014000 	.word	0x40014000
 800497c:	40001800 	.word	0x40001800
 8004980:	00010007 	.word	0x00010007

08004984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0202 	mvn.w	r2, #2
 80049b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fae4 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fad6 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fae7 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0204 	mvn.w	r2, #4
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 faba 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 faac 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fabd 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0208 	mvn.w	r2, #8
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa90 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa82 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fa93 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0210 	mvn.w	r2, #16
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa66 	bl	8004f94 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa58 	bl	8004f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa69 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0201 	mvn.w	r2, #1
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc f94c 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fea4 	bl	800587c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d10e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d107      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fe97 	bl	8005890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d10e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa17 	bl	8004fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0220 	mvn.w	r2, #32
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fe57 	bl	8005868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e0ff      	b.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b14      	cmp	r3, #20
 8004bee:	f200 80f0 	bhi.w	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004dd3 	.word	0x08004dd3
 8004c00:	08004dd3 	.word	0x08004dd3
 8004c04:	08004dd3 	.word	0x08004dd3
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004dd3 	.word	0x08004dd3
 8004c10:	08004dd3 	.word	0x08004dd3
 8004c14:	08004dd3 	.word	0x08004dd3
 8004c18:	08004ccf 	.word	0x08004ccf
 8004c1c:	08004dd3 	.word	0x08004dd3
 8004c20:	08004dd3 	.word	0x08004dd3
 8004c24:	08004dd3 	.word	0x08004dd3
 8004c28:	08004d0f 	.word	0x08004d0f
 8004c2c:	08004dd3 	.word	0x08004dd3
 8004c30:	08004dd3 	.word	0x08004dd3
 8004c34:	08004dd3 	.word	0x08004dd3
 8004c38:	08004d51 	.word	0x08004d51
 8004c3c:	08004dd3 	.word	0x08004dd3
 8004c40:	08004dd3 	.word	0x08004dd3
 8004c44:	08004dd3 	.word	0x08004dd3
 8004c48:	08004d91 	.word	0x08004d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa5c 	bl	8005110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
      break;
 8004c8a:	e0a5      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 faae 	bl	80051f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
      break;
 8004ccc:	e084      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fb05 	bl	80052e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0208 	orr.w	r2, r2, #8
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	61da      	str	r2, [r3, #28]
      break;
 8004d0c:	e064      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fb5b 	bl	80053d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69d9      	ldr	r1, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	021a      	lsls	r2, r3, #8
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	61da      	str	r2, [r3, #28]
      break;
 8004d4e:	e043      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb92 	bl	8005480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d8e:	e023      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fbc4 	bl	8005524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dd0:	e002      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop

08004dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_TIM_ConfigClockSource+0x1c>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e0b4      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x186>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_TIM_ConfigClockSource+0x190>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e40:	d03e      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e46:	f200 8087 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4e:	f000 8086 	beq.w	8004f5e <HAL_TIM_ConfigClockSource+0x172>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d87f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d01a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xa6>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d87b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b60      	cmp	r3, #96	; 0x60
 8004e62:	d050      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x11a>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d877      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b50      	cmp	r3, #80	; 0x50
 8004e6a:	d03c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d873      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d058      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x13a>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d86f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d064      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d86b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d060      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d867      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d05a      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	e062      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	f000 fc0d 	bl	80056c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	609a      	str	r2, [r3, #8]
      break;
 8004ebe:	e04f      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	f000 fbf6 	bl	80056c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee2:	609a      	str	r2, [r3, #8]
      break;
 8004ee4:	e03c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fb6a 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2150      	movs	r1, #80	; 0x50
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fbc3 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8004f04:	e02c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fb89 	bl	800562a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2160      	movs	r1, #96	; 0x60
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fbb3 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8004f24:	e01c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 fb4a 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2140      	movs	r1, #64	; 0x40
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fba3 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8004f44:	e00c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fb9a 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8004f56:	e003      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e000      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	fffeff88 	.word	0xfffeff88

08004f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a40      	ldr	r2, [pc, #256]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d00f      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3d      	ldr	r2, [pc, #244]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3c      	ldr	r2, [pc, #240]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3b      	ldr	r2, [pc, #236]	; (80050f0 <TIM_Base_SetConfig+0x120>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d027      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d023      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <TIM_Base_SetConfig+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d017      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <TIM_Base_SetConfig+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <TIM_Base_SetConfig+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <TIM_Base_SetConfig+0x130>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0x134>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a24      	ldr	r2, [pc, #144]	; (8005108 <TIM_Base_SetConfig+0x138>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <TIM_Base_SetConfig+0x13c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0xf8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d103      	bne.n	80050d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	615a      	str	r2, [r3, #20]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40010400 	.word	0x40010400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800
 8005104:	40001800 	.word	0x40001800
 8005108:	40001c00 	.word	0x40001c00
 800510c:	40002000 	.word	0x40002000

08005110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4b2b      	ldr	r3, [pc, #172]	; (80051e8 <TIM_OC1_SetConfig+0xd8>)
 800513c:	4013      	ands	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0302 	bic.w	r3, r3, #2
 8005158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <TIM_OC1_SetConfig+0xdc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC1_SetConfig+0x64>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <TIM_OC1_SetConfig+0xe0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0308 	bic.w	r3, r3, #8
 800517a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <TIM_OC1_SetConfig+0xdc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_OC1_SetConfig+0x8e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <TIM_OC1_SetConfig+0xe0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d111      	bne.n	80051c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	fffeff8f 	.word	0xfffeff8f
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0210 	bic.w	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <TIM_OC2_SetConfig+0xe4>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0320 	bic.w	r3, r3, #32
 800523e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <TIM_OC2_SetConfig+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC2_SetConfig+0x68>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <TIM_OC2_SetConfig+0xec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10d      	bne.n	8005278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <TIM_OC2_SetConfig+0xe8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC2_SetConfig+0x94>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <TIM_OC2_SetConfig+0xec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d113      	bne.n	80052b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	feff8fff 	.word	0xfeff8fff
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <TIM_OC3_SetConfig+0xe0>)
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800532c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <TIM_OC3_SetConfig+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_OC3_SetConfig+0x66>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_OC3_SetConfig+0xe8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10d      	bne.n	8005366 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC3_SetConfig+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_OC3_SetConfig+0x92>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC3_SetConfig+0xe8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d113      	bne.n	800539e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	fffeff8f 	.word	0xfffeff8f
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <TIM_OC4_SetConfig+0xa4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <TIM_OC4_SetConfig+0xa8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC4_SetConfig+0x68>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <TIM_OC4_SetConfig+0xac>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d109      	bne.n	800544c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	019b      	lsls	r3, r3, #6
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	feff8fff 	.word	0xfeff8fff
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400

08005480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <TIM_OC5_SetConfig+0x98>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <TIM_OC5_SetConfig+0x9c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC5_SetConfig+0x5e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a11      	ldr	r2, [pc, #68]	; (8005520 <TIM_OC5_SetConfig+0xa0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d109      	bne.n	80054f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	fffeff8f 	.word	0xfffeff8f
 800551c:	40010000 	.word	0x40010000
 8005520:	40010400 	.word	0x40010400

08005524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <TIM_OC6_SetConfig+0x9c>)
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <TIM_OC6_SetConfig+0xa0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC6_SetConfig+0x60>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <TIM_OC6_SetConfig+0xa4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d109      	bne.n	8005598 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	feff8fff 	.word	0xfeff8fff
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40010400 	.word	0x40010400

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0210 	bic.w	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f043 0307 	orr.w	r3, r3, #7
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2201      	movs	r2, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e06d      	b.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a30      	ldr	r2, [pc, #192]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2f      	ldr	r2, [pc, #188]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800579e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a20      	ldr	r2, [pc, #128]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d01d      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1a      	ldr	r2, [pc, #104]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a15      	ldr	r2, [pc, #84]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10c      	bne.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40010000 	.word	0x40010000
 8005850:	40010400 	.word	0x40010400
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000
 8005864:	40001800 	.word	0x40001800

08005868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e040      	b.n	8005938 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb fd5a 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fc3e 	bl	8006164 <UART_SetConfig>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e022      	b.n	8005938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fe96 	bl	800662c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800590e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800591e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ff1d 	bl	8006770 <UART_CheckIdleState>
 8005936:	4603      	mov	r3, r0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005954:	2b20      	cmp	r3, #32
 8005956:	d171      	bne.n	8005a3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_UART_Transmit+0x24>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e06a      	b.n	8005a3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2221      	movs	r2, #33	; 0x21
 8005974:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005976:	f7fb ff47 	bl	8001808 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d108      	bne.n	80059a8 <HAL_UART_Transmit+0x68>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e003      	b.n	80059b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059b0:	e02c      	b.n	8005a0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 ff0e 	bl	80067de <UART_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e038      	b.n	8005a3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	3302      	adds	r3, #2
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e007      	b.n	80059fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1cc      	bne.n	80059b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fedb 	bl	80067de <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e005      	b.n	8005a3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08a      	sub	sp, #40	; 0x28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d132      	bne.n	8005ac4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_Receive_IT+0x24>
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e02b      	b.n	8005ac6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e6      	bne.n	8005a82 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 ff56 	bl	800696c <UART_Start_Receive_IT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08a      	sub	sp, #40	; 0x28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d132      	bne.n	8005b4c <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Receive_DMA+0x24>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02b      	b.n	8005b4e <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d018      	beq.n	8005b3c <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 ffd8 	bl	8006af8 <UART_Start_Receive_DMA>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e000      	b.n	8005b4e <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3728      	adds	r7, #40	; 0x28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b0ba      	sub	sp, #232	; 0xe8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b86:	4013      	ands	r3, r2
 8005b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d115      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8297 	beq.w	80060e4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
      }
      return;
 8005bbe:	e291      	b.n	80060e4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8117 	beq.w	8005df8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bda:	4b85      	ldr	r3, [pc, #532]	; (8005df0 <HAL_UART_IRQHandler+0x298>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 810a 	beq.w	8005df8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d011      	beq.n	8005c14 <HAL_UART_IRQHandler+0xbc>
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2201      	movs	r2, #1
 8005c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d011      	beq.n	8005c44 <HAL_UART_IRQHandler+0xec>
 8005c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2202      	movs	r2, #2
 8005c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <HAL_UART_IRQHandler+0x11c>
 8005c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2204      	movs	r2, #4
 8005c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6a:	f043 0202 	orr.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d105      	bne.n	8005c98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	f043 0208 	orr.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x18a>
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 81fd 	beq.w	80060e8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d005      	beq.n	8005d3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d04f      	beq.n	8005dda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 ffa2 	bl	8006c84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	d141      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1d9      	bne.n	8005d4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d013      	beq.n	8005dca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <HAL_UART_IRQHandler+0x29c>)
 8005da8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fb ff3b 	bl	8001c2a <HAL_DMA_Abort_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d017      	beq.n	8005dea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	e00f      	b.n	8005dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9b4 	bl	8006138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	e00b      	b.n	8005dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f9b0 	bl	8006138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	e007      	b.n	8005dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9ac 	bl	8006138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005de8:	e17e      	b.n	80060e8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dea:	bf00      	nop
    return;
 8005dec:	e17c      	b.n	80060e8 <HAL_UART_IRQHandler+0x590>
 8005dee:	bf00      	nop
 8005df0:	04000120 	.word	0x04000120
 8005df4:	08006f31 	.word	0x08006f31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	f040 814c 	bne.w	800609a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8145 	beq.w	800609a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 813e 	beq.w	800609a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2210      	movs	r2, #16
 8005e24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	f040 80b6 	bne.w	8005fa2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8150 	beq.w	80060ec <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e56:	429a      	cmp	r2, r3
 8005e58:	f080 8148 	bcs.w	80060ec <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e70:	f000 8086 	beq.w	8005f80 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ea2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1da      	bne.n	8005e74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ee2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e1      	bne.n	8005ebe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f50:	f023 0310 	bic.w	r3, r3, #16
 8005f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fb fde5 	bl	8001b4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8d6 	bl	800614c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fa0:	e0a4      	b.n	80060ec <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8096 	beq.w	80060f0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8091 	beq.w	80060f0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e4      	bne.n	8005fce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	623b      	str	r3, [r7, #32]
   return(result);
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006028:	633a      	str	r2, [r7, #48]	; 0x30
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800602e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e3      	bne.n	8006004 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60fb      	str	r3, [r7, #12]
   return(result);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	69b9      	ldr	r1, [r7, #24]
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	617b      	str	r3, [r7, #20]
   return(result);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e4      	bne.n	8006050 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800608c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f85a 	bl	800614c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006098:	e02a      	b.n	80060f0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00e      	beq.n	80060c4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01c      	beq.n	80060f4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
    }
    return;
 80060c2:	e017      	b.n	80060f4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_UART_IRQHandler+0x59e>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00c      	beq.n	80060f6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 ff3d 	bl	8006f5c <UART_EndTransmit_IT>
    return;
 80060e2:	e008      	b.n	80060f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80060e4:	bf00      	nop
 80060e6:	e006      	b.n	80060f6 <HAL_UART_IRQHandler+0x59e>
    return;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_UART_IRQHandler+0x59e>
    return;
 80060f4:	bf00      	nop
  }

}
 80060f6:	37e8      	adds	r7, #232	; 0xe8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4ba6      	ldr	r3, [pc, #664]	; (8006428 <UART_SetConfig+0x2c4>)
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	430b      	orrs	r3, r1
 800619a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a94      	ldr	r2, [pc, #592]	; (800642c <UART_SetConfig+0x2c8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d120      	bne.n	8006222 <UART_SetConfig+0xbe>
 80061e0:	4b93      	ldr	r3, [pc, #588]	; (8006430 <UART_SetConfig+0x2cc>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d816      	bhi.n	800621c <UART_SetConfig+0xb8>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x90>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006205 	.word	0x08006205
 80061f8:	08006211 	.word	0x08006211
 80061fc:	0800620b 	.word	0x0800620b
 8006200:	08006217 	.word	0x08006217
 8006204:	2301      	movs	r3, #1
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e150      	b.n	80064ac <UART_SetConfig+0x348>
 800620a:	2302      	movs	r3, #2
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e14d      	b.n	80064ac <UART_SetConfig+0x348>
 8006210:	2304      	movs	r3, #4
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e14a      	b.n	80064ac <UART_SetConfig+0x348>
 8006216:	2308      	movs	r3, #8
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e147      	b.n	80064ac <UART_SetConfig+0x348>
 800621c:	2310      	movs	r3, #16
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e144      	b.n	80064ac <UART_SetConfig+0x348>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a83      	ldr	r2, [pc, #524]	; (8006434 <UART_SetConfig+0x2d0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d132      	bne.n	8006292 <UART_SetConfig+0x12e>
 800622c:	4b80      	ldr	r3, [pc, #512]	; (8006430 <UART_SetConfig+0x2cc>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b0c      	cmp	r3, #12
 8006238:	d828      	bhi.n	800628c <UART_SetConfig+0x128>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0xdc>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006275 	.word	0x08006275
 8006244:	0800628d 	.word	0x0800628d
 8006248:	0800628d 	.word	0x0800628d
 800624c:	0800628d 	.word	0x0800628d
 8006250:	08006281 	.word	0x08006281
 8006254:	0800628d 	.word	0x0800628d
 8006258:	0800628d 	.word	0x0800628d
 800625c:	0800628d 	.word	0x0800628d
 8006260:	0800627b 	.word	0x0800627b
 8006264:	0800628d 	.word	0x0800628d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006287 	.word	0x08006287
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e118      	b.n	80064ac <UART_SetConfig+0x348>
 800627a:	2302      	movs	r3, #2
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e115      	b.n	80064ac <UART_SetConfig+0x348>
 8006280:	2304      	movs	r3, #4
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e112      	b.n	80064ac <UART_SetConfig+0x348>
 8006286:	2308      	movs	r3, #8
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e10f      	b.n	80064ac <UART_SetConfig+0x348>
 800628c:	2310      	movs	r3, #16
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e10c      	b.n	80064ac <UART_SetConfig+0x348>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a68      	ldr	r2, [pc, #416]	; (8006438 <UART_SetConfig+0x2d4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d120      	bne.n	80062de <UART_SetConfig+0x17a>
 800629c:	4b64      	ldr	r3, [pc, #400]	; (8006430 <UART_SetConfig+0x2cc>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a6:	2b30      	cmp	r3, #48	; 0x30
 80062a8:	d013      	beq.n	80062d2 <UART_SetConfig+0x16e>
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	d814      	bhi.n	80062d8 <UART_SetConfig+0x174>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d009      	beq.n	80062c6 <UART_SetConfig+0x162>
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d810      	bhi.n	80062d8 <UART_SetConfig+0x174>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <UART_SetConfig+0x15c>
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d006      	beq.n	80062cc <UART_SetConfig+0x168>
 80062be:	e00b      	b.n	80062d8 <UART_SetConfig+0x174>
 80062c0:	2300      	movs	r3, #0
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e0f2      	b.n	80064ac <UART_SetConfig+0x348>
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e0ef      	b.n	80064ac <UART_SetConfig+0x348>
 80062cc:	2304      	movs	r3, #4
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e0ec      	b.n	80064ac <UART_SetConfig+0x348>
 80062d2:	2308      	movs	r3, #8
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e0e9      	b.n	80064ac <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0e6      	b.n	80064ac <UART_SetConfig+0x348>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a56      	ldr	r2, [pc, #344]	; (800643c <UART_SetConfig+0x2d8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d120      	bne.n	800632a <UART_SetConfig+0x1c6>
 80062e8:	4b51      	ldr	r3, [pc, #324]	; (8006430 <UART_SetConfig+0x2cc>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f2:	2bc0      	cmp	r3, #192	; 0xc0
 80062f4:	d013      	beq.n	800631e <UART_SetConfig+0x1ba>
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d814      	bhi.n	8006324 <UART_SetConfig+0x1c0>
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	d009      	beq.n	8006312 <UART_SetConfig+0x1ae>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d810      	bhi.n	8006324 <UART_SetConfig+0x1c0>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <UART_SetConfig+0x1a8>
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d006      	beq.n	8006318 <UART_SetConfig+0x1b4>
 800630a:	e00b      	b.n	8006324 <UART_SetConfig+0x1c0>
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e0cc      	b.n	80064ac <UART_SetConfig+0x348>
 8006312:	2302      	movs	r3, #2
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e0c9      	b.n	80064ac <UART_SetConfig+0x348>
 8006318:	2304      	movs	r3, #4
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e0c6      	b.n	80064ac <UART_SetConfig+0x348>
 800631e:	2308      	movs	r3, #8
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e0c3      	b.n	80064ac <UART_SetConfig+0x348>
 8006324:	2310      	movs	r3, #16
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e0c0      	b.n	80064ac <UART_SetConfig+0x348>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a44      	ldr	r2, [pc, #272]	; (8006440 <UART_SetConfig+0x2dc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d125      	bne.n	8006380 <UART_SetConfig+0x21c>
 8006334:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <UART_SetConfig+0x2cc>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006342:	d017      	beq.n	8006374 <UART_SetConfig+0x210>
 8006344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006348:	d817      	bhi.n	800637a <UART_SetConfig+0x216>
 800634a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634e:	d00b      	beq.n	8006368 <UART_SetConfig+0x204>
 8006350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006354:	d811      	bhi.n	800637a <UART_SetConfig+0x216>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <UART_SetConfig+0x1fe>
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d006      	beq.n	800636e <UART_SetConfig+0x20a>
 8006360:	e00b      	b.n	800637a <UART_SetConfig+0x216>
 8006362:	2300      	movs	r3, #0
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e0a1      	b.n	80064ac <UART_SetConfig+0x348>
 8006368:	2302      	movs	r3, #2
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e09e      	b.n	80064ac <UART_SetConfig+0x348>
 800636e:	2304      	movs	r3, #4
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e09b      	b.n	80064ac <UART_SetConfig+0x348>
 8006374:	2308      	movs	r3, #8
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e098      	b.n	80064ac <UART_SetConfig+0x348>
 800637a:	2310      	movs	r3, #16
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e095      	b.n	80064ac <UART_SetConfig+0x348>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2f      	ldr	r2, [pc, #188]	; (8006444 <UART_SetConfig+0x2e0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d125      	bne.n	80063d6 <UART_SetConfig+0x272>
 800638a:	4b29      	ldr	r3, [pc, #164]	; (8006430 <UART_SetConfig+0x2cc>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006398:	d017      	beq.n	80063ca <UART_SetConfig+0x266>
 800639a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639e:	d817      	bhi.n	80063d0 <UART_SetConfig+0x26c>
 80063a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a4:	d00b      	beq.n	80063be <UART_SetConfig+0x25a>
 80063a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063aa:	d811      	bhi.n	80063d0 <UART_SetConfig+0x26c>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <UART_SetConfig+0x254>
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d006      	beq.n	80063c4 <UART_SetConfig+0x260>
 80063b6:	e00b      	b.n	80063d0 <UART_SetConfig+0x26c>
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e076      	b.n	80064ac <UART_SetConfig+0x348>
 80063be:	2302      	movs	r3, #2
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e073      	b.n	80064ac <UART_SetConfig+0x348>
 80063c4:	2304      	movs	r3, #4
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e070      	b.n	80064ac <UART_SetConfig+0x348>
 80063ca:	2308      	movs	r3, #8
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e06d      	b.n	80064ac <UART_SetConfig+0x348>
 80063d0:	2310      	movs	r3, #16
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e06a      	b.n	80064ac <UART_SetConfig+0x348>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <UART_SetConfig+0x2e4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d138      	bne.n	8006452 <UART_SetConfig+0x2ee>
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <UART_SetConfig+0x2cc>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ee:	d017      	beq.n	8006420 <UART_SetConfig+0x2bc>
 80063f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f4:	d82a      	bhi.n	800644c <UART_SetConfig+0x2e8>
 80063f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fa:	d00b      	beq.n	8006414 <UART_SetConfig+0x2b0>
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006400:	d824      	bhi.n	800644c <UART_SetConfig+0x2e8>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <UART_SetConfig+0x2aa>
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	d006      	beq.n	800641a <UART_SetConfig+0x2b6>
 800640c:	e01e      	b.n	800644c <UART_SetConfig+0x2e8>
 800640e:	2300      	movs	r3, #0
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e04b      	b.n	80064ac <UART_SetConfig+0x348>
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e048      	b.n	80064ac <UART_SetConfig+0x348>
 800641a:	2304      	movs	r3, #4
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e045      	b.n	80064ac <UART_SetConfig+0x348>
 8006420:	2308      	movs	r3, #8
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e042      	b.n	80064ac <UART_SetConfig+0x348>
 8006426:	bf00      	nop
 8006428:	efff69f3 	.word	0xefff69f3
 800642c:	40011000 	.word	0x40011000
 8006430:	40023800 	.word	0x40023800
 8006434:	40004400 	.word	0x40004400
 8006438:	40004800 	.word	0x40004800
 800643c:	40004c00 	.word	0x40004c00
 8006440:	40005000 	.word	0x40005000
 8006444:	40011400 	.word	0x40011400
 8006448:	40007800 	.word	0x40007800
 800644c:	2310      	movs	r3, #16
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e02c      	b.n	80064ac <UART_SetConfig+0x348>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a72      	ldr	r2, [pc, #456]	; (8006620 <UART_SetConfig+0x4bc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d125      	bne.n	80064a8 <UART_SetConfig+0x344>
 800645c:	4b71      	ldr	r3, [pc, #452]	; (8006624 <UART_SetConfig+0x4c0>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006466:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800646a:	d017      	beq.n	800649c <UART_SetConfig+0x338>
 800646c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006470:	d817      	bhi.n	80064a2 <UART_SetConfig+0x33e>
 8006472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006476:	d00b      	beq.n	8006490 <UART_SetConfig+0x32c>
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	d811      	bhi.n	80064a2 <UART_SetConfig+0x33e>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <UART_SetConfig+0x326>
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006486:	d006      	beq.n	8006496 <UART_SetConfig+0x332>
 8006488:	e00b      	b.n	80064a2 <UART_SetConfig+0x33e>
 800648a:	2300      	movs	r3, #0
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e00d      	b.n	80064ac <UART_SetConfig+0x348>
 8006490:	2302      	movs	r3, #2
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e00a      	b.n	80064ac <UART_SetConfig+0x348>
 8006496:	2304      	movs	r3, #4
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e007      	b.n	80064ac <UART_SetConfig+0x348>
 800649c:	2308      	movs	r3, #8
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e004      	b.n	80064ac <UART_SetConfig+0x348>
 80064a2:	2310      	movs	r3, #16
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e001      	b.n	80064ac <UART_SetConfig+0x348>
 80064a8:	2310      	movs	r3, #16
 80064aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b4:	d15b      	bne.n	800656e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d828      	bhi.n	800650e <UART_SetConfig+0x3aa>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x360>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800650f 	.word	0x0800650f
 80064e4:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fd fc12 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61b8      	str	r0, [r7, #24]
        break;
 80064ee:	e013      	b.n	8006518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fd fc22 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e00f      	b.n	8006518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <UART_SetConfig+0x4c4>)
 80064fa:	61bb      	str	r3, [r7, #24]
        break;
 80064fc:	e00c      	b.n	8006518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fd faf5 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8006502:	61b8      	str	r0, [r7, #24]
        break;
 8006504:	e008      	b.n	8006518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61bb      	str	r3, [r7, #24]
        break;
 800650c:	e004      	b.n	8006518 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	77bb      	strb	r3, [r7, #30]
        break;
 8006516:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d074      	beq.n	8006608 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	005a      	lsls	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d916      	bls.n	8006568 <UART_SetConfig+0x404>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d212      	bcs.n	8006568 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f023 030f 	bic.w	r3, r3, #15
 800654a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b29a      	uxth	r2, r3
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	4313      	orrs	r3, r2
 800655c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	89fa      	ldrh	r2, [r7, #14]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e04f      	b.n	8006608 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77bb      	strb	r3, [r7, #30]
 800656c:	e04c      	b.n	8006608 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800656e:	7ffb      	ldrb	r3, [r7, #31]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d828      	bhi.n	80065c6 <UART_SetConfig+0x462>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x418>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065c7 	.word	0x080065c7
 800658c:	080065b7 	.word	0x080065b7
 8006590:	080065c7 	.word	0x080065c7
 8006594:	080065c7 	.word	0x080065c7
 8006598:	080065c7 	.word	0x080065c7
 800659c:	080065bf 	.word	0x080065bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fd fbb6 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80065a4:	61b8      	str	r0, [r7, #24]
        break;
 80065a6:	e013      	b.n	80065d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fd fbc6 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80065ac:	61b8      	str	r0, [r7, #24]
        break;
 80065ae:	e00f      	b.n	80065d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <UART_SetConfig+0x4c4>)
 80065b2:	61bb      	str	r3, [r7, #24]
        break;
 80065b4:	e00c      	b.n	80065d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fd fa99 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 80065ba:	61b8      	str	r0, [r7, #24]
        break;
 80065bc:	e008      	b.n	80065d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c2:	61bb      	str	r3, [r7, #24]
        break;
 80065c4:	e004      	b.n	80065d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	77bb      	strb	r3, [r7, #30]
        break;
 80065ce:	bf00      	nop
    }

    if (pclk != 0U)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d018      	beq.n	8006608 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085a      	lsrs	r2, r3, #1
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	441a      	add	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b0f      	cmp	r3, #15
 80065ee:	d909      	bls.n	8006604 <UART_SetConfig+0x4a0>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d205      	bcs.n	8006604 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	e001      	b.n	8006608 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006614:	7fbb      	ldrb	r3, [r7, #30]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40007c00 	.word	0x40007c00
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400

0800662c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672a:	d10a      	bne.n	8006742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006780:	f7fb f842 	bl	8001808 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10e      	bne.n	80067b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f81b 	bl	80067de <UART_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e011      	b.n	80067d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b09c      	sub	sp, #112	; 0x70
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	4613      	mov	r3, r2
 80067ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ee:	e0a7      	b.n	8006940 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	f000 80a3 	beq.w	8006940 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fb f805 	bl	8001808 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <UART_WaitOnFlagUntilTimeout+0x32>
 800680a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680c:	2b00      	cmp	r3, #0
 800680e:	d13f      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006824:	667b      	str	r3, [r7, #100]	; 0x64
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006830:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	663b      	str	r3, [r7, #96]	; 0x60
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006862:	64ba      	str	r2, [r7, #72]	; 0x48
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e068      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d050      	beq.n	8006940 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d148      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e6      	bne.n	80068b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	66bb      	str	r3, [r7, #104]	; 0x68
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69f9      	ldr	r1, [r7, #28]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	61bb      	str	r3, [r7, #24]
   return(result);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e010      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4013      	ands	r3, r2
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	429a      	cmp	r2, r3
 800695c:	f43f af48 	beq.w	80067f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3770      	adds	r7, #112	; 0x70
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800696c:	b480      	push	{r7}
 800696e:	b097      	sub	sp, #92	; 0x5c
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d10e      	bne.n	80069be <UART_Start_Receive_IT+0x52>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <UART_Start_Receive_IT+0x48>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b2:	e02d      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069bc:	e028      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <UART_Start_Receive_IT+0x76>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <UART_Start_Receive_IT+0x6c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d6:	e01b      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	227f      	movs	r2, #127	; 0x7f
 80069dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e0:	e016      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ea:	d10d      	bne.n	8006a08 <UART_Start_Receive_IT+0x9c>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <UART_Start_Receive_IT+0x92>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	227f      	movs	r2, #127	; 0x7f
 80069f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069fc:	e008      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	223f      	movs	r2, #63	; 0x3f
 8006a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a06:	e003      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2222      	movs	r2, #34	; 0x22
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	657b      	str	r3, [r7, #84]	; 0x54
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a40:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e5      	bne.n	8006a20 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d107      	bne.n	8006a6e <UART_Start_Receive_IT+0x102>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <UART_Start_Receive_IT+0x184>)
 8006a6a:	669a      	str	r2, [r3, #104]	; 0x68
 8006a6c:	e002      	b.n	8006a74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <UART_Start_Receive_IT+0x188>)
 8006a72:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d019      	beq.n	8006ab0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_Start_Receive_IT+0x110>
 8006aae:	e018      	b.n	8006ae2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	613b      	str	r3, [r7, #16]
   return(result);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f043 0320 	orr.w	r3, r3, #32
 8006ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	69f9      	ldr	r1, [r7, #28]
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	375c      	adds	r7, #92	; 0x5c
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	08007117 	.word	0x08007117
 8006af4:	08006fb1 	.word	0x08006fb1

08006af8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b096      	sub	sp, #88	; 0x58
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2222      	movs	r2, #34	; 0x22
 8006b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d028      	beq.n	8006b7e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b30:	4a3e      	ldr	r2, [pc, #248]	; (8006c2c <UART_Start_Receive_DMA+0x134>)
 8006b32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <UART_Start_Receive_DMA+0x138>)
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <UART_Start_Receive_DMA+0x13c>)
 8006b42:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b48:	2200      	movs	r2, #0
 8006b4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	4619      	mov	r1, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	f7fa ff93 	bl	8001a8a <HAL_DMA_Start_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e051      	b.n	8006c22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bd8:	637a      	str	r2, [r7, #52]	; 0x34
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c0c:	623a      	str	r2, [r7, #32]
 8006c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	69f9      	ldr	r1, [r7, #28]
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e5      	bne.n	8006bec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3758      	adds	r7, #88	; 0x58
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08006d4d 	.word	0x08006d4d
 8006c30:	08006e75 	.word	0x08006e75
 8006c34:	08006eb3 	.word	0x08006eb3

08006c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b089      	sub	sp, #36	; 0x24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6979      	ldr	r1, [r7, #20]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e6      	bne.n	8006c40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006c78:	bf00      	nop
 8006c7a:	3724      	adds	r7, #36	; 0x24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b095      	sub	sp, #84	; 0x54
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006caa:	643b      	str	r3, [r7, #64]	; 0x40
 8006cac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e6      	bne.n	8006c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e5      	bne.n	8006cbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d118      	bne.n	8006d2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6979      	ldr	r1, [r7, #20]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	613b      	str	r3, [r7, #16]
   return(result);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d40:	bf00      	nop
 8006d42:	3754      	adds	r7, #84	; 0x54
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b09c      	sub	sp, #112	; 0x70
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d071      	beq.n	8006e48 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e6      	bne.n	8006d6c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	667b      	str	r3, [r7, #100]	; 0x64
 8006db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dbe:	647a      	str	r2, [r7, #68]	; 0x44
 8006dc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e5      	bne.n	8006d9e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	623b      	str	r3, [r7, #32]
   return(result);
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de8:	663b      	str	r3, [r7, #96]	; 0x60
 8006dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006df2:	633a      	str	r2, [r7, #48]	; 0x30
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d118      	bne.n	8006e48 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	617b      	str	r3, [r7, #20]
   return(result);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d107      	bne.n	8006e66 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e60:	f7ff f974 	bl	800614c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e64:	e002      	b.n	8006e6c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006e66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e68:	f7ff f952 	bl	8006110 <HAL_UART_RxCpltCallback>
}
 8006e6c:	bf00      	nop
 8006e6e:	3770      	adds	r7, #112	; 0x70
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d109      	bne.n	8006ea4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff f955 	bl	800614c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ea2:	e002      	b.n	8006eaa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff f93d 	bl	8006124 <HAL_UART_RxHalfCpltCallback>
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d109      	bne.n	8006ef0 <UART_DMAError+0x3e>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b21      	cmp	r3, #33	; 0x21
 8006ee0:	d106      	bne.n	8006ef0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f7ff fea4 	bl	8006c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d109      	bne.n	8006f12 <UART_DMAError+0x60>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b22      	cmp	r3, #34	; 0x22
 8006f02:	d106      	bne.n	8006f12 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006f0c:	6978      	ldr	r0, [r7, #20]
 8006f0e:	f7ff feb9 	bl	8006c84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f18:	f043 0210 	orr.w	r2, r3, #16
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f22:	6978      	ldr	r0, [r7, #20]
 8006f24:	f7ff f908 	bl	8006138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f28:	bf00      	nop
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff f8f2 	bl	8006138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e6      	bne.n	8006f64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff f8aa 	bl	80060fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa8:	bf00      	nop
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b096      	sub	sp, #88	; 0x58
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc8:	2b22      	cmp	r3, #34	; 0x22
 8006fca:	f040 8098 	bne.w	80070fe <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006fdc:	b2d9      	uxtb	r1, r3
 8006fde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	400a      	ands	r2, r1
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d17b      	bne.n	800710e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800702a:	653b      	str	r3, [r7, #80]	; 0x50
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007034:	647b      	str	r3, [r7, #68]	; 0x44
 8007036:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800703a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e6      	bne.n	8007016 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	623b      	str	r3, [r7, #32]
   return(result);
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007068:	633a      	str	r2, [r7, #48]	; 0x30
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	2b01      	cmp	r3, #1
 8007096:	d12e      	bne.n	80070f6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	69b9      	ldr	r1, [r7, #24]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d103      	bne.n	80070e6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2210      	movs	r2, #16
 80070e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff f82c 	bl	800614c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070f4:	e00b      	b.n	800710e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff f80a 	bl	8006110 <HAL_UART_RxCpltCallback>
}
 80070fc:	e007      	b.n	800710e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0208 	orr.w	r2, r2, #8
 800710c:	619a      	str	r2, [r3, #24]
}
 800710e:	bf00      	nop
 8007110:	3758      	adds	r7, #88	; 0x58
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b096      	sub	sp, #88	; 0x58
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007124:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712e:	2b22      	cmp	r3, #34	; 0x22
 8007130:	f040 8098 	bne.w	8007264 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007144:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007148:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800714c:	4013      	ands	r3, r2
 800714e:	b29a      	uxth	r2, r3
 8007150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007152:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	1c9a      	adds	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d17b      	bne.n	8007274 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719a:	643b      	str	r3, [r7, #64]	; 0x40
 800719c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e6      	bne.n	800717c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d12e      	bne.n	800725c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	60bb      	str	r3, [r7, #8]
   return(result);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f023 0310 	bic.w	r3, r3, #16
 8007218:	647b      	str	r3, [r7, #68]	; 0x44
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6979      	ldr	r1, [r7, #20]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	613b      	str	r3, [r7, #16]
   return(result);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e6      	bne.n	8007204 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b10      	cmp	r3, #16
 8007242:	d103      	bne.n	800724c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2210      	movs	r2, #16
 800724a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe ff79 	bl	800614c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725a:	e00b      	b.n	8007274 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fe ff57 	bl	8006110 <HAL_UART_RxCpltCallback>
}
 8007262:	e007      	b.n	8007274 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0208 	orr.w	r2, r2, #8
 8007272:	619a      	str	r2, [r3, #24]
}
 8007274:	bf00      	nop
 8007276:	3758      	adds	r7, #88	; 0x58
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800727c:	b084      	sub	sp, #16
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	f107 001c 	add.w	r0, r7, #28
 800728a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	2b01      	cmp	r3, #1
 8007292:	d120      	bne.n	80072d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	4b20      	ldr	r3, [pc, #128]	; (8007328 <USB_CoreInit+0xac>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d105      	bne.n	80072ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa96 	bl	80077fc <USB_CoreReset>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
 80072d4:	e010      	b.n	80072f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa8a 	bl	80077fc <USB_CoreReset>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d10b      	bne.n	8007316 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f043 0206 	orr.w	r2, r3, #6
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f043 0220 	orr.w	r2, r3, #32
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007322:	b004      	add	sp, #16
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	ffbdffbf 	.word	0xffbdffbf

0800732c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f023 0201 	bic.w	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d115      	bne.n	800739c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800737c:	2001      	movs	r0, #1
 800737e:	f7fa fa4f 	bl	8001820 <HAL_Delay>
      ms++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa29 	bl	80077e0 <USB_GetMode>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d01e      	beq.n	80073d2 <USB_SetCurrentMode+0x84>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b31      	cmp	r3, #49	; 0x31
 8007398:	d9f0      	bls.n	800737c <USB_SetCurrentMode+0x2e>
 800739a:	e01a      	b.n	80073d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d115      	bne.n	80073ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ae:	2001      	movs	r0, #1
 80073b0:	f7fa fa36 	bl	8001820 <HAL_Delay>
      ms++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa10 	bl	80077e0 <USB_GetMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <USB_SetCurrentMode+0x84>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b31      	cmp	r3, #49	; 0x31
 80073ca:	d9f0      	bls.n	80073ae <USB_SetCurrentMode+0x60>
 80073cc:	e001      	b.n	80073d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e005      	b.n	80073de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b32      	cmp	r3, #50	; 0x32
 80073d6:	d101      	bne.n	80073dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e8:	b084      	sub	sp, #16
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	e009      	b.n	800741c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3340      	adds	r3, #64	; 0x40
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	2200      	movs	r2, #0
 8007414:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3301      	adds	r3, #1
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b0e      	cmp	r3, #14
 8007420:	d9f2      	bls.n	8007408 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11c      	bne.n	8007462 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007436:	f043 0302 	orr.w	r3, r3, #2
 800743a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e005      	b.n	800746e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007480:	4619      	mov	r1, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007488:	461a      	mov	r2, r3
 800748a:	680b      	ldr	r3, [r1, #0]
 800748c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10c      	bne.n	80074ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800749a:	2100      	movs	r1, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f965 	bl	800776c <USB_SetDevSpeed>
 80074a2:	e008      	b.n	80074b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074a4:	2101      	movs	r1, #1
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f960 	bl	800776c <USB_SetDevSpeed>
 80074ac:	e003      	b.n	80074b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ae:	2103      	movs	r1, #3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f95b 	bl	800776c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074b6:	2110      	movs	r1, #16
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8f3 	bl	80076a4 <USB_FlushTxFifo>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f91f 	bl	800770c <USB_FlushRxFifo>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	461a      	mov	r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ea:	461a      	mov	r2, r3
 80074ec:	2300      	movs	r3, #0
 80074ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	461a      	mov	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	e043      	b.n	800758a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007518:	d118      	bne.n	800754c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752c:	461a      	mov	r2, r3
 800752e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	e013      	b.n	800755e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007542:	461a      	mov	r2, r3
 8007544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e008      	b.n	800755e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	461a      	mov	r2, r3
 800756c:	2300      	movs	r3, #0
 800756e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757c:	461a      	mov	r2, r3
 800757e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007582:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3301      	adds	r3, #1
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	429a      	cmp	r2, r3
 8007590:	d3b7      	bcc.n	8007502 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e043      	b.n	8007620 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ae:	d118      	bne.n	80075e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c2:	461a      	mov	r2, r3
 80075c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e013      	b.n	80075f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	461a      	mov	r2, r3
 80075da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e008      	b.n	80075f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	2300      	movs	r3, #0
 8007604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007618:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3b7      	bcc.n	8007598 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007648:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f043 0210 	orr.w	r2, r3, #16
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <USB_DevInit+0x2b4>)
 8007662:	4313      	orrs	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f043 0208 	orr.w	r2, r3, #8
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800767a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d105      	bne.n	800768c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <USB_DevInit+0x2b8>)
 8007686:	4313      	orrs	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007698:	b004      	add	sp, #16
 800769a:	4770      	bx	lr
 800769c:	803c3800 	.word	0x803c3800
 80076a0:	40000004 	.word	0x40000004

080076a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4a13      	ldr	r2, [pc, #76]	; (8007708 <USB_FlushTxFifo+0x64>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d901      	bls.n	80076c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e01b      	b.n	80076fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	daf2      	bge.n	80076b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	019b      	lsls	r3, r3, #6
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <USB_FlushTxFifo+0x64>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d901      	bls.n	80076ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e006      	b.n	80076fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d0f0      	beq.n	80076dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	00030d40 	.word	0x00030d40

0800770c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a11      	ldr	r2, [pc, #68]	; (8007768 <USB_FlushRxFifo+0x5c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d901      	bls.n	800772a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e018      	b.n	800775c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	daf2      	bge.n	8007718 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2210      	movs	r2, #16
 800773a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <USB_FlushRxFifo+0x5c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e006      	b.n	800775c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b10      	cmp	r3, #16
 8007758:	d0f0      	beq.n	800773c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	00030d40 	.word	0x00030d40

0800776c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778c:	4313      	orrs	r3, r2
 800778e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077b8:	f023 0303 	bic.w	r3, r3, #3
 80077bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077cc:	f043 0302 	orr.w	r3, r3, #2
 80077d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	f003 0301 	and.w	r3, r3, #1
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <USB_CoreReset+0x64>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e01b      	b.n	8007852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	daf2      	bge.n	8007808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f043 0201 	orr.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <USB_CoreReset+0x64>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d901      	bls.n	8007844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d0f0      	beq.n	8007832 <USB_CoreReset+0x36>

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	00030d40 	.word	0x00030d40

08007864 <sniprintf>:
 8007864:	b40c      	push	{r2, r3}
 8007866:	b530      	push	{r4, r5, lr}
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <sniprintf+0x64>)
 800786a:	1e0c      	subs	r4, r1, #0
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	b09d      	sub	sp, #116	; 0x74
 8007870:	da08      	bge.n	8007884 <sniprintf+0x20>
 8007872:	238b      	movs	r3, #139	; 0x8b
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	b01d      	add	sp, #116	; 0x74
 800787c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007880:	b002      	add	sp, #8
 8007882:	4770      	bx	lr
 8007884:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800788c:	bf14      	ite	ne
 800788e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007892:	4623      	moveq	r3, r4
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078a6:	ab21      	add	r3, sp, #132	; 0x84
 80078a8:	a902      	add	r1, sp, #8
 80078aa:	4628      	mov	r0, r5
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f000 f993 	bl	8007bd8 <_svfiprintf_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	bfbc      	itt	lt
 80078b6:	238b      	movlt	r3, #139	; 0x8b
 80078b8:	602b      	strlt	r3, [r5, #0]
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d0dd      	beq.n	800787a <sniprintf+0x16>
 80078be:	9b02      	ldr	r3, [sp, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e7d9      	b.n	800787a <sniprintf+0x16>
 80078c6:	bf00      	nop
 80078c8:	20000060 	.word	0x20000060

080078cc <memset>:
 80078cc:	4402      	add	r2, r0
 80078ce:	4603      	mov	r3, r0
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d100      	bne.n	80078d6 <memset+0xa>
 80078d4:	4770      	bx	lr
 80078d6:	f803 1b01 	strb.w	r1, [r3], #1
 80078da:	e7f9      	b.n	80078d0 <memset+0x4>

080078dc <__errno>:
 80078dc:	4b01      	ldr	r3, [pc, #4]	; (80078e4 <__errno+0x8>)
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000060 	.word	0x20000060

080078e8 <__libc_init_array>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4d0d      	ldr	r5, [pc, #52]	; (8007920 <__libc_init_array+0x38>)
 80078ec:	4c0d      	ldr	r4, [pc, #52]	; (8007924 <__libc_init_array+0x3c>)
 80078ee:	1b64      	subs	r4, r4, r5
 80078f0:	10a4      	asrs	r4, r4, #2
 80078f2:	2600      	movs	r6, #0
 80078f4:	42a6      	cmp	r6, r4
 80078f6:	d109      	bne.n	800790c <__libc_init_array+0x24>
 80078f8:	4d0b      	ldr	r5, [pc, #44]	; (8007928 <__libc_init_array+0x40>)
 80078fa:	4c0c      	ldr	r4, [pc, #48]	; (800792c <__libc_init_array+0x44>)
 80078fc:	f000 fc6a 	bl	80081d4 <_init>
 8007900:	1b64      	subs	r4, r4, r5
 8007902:	10a4      	asrs	r4, r4, #2
 8007904:	2600      	movs	r6, #0
 8007906:	42a6      	cmp	r6, r4
 8007908:	d105      	bne.n	8007916 <__libc_init_array+0x2e>
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007910:	4798      	blx	r3
 8007912:	3601      	adds	r6, #1
 8007914:	e7ee      	b.n	80078f4 <__libc_init_array+0xc>
 8007916:	f855 3b04 	ldr.w	r3, [r5], #4
 800791a:	4798      	blx	r3
 800791c:	3601      	adds	r6, #1
 800791e:	e7f2      	b.n	8007906 <__libc_init_array+0x1e>
 8007920:	08008244 	.word	0x08008244
 8007924:	08008244 	.word	0x08008244
 8007928:	08008244 	.word	0x08008244
 800792c:	08008248 	.word	0x08008248

08007930 <__retarget_lock_acquire_recursive>:
 8007930:	4770      	bx	lr

08007932 <__retarget_lock_release_recursive>:
 8007932:	4770      	bx	lr

08007934 <_free_r>:
 8007934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007936:	2900      	cmp	r1, #0
 8007938:	d044      	beq.n	80079c4 <_free_r+0x90>
 800793a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793e:	9001      	str	r0, [sp, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f1a1 0404 	sub.w	r4, r1, #4
 8007946:	bfb8      	it	lt
 8007948:	18e4      	addlt	r4, r4, r3
 800794a:	f000 f8df 	bl	8007b0c <__malloc_lock>
 800794e:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <_free_r+0x94>)
 8007950:	9801      	ldr	r0, [sp, #4]
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	b933      	cbnz	r3, 8007964 <_free_r+0x30>
 8007956:	6063      	str	r3, [r4, #4]
 8007958:	6014      	str	r4, [r2, #0]
 800795a:	b003      	add	sp, #12
 800795c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007960:	f000 b8da 	b.w	8007b18 <__malloc_unlock>
 8007964:	42a3      	cmp	r3, r4
 8007966:	d908      	bls.n	800797a <_free_r+0x46>
 8007968:	6825      	ldr	r5, [r4, #0]
 800796a:	1961      	adds	r1, r4, r5
 800796c:	428b      	cmp	r3, r1
 800796e:	bf01      	itttt	eq
 8007970:	6819      	ldreq	r1, [r3, #0]
 8007972:	685b      	ldreq	r3, [r3, #4]
 8007974:	1949      	addeq	r1, r1, r5
 8007976:	6021      	streq	r1, [r4, #0]
 8007978:	e7ed      	b.n	8007956 <_free_r+0x22>
 800797a:	461a      	mov	r2, r3
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b10b      	cbz	r3, 8007984 <_free_r+0x50>
 8007980:	42a3      	cmp	r3, r4
 8007982:	d9fa      	bls.n	800797a <_free_r+0x46>
 8007984:	6811      	ldr	r1, [r2, #0]
 8007986:	1855      	adds	r5, r2, r1
 8007988:	42a5      	cmp	r5, r4
 800798a:	d10b      	bne.n	80079a4 <_free_r+0x70>
 800798c:	6824      	ldr	r4, [r4, #0]
 800798e:	4421      	add	r1, r4
 8007990:	1854      	adds	r4, r2, r1
 8007992:	42a3      	cmp	r3, r4
 8007994:	6011      	str	r1, [r2, #0]
 8007996:	d1e0      	bne.n	800795a <_free_r+0x26>
 8007998:	681c      	ldr	r4, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	6053      	str	r3, [r2, #4]
 800799e:	440c      	add	r4, r1
 80079a0:	6014      	str	r4, [r2, #0]
 80079a2:	e7da      	b.n	800795a <_free_r+0x26>
 80079a4:	d902      	bls.n	80079ac <_free_r+0x78>
 80079a6:	230c      	movs	r3, #12
 80079a8:	6003      	str	r3, [r0, #0]
 80079aa:	e7d6      	b.n	800795a <_free_r+0x26>
 80079ac:	6825      	ldr	r5, [r4, #0]
 80079ae:	1961      	adds	r1, r4, r5
 80079b0:	428b      	cmp	r3, r1
 80079b2:	bf04      	itt	eq
 80079b4:	6819      	ldreq	r1, [r3, #0]
 80079b6:	685b      	ldreq	r3, [r3, #4]
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	bf04      	itt	eq
 80079bc:	1949      	addeq	r1, r1, r5
 80079be:	6021      	streq	r1, [r4, #0]
 80079c0:	6054      	str	r4, [r2, #4]
 80079c2:	e7ca      	b.n	800795a <_free_r+0x26>
 80079c4:	b003      	add	sp, #12
 80079c6:	bd30      	pop	{r4, r5, pc}
 80079c8:	20001854 	.word	0x20001854

080079cc <sbrk_aligned>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	4e0e      	ldr	r6, [pc, #56]	; (8007a08 <sbrk_aligned+0x3c>)
 80079d0:	460c      	mov	r4, r1
 80079d2:	6831      	ldr	r1, [r6, #0]
 80079d4:	4605      	mov	r5, r0
 80079d6:	b911      	cbnz	r1, 80079de <sbrk_aligned+0x12>
 80079d8:	f000 fba6 	bl	8008128 <_sbrk_r>
 80079dc:	6030      	str	r0, [r6, #0]
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 fba1 	bl	8008128 <_sbrk_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d00a      	beq.n	8007a00 <sbrk_aligned+0x34>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d007      	beq.n	8007a04 <sbrk_aligned+0x38>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fb96 	bl	8008128 <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d101      	bne.n	8007a04 <sbrk_aligned+0x38>
 8007a00:	f04f 34ff 	mov.w	r4, #4294967295
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	20001858 	.word	0x20001858

08007a0c <_malloc_r>:
 8007a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	1ccd      	adds	r5, r1, #3
 8007a12:	f025 0503 	bic.w	r5, r5, #3
 8007a16:	3508      	adds	r5, #8
 8007a18:	2d0c      	cmp	r5, #12
 8007a1a:	bf38      	it	cc
 8007a1c:	250c      	movcc	r5, #12
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	4607      	mov	r7, r0
 8007a22:	db01      	blt.n	8007a28 <_malloc_r+0x1c>
 8007a24:	42a9      	cmp	r1, r5
 8007a26:	d905      	bls.n	8007a34 <_malloc_r+0x28>
 8007a28:	230c      	movs	r3, #12
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	4630      	mov	r0, r6
 8007a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b08 <_malloc_r+0xfc>
 8007a38:	f000 f868 	bl	8007b0c <__malloc_lock>
 8007a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a40:	461c      	mov	r4, r3
 8007a42:	bb5c      	cbnz	r4, 8007a9c <_malloc_r+0x90>
 8007a44:	4629      	mov	r1, r5
 8007a46:	4638      	mov	r0, r7
 8007a48:	f7ff ffc0 	bl	80079cc <sbrk_aligned>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	4604      	mov	r4, r0
 8007a50:	d155      	bne.n	8007afe <_malloc_r+0xf2>
 8007a52:	f8d8 4000 	ldr.w	r4, [r8]
 8007a56:	4626      	mov	r6, r4
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	d145      	bne.n	8007ae8 <_malloc_r+0xdc>
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	d048      	beq.n	8007af2 <_malloc_r+0xe6>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	4631      	mov	r1, r6
 8007a64:	4638      	mov	r0, r7
 8007a66:	eb04 0903 	add.w	r9, r4, r3
 8007a6a:	f000 fb5d 	bl	8008128 <_sbrk_r>
 8007a6e:	4581      	cmp	r9, r0
 8007a70:	d13f      	bne.n	8007af2 <_malloc_r+0xe6>
 8007a72:	6821      	ldr	r1, [r4, #0]
 8007a74:	1a6d      	subs	r5, r5, r1
 8007a76:	4629      	mov	r1, r5
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ffa7 	bl	80079cc <sbrk_aligned>
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d037      	beq.n	8007af2 <_malloc_r+0xe6>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	442b      	add	r3, r5
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d038      	beq.n	8007b02 <_malloc_r+0xf6>
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	42a2      	cmp	r2, r4
 8007a94:	d12b      	bne.n	8007aee <_malloc_r+0xe2>
 8007a96:	2200      	movs	r2, #0
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	e00f      	b.n	8007abc <_malloc_r+0xb0>
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	1b52      	subs	r2, r2, r5
 8007aa0:	d41f      	bmi.n	8007ae2 <_malloc_r+0xd6>
 8007aa2:	2a0b      	cmp	r2, #11
 8007aa4:	d917      	bls.n	8007ad6 <_malloc_r+0xca>
 8007aa6:	1961      	adds	r1, r4, r5
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	6025      	str	r5, [r4, #0]
 8007aac:	bf18      	it	ne
 8007aae:	6059      	strne	r1, [r3, #4]
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	bf08      	it	eq
 8007ab4:	f8c8 1000 	streq.w	r1, [r8]
 8007ab8:	5162      	str	r2, [r4, r5]
 8007aba:	604b      	str	r3, [r1, #4]
 8007abc:	4638      	mov	r0, r7
 8007abe:	f104 060b 	add.w	r6, r4, #11
 8007ac2:	f000 f829 	bl	8007b18 <__malloc_unlock>
 8007ac6:	f026 0607 	bic.w	r6, r6, #7
 8007aca:	1d23      	adds	r3, r4, #4
 8007acc:	1af2      	subs	r2, r6, r3
 8007ace:	d0ae      	beq.n	8007a2e <_malloc_r+0x22>
 8007ad0:	1b9b      	subs	r3, r3, r6
 8007ad2:	50a3      	str	r3, [r4, r2]
 8007ad4:	e7ab      	b.n	8007a2e <_malloc_r+0x22>
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	6862      	ldr	r2, [r4, #4]
 8007ada:	d1dd      	bne.n	8007a98 <_malloc_r+0x8c>
 8007adc:	f8c8 2000 	str.w	r2, [r8]
 8007ae0:	e7ec      	b.n	8007abc <_malloc_r+0xb0>
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	6864      	ldr	r4, [r4, #4]
 8007ae6:	e7ac      	b.n	8007a42 <_malloc_r+0x36>
 8007ae8:	4634      	mov	r4, r6
 8007aea:	6876      	ldr	r6, [r6, #4]
 8007aec:	e7b4      	b.n	8007a58 <_malloc_r+0x4c>
 8007aee:	4613      	mov	r3, r2
 8007af0:	e7cc      	b.n	8007a8c <_malloc_r+0x80>
 8007af2:	230c      	movs	r3, #12
 8007af4:	603b      	str	r3, [r7, #0]
 8007af6:	4638      	mov	r0, r7
 8007af8:	f000 f80e 	bl	8007b18 <__malloc_unlock>
 8007afc:	e797      	b.n	8007a2e <_malloc_r+0x22>
 8007afe:	6025      	str	r5, [r4, #0]
 8007b00:	e7dc      	b.n	8007abc <_malloc_r+0xb0>
 8007b02:	605b      	str	r3, [r3, #4]
 8007b04:	deff      	udf	#255	; 0xff
 8007b06:	bf00      	nop
 8007b08:	20001854 	.word	0x20001854

08007b0c <__malloc_lock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__malloc_lock+0x8>)
 8007b0e:	f7ff bf0f 	b.w	8007930 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	20001850 	.word	0x20001850

08007b18 <__malloc_unlock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__malloc_unlock+0x8>)
 8007b1a:	f7ff bf0a 	b.w	8007932 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20001850 	.word	0x20001850

08007b24 <__ssputs_r>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	688e      	ldr	r6, [r1, #8]
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	42be      	cmp	r6, r7
 8007b2e:	680b      	ldr	r3, [r1, #0]
 8007b30:	4682      	mov	sl, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4690      	mov	r8, r2
 8007b36:	d82c      	bhi.n	8007b92 <__ssputs_r+0x6e>
 8007b38:	898a      	ldrh	r2, [r1, #12]
 8007b3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b3e:	d026      	beq.n	8007b8e <__ssputs_r+0x6a>
 8007b40:	6965      	ldr	r5, [r4, #20]
 8007b42:	6909      	ldr	r1, [r1, #16]
 8007b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b48:	eba3 0901 	sub.w	r9, r3, r1
 8007b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b50:	1c7b      	adds	r3, r7, #1
 8007b52:	444b      	add	r3, r9
 8007b54:	106d      	asrs	r5, r5, #1
 8007b56:	429d      	cmp	r5, r3
 8007b58:	bf38      	it	cc
 8007b5a:	461d      	movcc	r5, r3
 8007b5c:	0553      	lsls	r3, r2, #21
 8007b5e:	d527      	bpl.n	8007bb0 <__ssputs_r+0x8c>
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7ff ff53 	bl	8007a0c <_malloc_r>
 8007b66:	4606      	mov	r6, r0
 8007b68:	b360      	cbz	r0, 8007bc4 <__ssputs_r+0xa0>
 8007b6a:	6921      	ldr	r1, [r4, #16]
 8007b6c:	464a      	mov	r2, r9
 8007b6e:	f000 faeb 	bl	8008148 <memcpy>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	6126      	str	r6, [r4, #16]
 8007b80:	6165      	str	r5, [r4, #20]
 8007b82:	444e      	add	r6, r9
 8007b84:	eba5 0509 	sub.w	r5, r5, r9
 8007b88:	6026      	str	r6, [r4, #0]
 8007b8a:	60a5      	str	r5, [r4, #8]
 8007b8c:	463e      	mov	r6, r7
 8007b8e:	42be      	cmp	r6, r7
 8007b90:	d900      	bls.n	8007b94 <__ssputs_r+0x70>
 8007b92:	463e      	mov	r6, r7
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	4632      	mov	r2, r6
 8007b98:	4641      	mov	r1, r8
 8007b9a:	f000 faab 	bl	80080f4 <memmove>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	1b9b      	subs	r3, r3, r6
 8007ba2:	60a3      	str	r3, [r4, #8]
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	4433      	add	r3, r6
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	2000      	movs	r0, #0
 8007bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	f000 fad7 	bl	8008164 <_realloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d1e0      	bne.n	8007b7e <__ssputs_r+0x5a>
 8007bbc:	6921      	ldr	r1, [r4, #16]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f7ff feb8 	bl	8007934 <_free_r>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	f8ca 3000 	str.w	r3, [sl]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	e7e9      	b.n	8007bac <__ssputs_r+0x88>

08007bd8 <_svfiprintf_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	4698      	mov	r8, r3
 8007bde:	898b      	ldrh	r3, [r1, #12]
 8007be0:	061b      	lsls	r3, r3, #24
 8007be2:	b09d      	sub	sp, #116	; 0x74
 8007be4:	4607      	mov	r7, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	4614      	mov	r4, r2
 8007bea:	d50e      	bpl.n	8007c0a <_svfiprintf_r+0x32>
 8007bec:	690b      	ldr	r3, [r1, #16]
 8007bee:	b963      	cbnz	r3, 8007c0a <_svfiprintf_r+0x32>
 8007bf0:	2140      	movs	r1, #64	; 0x40
 8007bf2:	f7ff ff0b 	bl	8007a0c <_malloc_r>
 8007bf6:	6028      	str	r0, [r5, #0]
 8007bf8:	6128      	str	r0, [r5, #16]
 8007bfa:	b920      	cbnz	r0, 8007c06 <_svfiprintf_r+0x2e>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e0d0      	b.n	8007da8 <_svfiprintf_r+0x1d0>
 8007c06:	2340      	movs	r3, #64	; 0x40
 8007c08:	616b      	str	r3, [r5, #20]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0e:	2320      	movs	r3, #32
 8007c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007dc0 <_svfiprintf_r+0x1e8>
 8007c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c22:	f04f 0901 	mov.w	r9, #1
 8007c26:	4623      	mov	r3, r4
 8007c28:	469a      	mov	sl, r3
 8007c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2e:	b10a      	cbz	r2, 8007c34 <_svfiprintf_r+0x5c>
 8007c30:	2a25      	cmp	r2, #37	; 0x25
 8007c32:	d1f9      	bne.n	8007c28 <_svfiprintf_r+0x50>
 8007c34:	ebba 0b04 	subs.w	fp, sl, r4
 8007c38:	d00b      	beq.n	8007c52 <_svfiprintf_r+0x7a>
 8007c3a:	465b      	mov	r3, fp
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ff6f 	bl	8007b24 <__ssputs_r>
 8007c46:	3001      	adds	r0, #1
 8007c48:	f000 80a9 	beq.w	8007d9e <_svfiprintf_r+0x1c6>
 8007c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4e:	445a      	add	r2, fp
 8007c50:	9209      	str	r2, [sp, #36]	; 0x24
 8007c52:	f89a 3000 	ldrb.w	r3, [sl]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80a1 	beq.w	8007d9e <_svfiprintf_r+0x1c6>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c66:	f10a 0a01 	add.w	sl, sl, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	9307      	str	r3, [sp, #28]
 8007c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c72:	931a      	str	r3, [sp, #104]	; 0x68
 8007c74:	4654      	mov	r4, sl
 8007c76:	2205      	movs	r2, #5
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	4850      	ldr	r0, [pc, #320]	; (8007dc0 <_svfiprintf_r+0x1e8>)
 8007c7e:	f7f8 fac7 	bl	8000210 <memchr>
 8007c82:	9a04      	ldr	r2, [sp, #16]
 8007c84:	b9d8      	cbnz	r0, 8007cbe <_svfiprintf_r+0xe6>
 8007c86:	06d0      	lsls	r0, r2, #27
 8007c88:	bf44      	itt	mi
 8007c8a:	2320      	movmi	r3, #32
 8007c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c90:	0711      	lsls	r1, r2, #28
 8007c92:	bf44      	itt	mi
 8007c94:	232b      	movmi	r3, #43	; 0x2b
 8007c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca0:	d015      	beq.n	8007cce <_svfiprintf_r+0xf6>
 8007ca2:	9a07      	ldr	r2, [sp, #28]
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f04f 0c0a 	mov.w	ip, #10
 8007cac:	4621      	mov	r1, r4
 8007cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb2:	3b30      	subs	r3, #48	; 0x30
 8007cb4:	2b09      	cmp	r3, #9
 8007cb6:	d94d      	bls.n	8007d54 <_svfiprintf_r+0x17c>
 8007cb8:	b1b0      	cbz	r0, 8007ce8 <_svfiprintf_r+0x110>
 8007cba:	9207      	str	r2, [sp, #28]
 8007cbc:	e014      	b.n	8007ce8 <_svfiprintf_r+0x110>
 8007cbe:	eba0 0308 	sub.w	r3, r0, r8
 8007cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	46a2      	mov	sl, r4
 8007ccc:	e7d2      	b.n	8007c74 <_svfiprintf_r+0x9c>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	1d19      	adds	r1, r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	9103      	str	r1, [sp, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfbb      	ittet	lt
 8007cda:	425b      	neglt	r3, r3
 8007cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce0:	9307      	strge	r3, [sp, #28]
 8007ce2:	9307      	strlt	r3, [sp, #28]
 8007ce4:	bfb8      	it	lt
 8007ce6:	9204      	strlt	r2, [sp, #16]
 8007ce8:	7823      	ldrb	r3, [r4, #0]
 8007cea:	2b2e      	cmp	r3, #46	; 0x2e
 8007cec:	d10c      	bne.n	8007d08 <_svfiprintf_r+0x130>
 8007cee:	7863      	ldrb	r3, [r4, #1]
 8007cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf2:	d134      	bne.n	8007d5e <_svfiprintf_r+0x186>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	1d1a      	adds	r2, r3, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	9203      	str	r2, [sp, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfb8      	it	lt
 8007d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d04:	3402      	adds	r4, #2
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007dd0 <_svfiprintf_r+0x1f8>
 8007d0c:	7821      	ldrb	r1, [r4, #0]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	4650      	mov	r0, sl
 8007d12:	f7f8 fa7d 	bl	8000210 <memchr>
 8007d16:	b138      	cbz	r0, 8007d28 <_svfiprintf_r+0x150>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	eba0 000a 	sub.w	r0, r0, sl
 8007d1e:	2240      	movs	r2, #64	; 0x40
 8007d20:	4082      	lsls	r2, r0
 8007d22:	4313      	orrs	r3, r2
 8007d24:	3401      	adds	r4, #1
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2c:	4825      	ldr	r0, [pc, #148]	; (8007dc4 <_svfiprintf_r+0x1ec>)
 8007d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d32:	2206      	movs	r2, #6
 8007d34:	f7f8 fa6c 	bl	8000210 <memchr>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d038      	beq.n	8007dae <_svfiprintf_r+0x1d6>
 8007d3c:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <_svfiprintf_r+0x1f0>)
 8007d3e:	bb1b      	cbnz	r3, 8007d88 <_svfiprintf_r+0x1b0>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	3307      	adds	r3, #7
 8007d44:	f023 0307 	bic.w	r3, r3, #7
 8007d48:	3308      	adds	r3, #8
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4e:	4433      	add	r3, r6
 8007d50:	9309      	str	r3, [sp, #36]	; 0x24
 8007d52:	e768      	b.n	8007c26 <_svfiprintf_r+0x4e>
 8007d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d58:	460c      	mov	r4, r1
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	e7a6      	b.n	8007cac <_svfiprintf_r+0xd4>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	3401      	adds	r4, #1
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f04f 0c0a 	mov.w	ip, #10
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d70:	3a30      	subs	r2, #48	; 0x30
 8007d72:	2a09      	cmp	r2, #9
 8007d74:	d903      	bls.n	8007d7e <_svfiprintf_r+0x1a6>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0c6      	beq.n	8007d08 <_svfiprintf_r+0x130>
 8007d7a:	9105      	str	r1, [sp, #20]
 8007d7c:	e7c4      	b.n	8007d08 <_svfiprintf_r+0x130>
 8007d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d82:	4604      	mov	r4, r0
 8007d84:	2301      	movs	r3, #1
 8007d86:	e7f0      	b.n	8007d6a <_svfiprintf_r+0x192>
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <_svfiprintf_r+0x1f4>)
 8007d90:	a904      	add	r1, sp, #16
 8007d92:	4638      	mov	r0, r7
 8007d94:	f3af 8000 	nop.w
 8007d98:	1c42      	adds	r2, r0, #1
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	d1d6      	bne.n	8007d4c <_svfiprintf_r+0x174>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	065b      	lsls	r3, r3, #25
 8007da2:	f53f af2d 	bmi.w	8007c00 <_svfiprintf_r+0x28>
 8007da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007da8:	b01d      	add	sp, #116	; 0x74
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	462a      	mov	r2, r5
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <_svfiprintf_r+0x1f4>)
 8007db6:	a904      	add	r1, sp, #16
 8007db8:	4638      	mov	r0, r7
 8007dba:	f000 f879 	bl	8007eb0 <_printf_i>
 8007dbe:	e7eb      	b.n	8007d98 <_svfiprintf_r+0x1c0>
 8007dc0:	08008208 	.word	0x08008208
 8007dc4:	08008212 	.word	0x08008212
 8007dc8:	00000000 	.word	0x00000000
 8007dcc:	08007b25 	.word	0x08007b25
 8007dd0:	0800820e 	.word	0x0800820e

08007dd4 <_printf_common>:
 8007dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	4616      	mov	r6, r2
 8007dda:	4699      	mov	r9, r3
 8007ddc:	688a      	ldr	r2, [r1, #8]
 8007dde:	690b      	ldr	r3, [r1, #16]
 8007de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007de4:	4293      	cmp	r3, r2
 8007de6:	bfb8      	it	lt
 8007de8:	4613      	movlt	r3, r2
 8007dea:	6033      	str	r3, [r6, #0]
 8007dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007df0:	4607      	mov	r7, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	b10a      	cbz	r2, 8007dfa <_printf_common+0x26>
 8007df6:	3301      	adds	r3, #1
 8007df8:	6033      	str	r3, [r6, #0]
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	0699      	lsls	r1, r3, #26
 8007dfe:	bf42      	ittt	mi
 8007e00:	6833      	ldrmi	r3, [r6, #0]
 8007e02:	3302      	addmi	r3, #2
 8007e04:	6033      	strmi	r3, [r6, #0]
 8007e06:	6825      	ldr	r5, [r4, #0]
 8007e08:	f015 0506 	ands.w	r5, r5, #6
 8007e0c:	d106      	bne.n	8007e1c <_printf_common+0x48>
 8007e0e:	f104 0a19 	add.w	sl, r4, #25
 8007e12:	68e3      	ldr	r3, [r4, #12]
 8007e14:	6832      	ldr	r2, [r6, #0]
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	dc26      	bgt.n	8007e6a <_printf_common+0x96>
 8007e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e20:	1e13      	subs	r3, r2, #0
 8007e22:	6822      	ldr	r2, [r4, #0]
 8007e24:	bf18      	it	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	0692      	lsls	r2, r2, #26
 8007e2a:	d42b      	bmi.n	8007e84 <_printf_common+0xb0>
 8007e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e30:	4649      	mov	r1, r9
 8007e32:	4638      	mov	r0, r7
 8007e34:	47c0      	blx	r8
 8007e36:	3001      	adds	r0, #1
 8007e38:	d01e      	beq.n	8007e78 <_printf_common+0xa4>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	f003 0306 	and.w	r3, r3, #6
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	bf02      	ittt	eq
 8007e46:	68e5      	ldreq	r5, [r4, #12]
 8007e48:	6833      	ldreq	r3, [r6, #0]
 8007e4a:	1aed      	subeq	r5, r5, r3
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	bf0c      	ite	eq
 8007e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e54:	2500      	movne	r5, #0
 8007e56:	4293      	cmp	r3, r2
 8007e58:	bfc4      	itt	gt
 8007e5a:	1a9b      	subgt	r3, r3, r2
 8007e5c:	18ed      	addgt	r5, r5, r3
 8007e5e:	2600      	movs	r6, #0
 8007e60:	341a      	adds	r4, #26
 8007e62:	42b5      	cmp	r5, r6
 8007e64:	d11a      	bne.n	8007e9c <_printf_common+0xc8>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e008      	b.n	8007e7c <_printf_common+0xa8>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4638      	mov	r0, r7
 8007e72:	47c0      	blx	r8
 8007e74:	3001      	adds	r0, #1
 8007e76:	d103      	bne.n	8007e80 <_printf_common+0xac>
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e80:	3501      	adds	r5, #1
 8007e82:	e7c6      	b.n	8007e12 <_printf_common+0x3e>
 8007e84:	18e1      	adds	r1, r4, r3
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	2030      	movs	r0, #48	; 0x30
 8007e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e8e:	4422      	add	r2, r4
 8007e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e98:	3302      	adds	r3, #2
 8007e9a:	e7c7      	b.n	8007e2c <_printf_common+0x58>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c0      	blx	r8
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d0e6      	beq.n	8007e78 <_printf_common+0xa4>
 8007eaa:	3601      	adds	r6, #1
 8007eac:	e7d9      	b.n	8007e62 <_printf_common+0x8e>
	...

08007eb0 <_printf_i>:
 8007eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	7e0f      	ldrb	r7, [r1, #24]
 8007eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007eb8:	2f78      	cmp	r7, #120	; 0x78
 8007eba:	4691      	mov	r9, r2
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	469a      	mov	sl, r3
 8007ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ec6:	d807      	bhi.n	8007ed8 <_printf_i+0x28>
 8007ec8:	2f62      	cmp	r7, #98	; 0x62
 8007eca:	d80a      	bhi.n	8007ee2 <_printf_i+0x32>
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	f000 80d4 	beq.w	800807a <_printf_i+0x1ca>
 8007ed2:	2f58      	cmp	r7, #88	; 0x58
 8007ed4:	f000 80c0 	beq.w	8008058 <_printf_i+0x1a8>
 8007ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ee0:	e03a      	b.n	8007f58 <_printf_i+0xa8>
 8007ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ee6:	2b15      	cmp	r3, #21
 8007ee8:	d8f6      	bhi.n	8007ed8 <_printf_i+0x28>
 8007eea:	a101      	add	r1, pc, #4	; (adr r1, 8007ef0 <_printf_i+0x40>)
 8007eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ef0:	08007f49 	.word	0x08007f49
 8007ef4:	08007f5d 	.word	0x08007f5d
 8007ef8:	08007ed9 	.word	0x08007ed9
 8007efc:	08007ed9 	.word	0x08007ed9
 8007f00:	08007ed9 	.word	0x08007ed9
 8007f04:	08007ed9 	.word	0x08007ed9
 8007f08:	08007f5d 	.word	0x08007f5d
 8007f0c:	08007ed9 	.word	0x08007ed9
 8007f10:	08007ed9 	.word	0x08007ed9
 8007f14:	08007ed9 	.word	0x08007ed9
 8007f18:	08007ed9 	.word	0x08007ed9
 8007f1c:	08008061 	.word	0x08008061
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	0800801b 	.word	0x0800801b
 8007f28:	08007ed9 	.word	0x08007ed9
 8007f2c:	08007ed9 	.word	0x08007ed9
 8007f30:	08008083 	.word	0x08008083
 8007f34:	08007ed9 	.word	0x08007ed9
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007ed9 	.word	0x08007ed9
 8007f40:	08007ed9 	.word	0x08007ed9
 8007f44:	08008023 	.word	0x08008023
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	602a      	str	r2, [r5, #0]
 8007f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e09f      	b.n	800809c <_printf_i+0x1ec>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	0607      	lsls	r7, r0, #24
 8007f62:	f103 0104 	add.w	r1, r3, #4
 8007f66:	6029      	str	r1, [r5, #0]
 8007f68:	d501      	bpl.n	8007f6e <_printf_i+0xbe>
 8007f6a:	681e      	ldr	r6, [r3, #0]
 8007f6c:	e003      	b.n	8007f76 <_printf_i+0xc6>
 8007f6e:	0646      	lsls	r6, r0, #25
 8007f70:	d5fb      	bpl.n	8007f6a <_printf_i+0xba>
 8007f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	da03      	bge.n	8007f82 <_printf_i+0xd2>
 8007f7a:	232d      	movs	r3, #45	; 0x2d
 8007f7c:	4276      	negs	r6, r6
 8007f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f82:	485a      	ldr	r0, [pc, #360]	; (80080ec <_printf_i+0x23c>)
 8007f84:	230a      	movs	r3, #10
 8007f86:	e012      	b.n	8007fae <_printf_i+0xfe>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6820      	ldr	r0, [r4, #0]
 8007f8c:	1d19      	adds	r1, r3, #4
 8007f8e:	6029      	str	r1, [r5, #0]
 8007f90:	0605      	lsls	r5, r0, #24
 8007f92:	d501      	bpl.n	8007f98 <_printf_i+0xe8>
 8007f94:	681e      	ldr	r6, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <_printf_i+0xee>
 8007f98:	0641      	lsls	r1, r0, #25
 8007f9a:	d5fb      	bpl.n	8007f94 <_printf_i+0xe4>
 8007f9c:	881e      	ldrh	r6, [r3, #0]
 8007f9e:	4853      	ldr	r0, [pc, #332]	; (80080ec <_printf_i+0x23c>)
 8007fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fa2:	bf0c      	ite	eq
 8007fa4:	2308      	moveq	r3, #8
 8007fa6:	230a      	movne	r3, #10
 8007fa8:	2100      	movs	r1, #0
 8007faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fae:	6865      	ldr	r5, [r4, #4]
 8007fb0:	60a5      	str	r5, [r4, #8]
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	bfa2      	ittt	ge
 8007fb6:	6821      	ldrge	r1, [r4, #0]
 8007fb8:	f021 0104 	bicge.w	r1, r1, #4
 8007fbc:	6021      	strge	r1, [r4, #0]
 8007fbe:	b90e      	cbnz	r6, 8007fc4 <_printf_i+0x114>
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	d04b      	beq.n	800805c <_printf_i+0x1ac>
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fca:	fb03 6711 	mls	r7, r3, r1, r6
 8007fce:	5dc7      	ldrb	r7, [r0, r7]
 8007fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fd4:	4637      	mov	r7, r6
 8007fd6:	42bb      	cmp	r3, r7
 8007fd8:	460e      	mov	r6, r1
 8007fda:	d9f4      	bls.n	8007fc6 <_printf_i+0x116>
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d10b      	bne.n	8007ff8 <_printf_i+0x148>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	07de      	lsls	r6, r3, #31
 8007fe4:	d508      	bpl.n	8007ff8 <_printf_i+0x148>
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	6861      	ldr	r1, [r4, #4]
 8007fea:	4299      	cmp	r1, r3
 8007fec:	bfde      	ittt	le
 8007fee:	2330      	movle	r3, #48	; 0x30
 8007ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ff8:	1b52      	subs	r2, r2, r5
 8007ffa:	6122      	str	r2, [r4, #16]
 8007ffc:	f8cd a000 	str.w	sl, [sp]
 8008000:	464b      	mov	r3, r9
 8008002:	aa03      	add	r2, sp, #12
 8008004:	4621      	mov	r1, r4
 8008006:	4640      	mov	r0, r8
 8008008:	f7ff fee4 	bl	8007dd4 <_printf_common>
 800800c:	3001      	adds	r0, #1
 800800e:	d14a      	bne.n	80080a6 <_printf_i+0x1f6>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	b004      	add	sp, #16
 8008016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f043 0320 	orr.w	r3, r3, #32
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	4833      	ldr	r0, [pc, #204]	; (80080f0 <_printf_i+0x240>)
 8008024:	2778      	movs	r7, #120	; 0x78
 8008026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	6829      	ldr	r1, [r5, #0]
 800802e:	061f      	lsls	r7, r3, #24
 8008030:	f851 6b04 	ldr.w	r6, [r1], #4
 8008034:	d402      	bmi.n	800803c <_printf_i+0x18c>
 8008036:	065f      	lsls	r7, r3, #25
 8008038:	bf48      	it	mi
 800803a:	b2b6      	uxthmi	r6, r6
 800803c:	07df      	lsls	r7, r3, #31
 800803e:	bf48      	it	mi
 8008040:	f043 0320 	orrmi.w	r3, r3, #32
 8008044:	6029      	str	r1, [r5, #0]
 8008046:	bf48      	it	mi
 8008048:	6023      	strmi	r3, [r4, #0]
 800804a:	b91e      	cbnz	r6, 8008054 <_printf_i+0x1a4>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	f023 0320 	bic.w	r3, r3, #32
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	2310      	movs	r3, #16
 8008056:	e7a7      	b.n	8007fa8 <_printf_i+0xf8>
 8008058:	4824      	ldr	r0, [pc, #144]	; (80080ec <_printf_i+0x23c>)
 800805a:	e7e4      	b.n	8008026 <_printf_i+0x176>
 800805c:	4615      	mov	r5, r2
 800805e:	e7bd      	b.n	8007fdc <_printf_i+0x12c>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	6826      	ldr	r6, [r4, #0]
 8008064:	6961      	ldr	r1, [r4, #20]
 8008066:	1d18      	adds	r0, r3, #4
 8008068:	6028      	str	r0, [r5, #0]
 800806a:	0635      	lsls	r5, r6, #24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	d501      	bpl.n	8008074 <_printf_i+0x1c4>
 8008070:	6019      	str	r1, [r3, #0]
 8008072:	e002      	b.n	800807a <_printf_i+0x1ca>
 8008074:	0670      	lsls	r0, r6, #25
 8008076:	d5fb      	bpl.n	8008070 <_printf_i+0x1c0>
 8008078:	8019      	strh	r1, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4615      	mov	r5, r2
 8008080:	e7bc      	b.n	8007ffc <_printf_i+0x14c>
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	681d      	ldr	r5, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	2100      	movs	r1, #0
 800808e:	4628      	mov	r0, r5
 8008090:	f7f8 f8be 	bl	8000210 <memchr>
 8008094:	b108      	cbz	r0, 800809a <_printf_i+0x1ea>
 8008096:	1b40      	subs	r0, r0, r5
 8008098:	6060      	str	r0, [r4, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	2300      	movs	r3, #0
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a4:	e7aa      	b.n	8007ffc <_printf_i+0x14c>
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0ad      	beq.n	8008010 <_printf_i+0x160>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	d413      	bmi.n	80080e2 <_printf_i+0x232>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4298      	cmp	r0, r3
 80080c0:	bfb8      	it	lt
 80080c2:	4618      	movlt	r0, r3
 80080c4:	e7a6      	b.n	8008014 <_printf_i+0x164>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4632      	mov	r2, r6
 80080ca:	4649      	mov	r1, r9
 80080cc:	4640      	mov	r0, r8
 80080ce:	47d0      	blx	sl
 80080d0:	3001      	adds	r0, #1
 80080d2:	d09d      	beq.n	8008010 <_printf_i+0x160>
 80080d4:	3501      	adds	r5, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dcf2      	bgt.n	80080c6 <_printf_i+0x216>
 80080e0:	e7eb      	b.n	80080ba <_printf_i+0x20a>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f104 0619 	add.w	r6, r4, #25
 80080e8:	e7f5      	b.n	80080d6 <_printf_i+0x226>
 80080ea:	bf00      	nop
 80080ec:	08008219 	.word	0x08008219
 80080f0:	0800822a 	.word	0x0800822a

080080f4 <memmove>:
 80080f4:	4288      	cmp	r0, r1
 80080f6:	b510      	push	{r4, lr}
 80080f8:	eb01 0402 	add.w	r4, r1, r2
 80080fc:	d902      	bls.n	8008104 <memmove+0x10>
 80080fe:	4284      	cmp	r4, r0
 8008100:	4623      	mov	r3, r4
 8008102:	d807      	bhi.n	8008114 <memmove+0x20>
 8008104:	1e43      	subs	r3, r0, #1
 8008106:	42a1      	cmp	r1, r4
 8008108:	d008      	beq.n	800811c <memmove+0x28>
 800810a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008112:	e7f8      	b.n	8008106 <memmove+0x12>
 8008114:	4402      	add	r2, r0
 8008116:	4601      	mov	r1, r0
 8008118:	428a      	cmp	r2, r1
 800811a:	d100      	bne.n	800811e <memmove+0x2a>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008126:	e7f7      	b.n	8008118 <memmove+0x24>

08008128 <_sbrk_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d06      	ldr	r5, [pc, #24]	; (8008144 <_sbrk_r+0x1c>)
 800812c:	2300      	movs	r3, #0
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 faa6 	bl	8001684 <_sbrk>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_sbrk_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_sbrk_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	2000184c 	.word	0x2000184c

08008148 <memcpy>:
 8008148:	440a      	add	r2, r1
 800814a:	4291      	cmp	r1, r2
 800814c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008150:	d100      	bne.n	8008154 <memcpy+0xc>
 8008152:	4770      	bx	lr
 8008154:	b510      	push	{r4, lr}
 8008156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800815e:	4291      	cmp	r1, r2
 8008160:	d1f9      	bne.n	8008156 <memcpy+0xe>
 8008162:	bd10      	pop	{r4, pc}

08008164 <_realloc_r>:
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	4680      	mov	r8, r0
 800816a:	4614      	mov	r4, r2
 800816c:	460e      	mov	r6, r1
 800816e:	b921      	cbnz	r1, 800817a <_realloc_r+0x16>
 8008170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	4611      	mov	r1, r2
 8008176:	f7ff bc49 	b.w	8007a0c <_malloc_r>
 800817a:	b92a      	cbnz	r2, 8008188 <_realloc_r+0x24>
 800817c:	f7ff fbda 	bl	8007934 <_free_r>
 8008180:	4625      	mov	r5, r4
 8008182:	4628      	mov	r0, r5
 8008184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008188:	f000 f81b 	bl	80081c2 <_malloc_usable_size_r>
 800818c:	4284      	cmp	r4, r0
 800818e:	4607      	mov	r7, r0
 8008190:	d802      	bhi.n	8008198 <_realloc_r+0x34>
 8008192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008196:	d812      	bhi.n	80081be <_realloc_r+0x5a>
 8008198:	4621      	mov	r1, r4
 800819a:	4640      	mov	r0, r8
 800819c:	f7ff fc36 	bl	8007a0c <_malloc_r>
 80081a0:	4605      	mov	r5, r0
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d0ed      	beq.n	8008182 <_realloc_r+0x1e>
 80081a6:	42bc      	cmp	r4, r7
 80081a8:	4622      	mov	r2, r4
 80081aa:	4631      	mov	r1, r6
 80081ac:	bf28      	it	cs
 80081ae:	463a      	movcs	r2, r7
 80081b0:	f7ff ffca 	bl	8008148 <memcpy>
 80081b4:	4631      	mov	r1, r6
 80081b6:	4640      	mov	r0, r8
 80081b8:	f7ff fbbc 	bl	8007934 <_free_r>
 80081bc:	e7e1      	b.n	8008182 <_realloc_r+0x1e>
 80081be:	4635      	mov	r5, r6
 80081c0:	e7df      	b.n	8008182 <_realloc_r+0x1e>

080081c2 <_malloc_usable_size_r>:
 80081c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c6:	1f18      	subs	r0, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bfbc      	itt	lt
 80081cc:	580b      	ldrlt	r3, [r1, r0]
 80081ce:	18c0      	addlt	r0, r0, r3
 80081d0:	4770      	bx	lr
	...

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
