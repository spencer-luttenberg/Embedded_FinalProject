
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b8  080069b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080069c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  2000000c  080069cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  080069cc  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e62  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d1  00000000  00000000  00035ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f06  00000000  00000000  00039bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261c6  00000000  00000000  0003aace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c6e  00000000  00000000  00060c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef9d8  00000000  00000000  00078902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005298  00000000  00000000  001682dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0016d574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006980 	.word	0x08006980

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006980 	.word	0x08006980

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <set_motor_pwm>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define MOTORA 0

void set_motor_pwm(uint8_t motor_ID, float duty_cycle){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	ed87 0a00 	vstr	s0, [r7]
 8000510:	71fb      	strb	r3, [r7, #7]
	switch(motor_ID){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d113      	bne.n	8000540 <set_motor_pwm+0x3c>
	case MOTORA:
	{
		TIM3->CCR1 = htim3.Init.Period*(duty_cycle/100);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <set_motor_pwm+0x48>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000524:	edd7 6a00 	vldr	s13, [r7]
 8000528:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8000550 <set_motor_pwm+0x4c>
 800052c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <set_motor_pwm+0x50>)
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	ee17 2a90 	vmov	r2, s15
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	}

};
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200000c8 	.word	0x200000c8
 8000550:	42c80000 	.word	0x42c80000
 8000554:	40000400 	.word	0x40000400

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fd86 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f9fd 	bl	8000964 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056a:	f000 f88d 	bl	8000688 <MX_I2C1_Init>
  MX_TIM2_Init();
 800056e:	f000 f8cb 	bl	8000708 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f999 	bl	80008a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000576:	f000 f9c7 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800057a:	f000 f91d 	bl	80007b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float current_duty_cycle = 0.0;
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	607b      	str	r3, [r7, #4]


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <main+0x54>)
 8000588:	f003 fb4e 	bl	8003c28 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA (&huart3, Rx_data, 4);  // Receive 4 Bytes of data
 800058c:	2204      	movs	r2, #4
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <main+0x58>)
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x5c>)
 8000592:	f004 faff 	bl	8004b94 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT (&huart3, Rx_data, 4);
 8000596:	2204      	movs	r2, #4
 8000598:	4905      	ldr	r1, [pc, #20]	; (80005b0 <main+0x58>)
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x5c>)
 800059c:	f004 fab6 	bl	8004b0c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_motor_pwm(MOTORA, 100.0);
 80005a0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80005b8 <main+0x60>
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff ffad 	bl	8000504 <set_motor_pwm>
 80005aa:	e7f9      	b.n	80005a0 <main+0x48>
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	200006a4 	.word	0x200006a4
 80005b4:	20000114 	.word	0x20000114
 80005b8:	42c80000 	.word	0x42c80000

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 f9ac 	bl	8006928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xc8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xc8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800062c:	2348      	movs	r3, #72	; 0x48
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f98b 	bl	8002958 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000648:	f000 fa72 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fc19 	bl	8002ea0 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000674:	f000 fa5c 	bl	8000b30 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C1_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_I2C1_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_I2C1_Init+0x74>)
 80006c4:	f001 f95a 	bl	800197c <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 fa2f 	bl	8000b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C1_Init+0x74>)
 80006d6:	f001 ff60 	bl	800259a <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 fa26 	bl	8000b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2C1_Init+0x74>)
 80006e8:	f001 ffa2 	bl	8002630 <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 fa1d 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028
 8000700:	40005400 	.word	0x40005400
 8000704:	00305fff 	.word	0x00305fff

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_TIM2_Init+0xac>)
 800072e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_TIM2_Init+0xac>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000742:	22ff      	movs	r2, #255	; 0xff
 8000744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_TIM2_Init+0xac>)
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000754:	f003 fa11 	bl	8003b7a <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800075e:	f000 f9e7 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000772:	f004 f8ef 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800077c:	f000 f9d8 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM2_Init+0xac>)
 8000798:	f003 fb40 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80007a2:	f000 f9c5 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a6:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM2_Init+0xac>)
 80007a8:	f000 fa9a 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000007c 	.word	0x2000007c

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM3_Init+0xe8>)
 80007ec:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <MX_TIM3_Init+0xec>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM3_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_TIM3_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_TIM3_Init+0xe8>)
 80007fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM3_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_TIM3_Init+0xe8>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_TIM3_Init+0xe8>)
 8000812:	f003 f95b 	bl	8003acc <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800081c:	f000 f988 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_TIM3_Init+0xe8>)
 800082e:	f003 fc09 	bl	8004044 <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000838:	f000 f97a 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xe8>)
 800083e:	f003 f99c 	bl	8003b7a <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000848:	f000 f972 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_TIM3_Init+0xe8>)
 800085c:	f004 f87a 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000866:	f000 f963 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 800086e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xe8>)
 8000884:	f003 faca 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800088e:	f000 f94f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xe8>)
 8000894:	f000 fa24 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART3_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008cc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008d0:	220c      	movs	r2, #12
 80008d2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ee:	f004 f8bf 	bl	8004a70 <HAL_UART_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80008f8:	f000 f91a 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000114 	.word	0x20000114
 8000904:	40004800 	.word	0x40004800

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2206      	movs	r2, #6
 8000918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2202      	movs	r2, #2
 800091e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2202      	movs	r2, #2
 800092a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2201      	movs	r2, #1
 8000930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2201      	movs	r2, #1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	f001 febc 	bl	80026c8 <HAL_PCD_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f8eb 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000019c 	.word	0x2000019c

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b68      	ldr	r3, [pc, #416]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a67      	ldr	r2, [pc, #412]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a5b      	ldr	r2, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b53      	ldr	r3, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009da:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a4f      	ldr	r2, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <MX_GPIO_Init+0x1b8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a10:	4843      	ldr	r0, [pc, #268]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000a12:	f000 ff99 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2141      	movs	r1, #65	; 0x41
 8000a1a:	4842      	ldr	r0, [pc, #264]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000a1c:	f000 ff94 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	483c      	ldr	r0, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x1c4>)
 8000a38:	f000 fdda 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a3c:	2332      	movs	r3, #50	; 0x32
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x1c4>)
 8000a58:	f000 fdca 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a5c:	2386      	movs	r3, #134	; 0x86
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	482d      	ldr	r0, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x1c8>)
 8000a78:	f000 fdba 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000a96:	f000 fdab 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000a9a:	2341      	movs	r3, #65	; 0x41
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000ab2:	f000 fd9d 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0x1bc>)
 8000ad4:	f000 fd8c 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000aec:	f000 fd80 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000af0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b02:	230b      	movs	r3, #11
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_GPIO_Init+0x1c0>)
 8000b0e:	f000 fd6f 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0aa      	sub	sp, #168	; 0xa8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2284      	movs	r2, #132	; 0x84
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 febf 	bl	8006928 <memset>
  if(hi2c->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <HAL_I2C_MspInit+0xd4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d14c      	bne.n	8000c4e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fb92 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bce:	f7ff ffaf 	bl	8000b30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c04:	2304      	movs	r3, #4
 8000c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <HAL_I2C_MspInit+0xdc>)
 8000c12:	f000 fced 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_I2C_MspInit+0xd8>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201f      	movs	r0, #31
 8000c34:	f000 fb77 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c38:	201f      	movs	r0, #31
 8000c3a:	f000 fb90 	bl	800135e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2020      	movs	r0, #32
 8000c44:	f000 fb6f 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c48:	2020      	movs	r0, #32
 8000c4a:	f000 fb88 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37a8      	adds	r7, #168	; 0xa8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d10b      	bne.n	8000c8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_TIM_PWM_MspInit+0x38>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_TIM_PWM_MspInit+0x38>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_TIM_PWM_MspInit+0x38>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10b      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <HAL_TIM_MspPostInit+0xac>)
 8000d38:	f000 fc5a 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d3c:	e020      	b.n	8000d80 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_TIM_MspPostInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d11b      	bne.n	8000d80 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_MspPostInit+0xa8>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <HAL_TIM_MspPostInit+0xac>)
 8000d7c:	f000 fc38 	bl	80015f0 <HAL_GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40000400 	.word	0x40000400

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0aa      	sub	sp, #168	; 0xa8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2284      	movs	r2, #132	; 0x84
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fdb7 	bl	8006928 <memset>
  if(huart->Instance==USART3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d144      	bne.n	8000e4e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fa8a 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dde:	f7ff fea7 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f000 fbd9 	bl	80015f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2027      	movs	r0, #39	; 0x27
 8000e44:	f000 fa6f 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e48:	2027      	movs	r0, #39	; 0x27
 8000e4a:	f000 fa88 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	37a8      	adds	r7, #168	; 0xa8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020c00 	.word	0x40020c00

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ac      	sub	sp, #176	; 0xb0
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	2284      	movs	r2, #132	; 0x84
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fd4f 	bl	8006928 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e92:	d159      	bne.n	8000f48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fa21 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000eb0:	f7ff fe3e 	bl	8000b30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ecc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000ef4:	f000 fb7c 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000f14:	f000 fb6c 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f22:	6353      	str	r3, [r2, #52]	; 0x34
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	37b0      	adds	r7, #176	; 0xb0
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8a0 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <I2C1_EV_IRQHandler+0x10>)
 8000fb2:	f000 fd73 	bl	8001a9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000028 	.word	0x20000028

08000fc0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <I2C1_ER_IRQHandler+0x10>)
 8000fc6:	f000 fd83 	bl	8001ad0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000028 	.word	0x20000028

08000fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <USART3_IRQHandler+0x1c>)
 8000fda:	f003 fe1f 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT (&huart3, Rx_data, 256);
 8000fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe2:	4904      	ldr	r1, [pc, #16]	; (8000ff4 <USART3_IRQHandler+0x20>)
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART3_IRQHandler+0x1c>)
 8000fe6:	f003 fd91 	bl	8004b0c <HAL_UART_Receive_IT>


  /* USER CODE END USART3_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000114 	.word	0x20000114
 8000ff4:	200006a4 	.word	0x200006a4

08000ff8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f005 fc75 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa83 	bl	8000558 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	080069c0 	.word	0x080069c0
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	200007a8 	.word	0x200007a8

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>

0800106e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f94c 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001078:	2000      	movs	r0, #0
 800107a:	f000 f805 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107e:	f7ff fd5d 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200007a4 	.word	0x200007a4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200007a4 	.word	0x200007a4

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Start_IT+0x26>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e048      	b.n	800144a <HAL_DMA_Start_IT+0xb8>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d137      	bne.n	800143c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f8d6 	bl	8001592 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	223f      	movs	r2, #63	; 0x3f
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0216 	orr.w	r2, r2, #22
 8001400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0208 	orr.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e005      	b.n	8001448 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001444:	2302      	movs	r3, #2
 8001446:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001448:	7dfb      	ldrb	r3, [r7, #23]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fe56 	bl	8001110 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e052      	b.n	800152a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0216 	bic.w	r2, r2, #22
 8001492:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <HAL_DMA_Abort+0x62>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0208 	bic.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d4:	e013      	b.n	80014fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d6:	f7ff fe1b 	bl	8001110 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d90c      	bls.n	80014fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e015      	b.n	800152a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e4      	bne.n	80014d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	223f      	movs	r2, #63	; 0x3f
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d004      	beq.n	8001550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00c      	b.n	800156a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2205      	movs	r2, #5
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001584:	b2db      	uxtb	r3, r3
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ae:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b40      	cmp	r3, #64	; 0x40
 80015be:	d108      	bne.n	80015d2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015d0:	e007      	b.n	80015e2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	60da      	str	r2, [r3, #12]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e175      	b.n	80018fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8164 	bne.w	80018f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x56>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80be 	beq.w	80018f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_GPIO_Init+0x324>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001792:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_GPIO_Init+0x328>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_GPIO_Init+0x32c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d037      	beq.n	800182e <HAL_GPIO_Init+0x23e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_GPIO_Init+0x23a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x334>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x236>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_GPIO_Init+0x338>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x232>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_GPIO_Init+0x33c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x22e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a53      	ldr	r2, [pc, #332]	; (8001930 <HAL_GPIO_Init+0x340>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x22a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_GPIO_Init+0x344>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x226>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	; (8001938 <HAL_GPIO_Init+0x348>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x222>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_Init+0x34c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x21e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x350>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x21a>
 8001806:	2309      	movs	r3, #9
 8001808:	e012      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800180a:	230a      	movs	r3, #10
 800180c:	e010      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800180e:	2308      	movs	r3, #8
 8001810:	e00e      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001812:	2307      	movs	r3, #7
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001816:	2306      	movs	r3, #6
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x328>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x354>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a34      	ldr	r2, [pc, #208]	; (8001944 <HAL_GPIO_Init+0x354>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_GPIO_Init+0x354>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_GPIO_Init+0x354>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f ae86 	bls.w	8001610 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40021800 	.word	0x40021800
 8001938:	40021c00 	.word	0x40021c00
 800193c:	40022000 	.word	0x40022000
 8001940:	40022400 	.word	0x40022400
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff f8ee 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e006      	b.n	8001a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d104      	bne.n	8001a16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_I2C_Init+0x11c>)
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69d9      	ldr	r1, [r3, #28]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	02008000 	.word	0x02008000

08001a9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00f      	beq.n	8001b12 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00f      	beq.n	8001b3c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f043 0208 	orr.w	r2, r3, #8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00f      	beq.n	8001b66 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f043 0202 	orr.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 030b 	and.w	r3, r3, #11
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fb77 	bl	800226c <I2C_ITError>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <I2C_Slave_ISR_IT+0x24>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0e1      	b.n	8001dee <I2C_Slave_ISR_IT+0x1e8>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001c46:	6939      	ldr	r1, [r7, #16]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9b5 	bl	8001fb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04b      	beq.n	8001cf0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d046      	beq.n	8001cf0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d128      	bne.n	8001cbe <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b28      	cmp	r3, #40	; 0x28
 8001c76:	d108      	bne.n	8001c8a <I2C_Slave_ISR_IT+0x84>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c7e:	d104      	bne.n	8001c8a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fa9e 	bl	80021c4 <I2C_ITListenCplt>
 8001c88:	e031      	b.n	8001cee <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b29      	cmp	r3, #41	; 0x29
 8001c94:	d10e      	bne.n	8001cb4 <I2C_Slave_ISR_IT+0xae>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c9c:	d00a      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fbd7 	bl	800245a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f926 	bl	8001efe <I2C_ITSlaveSeqCplt>
 8001cb2:	e01c      	b.n	8001cee <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001cbc:	e08f      	b.n	8001dde <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0204 	orr.w	r2, r3, #4
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <I2C_Slave_ISR_IT+0xda>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cde:	d17e      	bne.n	8001dde <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fac0 	bl	800226c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001cec:	e077      	b.n	8001dde <I2C_Slave_ISR_IT+0x1d8>
 8001cee:	e076      	b.n	8001dde <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d02f      	beq.n	8001d5a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d02a      	beq.n	8001d5a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d14b      	bne.n	8001de2 <I2C_Slave_ISR_IT+0x1dc>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d50:	d047      	beq.n	8001de2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f8d3 	bl	8001efe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001d58:	e043      	b.n	8001de2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001d6e:	6939      	ldr	r1, [r7, #16]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f840 	bl	8001df6 <I2C_ITAddrCplt>
 8001d76:	e035      	b.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d030      	beq.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d02b      	beq.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d018      	beq.n	8001dc8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8001dc6:	e00d      	b.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dce:	d002      	beq.n	8001dd6 <I2C_Slave_ISR_IT+0x1d0>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f891 	bl	8001efe <I2C_ITSlaveSeqCplt>
 8001ddc:	e002      	b.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001de2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e0c:	2b28      	cmp	r3, #40	; 0x28
 8001e0e:	d16a      	bne.n	8001ee6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d138      	bne.n	8001ec6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001e54:	897b      	ldrh	r3, [r7, #10]
 8001e56:	09db      	lsrs	r3, r3, #7
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	89bb      	ldrh	r3, [r7, #12]
 8001e5c:	4053      	eors	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f003 0306 	and.w	r3, r3, #6
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11c      	bne.n	8001ea2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d13b      	bne.n	8001ef6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e94:	89ba      	ldrh	r2, [r7, #12]
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe87 	bl	8001bae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ea0:	e029      	b.n	8001ef6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ea2:	893b      	ldrh	r3, [r7, #8]
 8001ea4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fb17 	bl	80024de <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001eb8:	89ba      	ldrh	r2, [r7, #12]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fe75 	bl	8001bae <HAL_I2C_AddrCallback>
}
 8001ec4:	e017      	b.n	8001ef6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb07 	bl	80024de <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ed8:	89ba      	ldrh	r2, [r7, #12]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fe65 	bl	8001bae <HAL_I2C_AddrCallback>
}
 8001ee4:	e007      	b.n	8001ef6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2208      	movs	r2, #8
 8001eec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e00c      	b.n	8001f4c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b29      	cmp	r3, #41	; 0x29
 8001f56:	d112      	bne.n	8001f7e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2228      	movs	r2, #40	; 0x28
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2221      	movs	r2, #33	; 0x21
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f66:	2101      	movs	r1, #1
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fab8 	bl	80024de <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fe05 	bl	8001b86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f7c:	e017      	b.n	8001fae <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b2a      	cmp	r3, #42	; 0x2a
 8001f88:	d111      	bne.n	8001fae <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2228      	movs	r2, #40	; 0x28
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2222      	movs	r2, #34	; 0x22
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f98:	2102      	movs	r1, #2
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fa9f 	bl	80024de <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fdf6 	bl	8001b9a <HAL_I2C_SlaveRxCpltCallback>
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	2b21      	cmp	r3, #33	; 0x21
 8001fe2:	d002      	beq.n	8001fea <I2C_ITSlaveCplt+0x32>
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b29      	cmp	r3, #41	; 0x29
 8001fe8:	d108      	bne.n	8001ffc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001fea:	f248 0101 	movw	r1, #32769	; 0x8001
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fa75 	bl	80024de <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2221      	movs	r2, #33	; 0x21
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffa:	e00d      	b.n	8002018 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b22      	cmp	r3, #34	; 0x22
 8002000:	d002      	beq.n	8002008 <I2C_ITSlaveCplt+0x50>
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b2a      	cmp	r3, #42	; 0x2a
 8002006:	d107      	bne.n	8002018 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002008:	f248 0102 	movw	r1, #32770	; 0x8002
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa66 	bl	80024de <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2222      	movs	r2, #34	; 0x22
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002026:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b62      	ldr	r3, [pc, #392]	; (80021bc <I2C_ITSlaveCplt+0x204>)
 8002034:	400b      	ands	r3, r1
 8002036:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fa0e 	bl	800245a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002056:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01f      	beq.n	80020a0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800206e:	e017      	b.n	80020a0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002088:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8a4 	bl	800226c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b28      	cmp	r3, #40	; 0x28
 800212e:	d141      	bne.n	80021b4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002130:	6979      	ldr	r1, [r7, #20]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f846 	bl	80021c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002138:	e03c      	b.n	80021b4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002142:	d014      	beq.n	800216e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff feda 	bl	8001efe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <I2C_ITSlaveCplt+0x208>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fd2f 	bl	8001bca <HAL_I2C_ListenCpltCallback>
}
 800216c:	e022      	b.n	80021b4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b22      	cmp	r3, #34	; 0x22
 8002178:	d10e      	bne.n	8002198 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fd02 	bl	8001b9a <HAL_I2C_SlaveRxCpltCallback>
}
 8002196:	e00d      	b.n	80021b4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fce9 	bl	8001b86 <HAL_I2C_SlaveTxCpltCallback>
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	fe00e800 	.word	0xfe00e800
 80021c0:	ffff0000 	.word	0xffff0000

080021c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <I2C_ITListenCplt+0xa4>)
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d022      	beq.n	8002240 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002240:	f248 0103 	movw	r1, #32771	; 0x8003
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f94a 	bl	80024de <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2210      	movs	r2, #16
 8002250:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fcb5 	bl	8001bca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	ffff0000 	.word	0xffff0000

0800226c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <I2C_ITError+0x194>)
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b28      	cmp	r3, #40	; 0x28
 80022a2:	d005      	beq.n	80022b0 <I2C_ITError+0x44>
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b29      	cmp	r3, #41	; 0x29
 80022a8:	d002      	beq.n	80022b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b2a      	cmp	r3, #42	; 0x2a
 80022ae:	d10b      	bne.n	80022c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022b0:	2103      	movs	r1, #3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f913 	bl	80024de <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2228      	movs	r2, #40	; 0x28
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a50      	ldr	r2, [pc, #320]	; (8002404 <I2C_ITError+0x198>)
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
 80022c6:	e011      	b.n	80022ec <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f906 	bl	80024de <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b60      	cmp	r3, #96	; 0x60
 80022dc:	d003      	beq.n	80022e6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d039      	beq.n	800236e <I2C_ITError+0x102>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d002      	beq.n	8002306 <I2C_ITError+0x9a>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b21      	cmp	r3, #33	; 0x21
 8002304:	d133      	bne.n	800236e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002314:	d107      	bne.n	8002326 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002324:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f923 	bl	8001576 <HAL_DMA_GetState>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d017      	beq.n	8002366 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	4a33      	ldr	r2, [pc, #204]	; (8002408 <I2C_ITError+0x19c>)
 800233c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f8f1 	bl	8001532 <HAL_DMA_Abort_IT>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04d      	beq.n	80023f2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002360:	4610      	mov	r0, r2
 8002362:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002364:	e045      	b.n	80023f2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f850 	bl	800240c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800236c:	e041      	b.n	80023f2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d039      	beq.n	80023ea <I2C_ITError+0x17e>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b12      	cmp	r3, #18
 800237a:	d002      	beq.n	8002382 <I2C_ITError+0x116>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b22      	cmp	r3, #34	; 0x22
 8002380:	d133      	bne.n	80023ea <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002390:	d107      	bne.n	80023a2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f8e5 	bl	8001576 <HAL_DMA_GetState>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d017      	beq.n	80023e2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <I2C_ITError+0x19c>)
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f8b3 	bl	8001532 <HAL_DMA_Abort_IT>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d011      	beq.n	80023f6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023dc:	4610      	mov	r0, r2
 80023de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023e0:	e009      	b.n	80023f6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f812 	bl	800240c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023e8:	e005      	b.n	80023f6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f80e 	bl	800240c <I2C_TreatErrorCallback>
  }
}
 80023f0:	e002      	b.n	80023f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023f6:	bf00      	nop
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	ffff0000 	.word	0xffff0000
 8002404:	08001c07 	.word	0x08001c07
 8002408:	080024a3 	.word	0x080024a3

0800240c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d10e      	bne.n	800243e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fbdb 	bl	8001bf2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800243c:	e009      	b.n	8002452 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fbc6 	bl	8001bde <HAL_I2C_ErrorCallback>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d103      	bne.n	8002478 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d007      	beq.n	8002496 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	619a      	str	r2, [r3, #24]
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2200      	movs	r2, #0
 80024ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff9b 	bl	800240c <I2C_TreatErrorCallback>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00f      	beq.n	8002518 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80024fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800250c:	2b28      	cmp	r3, #40	; 0x28
 800250e:	d003      	beq.n	8002518 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002516:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00f      	beq.n	8002542 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002528:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002536:	2b28      	cmp	r3, #40	; 0x28
 8002538:	d003      	beq.n	8002542 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002540:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da03      	bge.n	8002552 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002550:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d103      	bne.n	8002560 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800255e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	2b20      	cmp	r3, #32
 8002564:	d103      	bne.n	800256e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f043 0320 	orr.w	r3, r3, #32
 800256c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d103      	bne.n	800257c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43da      	mvns	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d138      	bne.n	8002622 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e032      	b.n	8002624 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2224      	movs	r2, #36	; 0x24
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	d139      	bne.n	80026ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002650:	2302      	movs	r3, #2
 8002652:	e033      	b.n	80026bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002682:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	b08f      	sub	sp, #60	; 0x3c
 80026cc:	af0a      	add	r7, sp, #40	; 0x28
 80026ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e116      	b.n	8002908 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fbb5 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2203      	movs	r2, #3
 80026fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe69 	bl	80063f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	687e      	ldr	r6, [r7, #4]
 8002726:	466d      	mov	r5, sp
 8002728:	f106 0410 	add.w	r4, r6, #16
 800272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002738:	e885 0003 	stmia.w	r5, {r0, r1}
 800273c:	1d33      	adds	r3, r6, #4
 800273e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	f003 fdfd 	bl	8006340 <USB_CoreInit>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d7      	b.n	8002908 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fe57 	bl	8006412 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e04a      	b.n	8002800 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	333d      	adds	r3, #61	; 0x3d
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	333c      	adds	r3, #60	; 0x3c
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	b298      	uxth	r0, r3
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3344      	adds	r3, #68	; 0x44
 80027a6:	4602      	mov	r2, r0
 80027a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3340      	adds	r3, #64	; 0x40
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3348      	adds	r3, #72	; 0x48
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	334c      	adds	r3, #76	; 0x4c
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3354      	adds	r3, #84	; 0x54
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d3af      	bcc.n	800276a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e044      	b.n	800289a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	3301      	adds	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3b5      	bcc.n	8002810 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	687e      	ldr	r6, [r7, #4]
 80028ac:	466d      	mov	r5, sp
 80028ae:	f106 0410 	add.w	r4, r6, #16
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028be:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c2:	1d33      	adds	r3, r6, #4
 80028c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f003 fdf0 	bl	80064ac <USB_DevInit>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e014      	b.n	8002908 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f80a 	bl	8002910 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 ffae 	bl	8006862 <USB_DevDisconnect>

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002910 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PCDEx_ActivateLPM+0x44>)
 8002940:	4313      	orrs	r3, r2
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	10000003 	.word	0x10000003

08002958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e291      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297c:	4b96      	ldr	r3, [pc, #600]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002988:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d112      	bne.n	80029ba <HAL_RCC_OscConfig+0x62>
 8002994:	4b90      	ldr	r3, [pc, #576]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b8d      	ldr	r3, [pc, #564]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x130>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d168      	bne.n	8002a88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e26b      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x7a>
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a83      	ldr	r2, [pc, #524]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x9c>
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7b      	ldr	r2, [pc, #492]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6b      	ldr	r2, [pc, #428]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb6a 	bl	8001110 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fb66 	bl	8001110 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e21f      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fb56 	bl	8001110 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fb52 	bl	8001110 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e20b      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x110>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d069      	beq.n	8002b6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x190>
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1df      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	493d      	ldr	r1, [pc, #244]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e040      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb08 	bl	8001110 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fb04 	bl	8001110 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1bd      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4929      	ldr	r1, [pc, #164]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
 8002b36:	e018      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fae4 	bl	8001110 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fae0 	bl	8001110 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e199      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d038      	beq.n	8002be8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fac1 	bl	8001110 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fabd 	bl	8001110 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e176      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x23a>
 8002bb0:	e01a      	b.n	8002be8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe faa7 	bl	8001110 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe faa3 	bl	8001110 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d903      	bls.n	8002bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e15c      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
 8002bd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b91      	ldr	r3, [pc, #580]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a4 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a87      	ldr	r2, [pc, #540]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x4d0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa6b 	bl	8001110 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fa67 	bl	8001110 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e120      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c50:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x31a>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x33c>
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x35e>
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5a      	ldr	r2, [pc, #360]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fa1b 	bl	8001110 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fa17 	bl	8001110 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0ce      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x386>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fa05 	bl	8001110 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fa01 	bl	8001110 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a4 	beq.w	8002e90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d06b      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d149      	bne.n	8002df0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f9d2 	bl	8001110 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f9ce 	bl	8001110 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e087      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4313      	orrs	r3, r2
 8002db4:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f9a2 	bl	8001110 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe f99e 	bl	8001110 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e057      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x478>
 8002dee:	e04f      	b.n	8002e90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f988 	bl	8001110 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f984 	bl	8001110 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e03d      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4ac>
 8002e22:	e035      	b.n	8002e90 <HAL_RCC_OscConfig+0x538>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x544>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d028      	beq.n	8002e8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d121      	bne.n	8002e8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d11a      	bne.n	8002e8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d111      	bne.n	8002e8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	3b01      	subs	r3, #1
 8002e76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800

08002ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0d0      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d910      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020f 	bic.w	r2, r3, #15
 8002ece:	4965      	ldr	r1, [pc, #404]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d040      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d115      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e073      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06b      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4936      	ldr	r1, [pc, #216]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fe f8bc 	bl	8001110 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7fe f8b8 	bl	8001110 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e053      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 020c 	and.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1eb      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d210      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	4922      	ldr	r1, [pc, #136]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1cc>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1d0>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1d4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f818 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	08006998 	.word	0x08006998
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b094      	sub	sp, #80	; 0x50
 800307e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	2300      	movs	r3, #0
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003090:	4b79      	ldr	r3, [pc, #484]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x40>
 800309c:	2b08      	cmp	r3, #8
 800309e:	f200 80e1 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030aa:	e0db      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b0:	e0db      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_GetSysClockFreq+0x208>)
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4621      	mov	r1, r4
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	4629      	mov	r1, r5
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ebb2 0801 	subs.w	r8, r2, r1
 8003130:	4659      	mov	r1, fp
 8003132:	eb63 0901 	sbc.w	r9, r3, r1
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314a:	4690      	mov	r8, r2
 800314c:	4699      	mov	r9, r3
 800314e:	4623      	mov	r3, r4
 8003150:	eb18 0303 	adds.w	r3, r8, r3
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	462b      	mov	r3, r5
 8003158:	eb49 0303 	adc.w	r3, r9, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316a:	4629      	mov	r1, r5
 800316c:	024b      	lsls	r3, r1, #9
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003174:	4621      	mov	r1, r4
 8003176:	024a      	lsls	r2, r1, #9
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003188:	f7fd f83e 	bl	8000208 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003194:	e058      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	4611      	mov	r1, r2
 80031a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	2200      	movs	r2, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	61fa      	str	r2, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	f7fc ffe4 	bl	8000208 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800326c:	4618      	mov	r0, r3
 800326e:	3750      	adds	r7, #80	; 0x50
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	080069a8 	.word	0x080069a8

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	080069a8 	.word	0x080069a8

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003314:	4b69      	ldr	r3, [pc, #420]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a68      	ldr	r2, [pc, #416]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800331e:	6093      	str	r3, [r2, #8]
 8003320:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	4964      	ldr	r1, [pc, #400]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d017      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	4959      	ldr	r1, [pc, #356]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d017      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003382:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	494a      	ldr	r1, [pc, #296]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 808b 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6413      	str	r3, [r2, #64]	; 0x40
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fd fe8c 	bl	8001110 <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7fd fe88 	bl	8001110 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e357      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d035      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	429a      	cmp	r2, r3
 8003436:	d02e      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d114      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fe50 	bl	8001110 <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fe4c 	bl	8001110 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e319      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a2:	d111      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	4901      	ldr	r1, [pc, #4]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40007000 	.word	0x40007000
 80034c4:	0ffffcff 	.word	0x0ffffcff
 80034c8:	4baa      	ldr	r3, [pc, #680]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4aa9      	ldr	r2, [pc, #676]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	4ba7      	ldr	r3, [pc, #668]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	49a4      	ldr	r1, [pc, #656]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034f2:	4ba0      	ldr	r3, [pc, #640]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f8:	4a9e      	ldr	r2, [pc, #632]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003502:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003504:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4999      	ldr	r1, [pc, #612]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003520:	4b94      	ldr	r3, [pc, #592]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352e:	4991      	ldr	r1, [pc, #580]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003542:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	4988      	ldr	r1, [pc, #544]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003564:	4b83      	ldr	r3, [pc, #524]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003572:	4980      	ldr	r1, [pc, #512]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003586:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4977      	ldr	r1, [pc, #476]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a8:	4b72      	ldr	r3, [pc, #456]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	496f      	ldr	r1, [pc, #444]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f023 020c 	bic.w	r2, r3, #12
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d8:	4966      	ldr	r1, [pc, #408]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	495e      	ldr	r1, [pc, #376]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	4955      	ldr	r1, [pc, #340]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	494d      	ldr	r1, [pc, #308]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003652:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	4944      	ldr	r1, [pc, #272]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	493c      	ldr	r1, [pc, #240]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	4933      	ldr	r1, [pc, #204]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c6:	492b      	ldr	r1, [pc, #172]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d011      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e8:	4922      	ldr	r1, [pc, #136]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f8:	d101      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	4912      	ldr	r1, [pc, #72]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374c:	4909      	ldr	r1, [pc, #36]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d006      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80d9 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a01      	ldr	r2, [pc, #4]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003772:	e001      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003774:	40023800 	.word	0x40023800
 8003778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377a:	f7fd fcc9 	bl	8001110 <HAL_GetTick>
 800377e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003782:	f7fd fcc5 	bl	8001110 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e194      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003794:	4b6c      	ldr	r3, [pc, #432]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d021      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b4:	4b64      	ldr	r3, [pc, #400]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c2:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	019a      	lsls	r2, r3, #6
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	071b      	lsls	r3, r3, #28
 80037e8:	4957      	ldr	r1, [pc, #348]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d02e      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d129      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800381c:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003830:	0f1b      	lsrs	r3, r3, #28
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	019a      	lsls	r2, r3, #6
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	431a      	orrs	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	071b      	lsls	r3, r3, #28
 8003850:	493d      	ldr	r1, [pc, #244]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385e:	f023 021f 	bic.w	r2, r3, #31
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	3b01      	subs	r3, #1
 8003868:	4937      	ldr	r1, [pc, #220]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01d      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800387c:	4b32      	ldr	r3, [pc, #200]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003882:	0e1b      	lsrs	r3, r3, #24
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800388a:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003890:	0f1b      	lsrs	r3, r3, #28
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	019a      	lsls	r2, r3, #6
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	071b      	lsls	r3, r3, #28
 80038b0:	4925      	ldr	r1, [pc, #148]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d011      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	019a      	lsls	r2, r3, #6
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	071b      	lsls	r3, r3, #28
 80038e0:	4919      	ldr	r1, [pc, #100]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fd fc0c 	bl	8001110 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038fc:	f7fd fc08 	bl	8001110 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0d7      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 80cd 	bne.w	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392e:	f7fd fbef 	bl	8001110 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003936:	f7fd fbeb 	bl	8001110 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b64      	cmp	r3, #100	; 0x64
 8003942:	d903      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0ba      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003948:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800394c:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d0ed      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02e      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d12a      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	0f1b      	lsrs	r3, r3, #28
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	4944      	ldr	r1, [pc, #272]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	493d      	ldr	r1, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d022      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ec:	d11d      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ee:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	0e1b      	lsrs	r3, r3, #24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	0f1b      	lsrs	r3, r3, #28
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	4929      	ldr	r1, [pc, #164]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d028      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a44:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4917      	ldr	r1, [pc, #92]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a94:	f7fd fb3c 	bl	8001110 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a9c:	f7fd fb38 	bl	8001110 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e007      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d1ef      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e049      	b.n	8003b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f8d4 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 fb64 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e049      	b.n	8003c20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fd f85f 	bl	8000c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 fb0d 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_TIM_PWM_Start+0x24>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e03c      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x9e>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d109      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x3e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e02f      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x9e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start+0x58>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e022      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x9e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d109      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x72>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e015      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x9e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x8c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e008      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x9e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e092      	b.n	8003df4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start+0xb6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	e023      	b.n	8003d26 <HAL_TIM_PWM_Start+0xfe>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0xc6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cec:	e01b      	b.n	8003d26 <HAL_TIM_PWM_Start+0xfe>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0xd6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_PWM_Start+0xfe>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xe6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_PWM_Start+0xfe>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xf6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_PWM_Start+0xfe>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fdea 	bl	8004908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <HAL_TIM_PWM_Start+0x1d4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_TIM_PWM_Start+0x120>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <HAL_TIM_PWM_Start+0x1d8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_PWM_Start+0x124>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_TIM_PWM_Start+0x126>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <HAL_TIM_PWM_Start+0x1d4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d01d      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <HAL_TIM_PWM_Start+0x1dc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <HAL_TIM_PWM_Start+0x1e0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_TIM_PWM_Start+0x1e4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_PWM_Start+0x1d8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_TIM_PWM_Start+0x1e8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x18a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_TIM_PWM_Start+0x1ec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d115      	bne.n	8003dde <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_TIM_PWM_Start+0x1f0>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d015      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x1c8>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d011      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	e008      	b.n	8003df0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40010400 	.word	0x40010400
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40001800 	.word	0x40001800
 8003e18:	00010007 	.word	0x00010007

08003e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ff      	b.n	800403a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b14      	cmp	r3, #20
 8003e46:	f200 80f0 	bhi.w	800402a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003ea5 	.word	0x08003ea5
 8003e54:	0800402b 	.word	0x0800402b
 8003e58:	0800402b 	.word	0x0800402b
 8003e5c:	0800402b 	.word	0x0800402b
 8003e60:	08003ee5 	.word	0x08003ee5
 8003e64:	0800402b 	.word	0x0800402b
 8003e68:	0800402b 	.word	0x0800402b
 8003e6c:	0800402b 	.word	0x0800402b
 8003e70:	08003f27 	.word	0x08003f27
 8003e74:	0800402b 	.word	0x0800402b
 8003e78:	0800402b 	.word	0x0800402b
 8003e7c:	0800402b 	.word	0x0800402b
 8003e80:	08003f67 	.word	0x08003f67
 8003e84:	0800402b 	.word	0x0800402b
 8003e88:	0800402b 	.word	0x0800402b
 8003e8c:	0800402b 	.word	0x0800402b
 8003e90:	08003fa9 	.word	0x08003fa9
 8003e94:	0800402b 	.word	0x0800402b
 8003e98:	0800402b 	.word	0x0800402b
 8003e9c:	0800402b 	.word	0x0800402b
 8003ea0:	08003fe9 	.word	0x08003fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa34 	bl	8004318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0208 	orr.w	r2, r2, #8
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	619a      	str	r2, [r3, #24]
      break;
 8003ee2:	e0a5      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa86 	bl	80043fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
      break;
 8003f24:	e084      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fadd 	bl	80044ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0208 	orr.w	r2, r2, #8
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0204 	bic.w	r2, r2, #4
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]
      break;
 8003f64:	e064      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fb33 	bl	80045d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69d9      	ldr	r1, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	61da      	str	r2, [r3, #28]
      break;
 8003fa6:	e043      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb6a 	bl	8004688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0208 	orr.w	r2, r2, #8
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0204 	bic.w	r2, r2, #4
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fe6:	e023      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fb9c 	bl	800472c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	021a      	lsls	r2, r3, #8
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004028:	e002      	b.n	8004030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
      break;
 800402e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop

08004044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_ConfigClockSource+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e0b4      	b.n	80041ca <HAL_TIM_ConfigClockSource+0x186>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <HAL_TIM_ConfigClockSource+0x190>)
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d03e      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0xd4>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	f200 8087 	bhi.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	f000 8086 	beq.w	80041b6 <HAL_TIM_ConfigClockSource+0x172>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d87f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d01a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xa6>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d87b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d050      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x11a>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d877      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d03c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xfa>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d873      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d058      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x13a>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d86f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d064      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d86b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d060      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d867      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d05a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	e062      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040fa:	f000 fbe5 	bl	80048c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800410c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
      break;
 8004116:	e04f      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	f000 fbce 	bl	80048c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413a:	609a      	str	r2, [r3, #8]
      break;
 800413c:	e03c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fb42 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2150      	movs	r1, #80	; 0x50
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fb9b 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 800415c:	e02c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fb61 	bl	8004832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2160      	movs	r1, #96	; 0x60
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fb8b 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 800417c:	e01c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fb22 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fb7b 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fb72 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	fffeff88 	.word	0xfffeff88

080041d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a40      	ldr	r2, [pc, #256]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <TIM_Base_SetConfig+0x114>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d02b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d027      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d023      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d017      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <TIM_Base_SetConfig+0x128>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <TIM_Base_SetConfig+0x12c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a26      	ldr	r2, [pc, #152]	; (8004308 <TIM_Base_SetConfig+0x130>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <TIM_Base_SetConfig+0x134>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <TIM_Base_SetConfig+0x138>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <TIM_Base_SetConfig+0x13c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0xf8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40010400 	.word	0x40010400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	40001800 	.word	0x40001800
 8004310:	40001c00 	.word	0x40001c00
 8004314:	40002000 	.word	0x40002000

08004318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <TIM_OC1_SetConfig+0xd8>)
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0302 	bic.w	r3, r3, #2
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <TIM_OC1_SetConfig+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_OC1_SetConfig+0x64>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <TIM_OC1_SetConfig+0xe0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10c      	bne.n	8004396 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0308 	bic.w	r3, r3, #8
 8004382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <TIM_OC1_SetConfig+0xdc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_OC1_SetConfig+0x8e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <TIM_OC1_SetConfig+0xe0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d111      	bne.n	80043ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	fffeff8f 	.word	0xfffeff8f
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400

080043fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0210 	bic.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <TIM_OC2_SetConfig+0xe4>)
 8004428:	4013      	ands	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0320 	bic.w	r3, r3, #32
 8004446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <TIM_OC2_SetConfig+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC2_SetConfig+0x68>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <TIM_OC2_SetConfig+0xec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10d      	bne.n	8004480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <TIM_OC2_SetConfig+0xe8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC2_SetConfig+0x94>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <TIM_OC2_SetConfig+0xec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d113      	bne.n	80044b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	feff8fff 	.word	0xfeff8fff
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <TIM_OC3_SetConfig+0xe0>)
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <TIM_OC3_SetConfig+0xe4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0x66>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <TIM_OC3_SetConfig+0xe8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10d      	bne.n	800456e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <TIM_OC3_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_OC3_SetConfig+0x92>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <TIM_OC3_SetConfig+0xe8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d113      	bne.n	80045a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	fffeff8f 	.word	0xfffeff8f
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <TIM_OC4_SetConfig+0xa4>)
 8004604:	4013      	ands	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <TIM_OC4_SetConfig+0xa8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x68>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <TIM_OC4_SetConfig+0xac>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	feff8fff 	.word	0xfeff8fff
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <TIM_OC5_SetConfig+0x98>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a12      	ldr	r2, [pc, #72]	; (8004724 <TIM_OC5_SetConfig+0x9c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_OC5_SetConfig+0x5e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <TIM_OC5_SetConfig+0xa0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d109      	bne.n	80046fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	fffeff8f 	.word	0xfffeff8f
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <TIM_OC6_SetConfig+0x9c>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800476e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_OC6_SetConfig+0xa0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_OC6_SetConfig+0x60>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <TIM_OC6_SetConfig+0xa4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d109      	bne.n	80047a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	feff8fff 	.word	0xfeff8fff
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400

080047d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 030a 	bic.w	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0210 	bic.w	r2, r3, #16
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f043 0307 	orr.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2201      	movs	r2, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	43db      	mvns	r3, r3
 800492a:	401a      	ands	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004968:	2302      	movs	r3, #2
 800496a:	e06d      	b.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a30      	ldr	r2, [pc, #192]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2f      	ldr	r2, [pc, #188]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d022      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049de:	d01d      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d018      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10c      	bne.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40001800 	.word	0x40001800

08004a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e040      	b.n	8004b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc f97e 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fbba 	bl	8005228 <UART_SetConfig>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e022      	b.n	8004b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fe12 	bl	80056f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fe99 	bl	8005834 <UART_CheckIdleState>
 8004b02:	4603      	mov	r3, r0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d132      	bne.n	8004b8a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_UART_Receive_IT+0x24>
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e02b      	b.n	8004b8c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d018      	beq.n	8004b7a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	613b      	str	r3, [r7, #16]
   return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 ff55 	bl	8005a30 <UART_Start_Receive_IT>
 8004b86:	4603      	mov	r3, r0
 8004b88:	e000      	b.n	8004b8c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3728      	adds	r7, #40	; 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d132      	bne.n	8004c12 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Receive_DMA+0x24>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e02b      	b.n	8004c14 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	69f9      	ldr	r1, [r7, #28]
 8004bf4:	6a3a      	ldr	r2, [r7, #32]
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 ffd7 	bl	8005bbc <UART_Start_Receive_DMA>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	; 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ba      	sub	sp, #232	; 0xe8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8297 	beq.w	80051a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
      }
      return;
 8004c82:	e291      	b.n	80051a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8117 	beq.w	8004ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c9e:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <HAL_UART_IRQHandler+0x298>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 810a 	beq.w	8004ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d011      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xbc>
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d011      	beq.n	8004d08 <HAL_UART_IRQHandler+0xec>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d011      	beq.n	8004d38 <HAL_UART_IRQHandler+0x11c>
 8004d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2204      	movs	r2, #4
 8004d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6a:	f043 0208 	orr.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d012      	beq.n	8004da6 <HAL_UART_IRQHandler+0x18a>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 81fd 	beq.w	80051ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04f      	beq.n	8004e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 ffa2 	bl	8005d48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d141      	bne.n	8004e96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <HAL_UART_IRQHandler+0x29c>)
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fc fb5d 	bl	8001532 <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00f      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9b4 	bl	80051fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00b      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9b0 	bl	80051fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e007      	b.n	8004eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9ac 	bl	80051fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004eac:	e17e      	b.n	80051ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eae:	bf00      	nop
    return;
 8004eb0:	e17c      	b.n	80051ac <HAL_UART_IRQHandler+0x590>
 8004eb2:	bf00      	nop
 8004eb4:	04000120 	.word	0x04000120
 8004eb8:	08005ff5 	.word	0x08005ff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 814c 	bne.w	800515e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8145 	beq.w	800515e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 813e 	beq.w	800515e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	f040 80b6 	bne.w	8005066 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8150 	beq.w	80051b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f080 8148 	bcs.w	80051b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f34:	f000 8086 	beq.w	8005044 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1da      	bne.n	8004f38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e1      	bne.n	8004f82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e3      	bne.n	8004fbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005014:	f023 0310 	bic.w	r3, r3, #16
 8005018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005026:	65bb      	str	r3, [r7, #88]	; 0x58
 8005028:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800502c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e4      	bne.n	8005004 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc fa07 	bl	8001452 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005056:	b29b      	uxth	r3, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8d6 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005064:	e0a4      	b.n	80051b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005072:	b29b      	uxth	r3, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8096 	beq.w	80051b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8091 	beq.w	80051b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
 80050b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e4      	bne.n	8005092 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	623b      	str	r3, [r7, #32]
   return(result);
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050ec:	633a      	str	r2, [r7, #48]	; 0x30
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e3      	bne.n	80050c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	60fb      	str	r3, [r7, #12]
   return(result);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0310 	bic.w	r3, r3, #16
 8005128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	69b9      	ldr	r1, [r7, #24]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	617b      	str	r3, [r7, #20]
   return(result);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e4      	bne.n	8005114 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f85a 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800515c:	e02a      	b.n	80051b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800516a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01c      	beq.n	80051b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
    }
    return;
 8005186:	e017      	b.n	80051b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <HAL_UART_IRQHandler+0x59e>
 8005194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00c      	beq.n	80051ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 ff3d 	bl	8006020 <UART_EndTransmit_IT>
    return;
 80051a6:	e008      	b.n	80051ba <HAL_UART_IRQHandler+0x59e>
      return;
 80051a8:	bf00      	nop
 80051aa:	e006      	b.n	80051ba <HAL_UART_IRQHandler+0x59e>
    return;
 80051ac:	bf00      	nop
 80051ae:	e004      	b.n	80051ba <HAL_UART_IRQHandler+0x59e>
      return;
 80051b0:	bf00      	nop
 80051b2:	e002      	b.n	80051ba <HAL_UART_IRQHandler+0x59e>
      return;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <HAL_UART_IRQHandler+0x59e>
    return;
 80051b8:	bf00      	nop
  }

}
 80051ba:	37e8      	adds	r7, #232	; 0xe8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4ba6      	ldr	r3, [pc, #664]	; (80054ec <UART_SetConfig+0x2c4>)
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	430b      	orrs	r3, r1
 800525e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	430a      	orrs	r2, r1
 8005298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a94      	ldr	r2, [pc, #592]	; (80054f0 <UART_SetConfig+0x2c8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d120      	bne.n	80052e6 <UART_SetConfig+0xbe>
 80052a4:	4b93      	ldr	r3, [pc, #588]	; (80054f4 <UART_SetConfig+0x2cc>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d816      	bhi.n	80052e0 <UART_SetConfig+0xb8>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x90>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d5 	.word	0x080052d5
 80052c0:	080052cf 	.word	0x080052cf
 80052c4:	080052db 	.word	0x080052db
 80052c8:	2301      	movs	r3, #1
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e150      	b.n	8005570 <UART_SetConfig+0x348>
 80052ce:	2302      	movs	r3, #2
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e14d      	b.n	8005570 <UART_SetConfig+0x348>
 80052d4:	2304      	movs	r3, #4
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e14a      	b.n	8005570 <UART_SetConfig+0x348>
 80052da:	2308      	movs	r3, #8
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e147      	b.n	8005570 <UART_SetConfig+0x348>
 80052e0:	2310      	movs	r3, #16
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e144      	b.n	8005570 <UART_SetConfig+0x348>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a83      	ldr	r2, [pc, #524]	; (80054f8 <UART_SetConfig+0x2d0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d132      	bne.n	8005356 <UART_SetConfig+0x12e>
 80052f0:	4b80      	ldr	r3, [pc, #512]	; (80054f4 <UART_SetConfig+0x2cc>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d828      	bhi.n	8005350 <UART_SetConfig+0x128>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0xdc>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005339 	.word	0x08005339
 8005308:	08005351 	.word	0x08005351
 800530c:	08005351 	.word	0x08005351
 8005310:	08005351 	.word	0x08005351
 8005314:	08005345 	.word	0x08005345
 8005318:	08005351 	.word	0x08005351
 800531c:	08005351 	.word	0x08005351
 8005320:	08005351 	.word	0x08005351
 8005324:	0800533f 	.word	0x0800533f
 8005328:	08005351 	.word	0x08005351
 800532c:	08005351 	.word	0x08005351
 8005330:	08005351 	.word	0x08005351
 8005334:	0800534b 	.word	0x0800534b
 8005338:	2300      	movs	r3, #0
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e118      	b.n	8005570 <UART_SetConfig+0x348>
 800533e:	2302      	movs	r3, #2
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e115      	b.n	8005570 <UART_SetConfig+0x348>
 8005344:	2304      	movs	r3, #4
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e112      	b.n	8005570 <UART_SetConfig+0x348>
 800534a:	2308      	movs	r3, #8
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e10f      	b.n	8005570 <UART_SetConfig+0x348>
 8005350:	2310      	movs	r3, #16
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e10c      	b.n	8005570 <UART_SetConfig+0x348>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a68      	ldr	r2, [pc, #416]	; (80054fc <UART_SetConfig+0x2d4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d120      	bne.n	80053a2 <UART_SetConfig+0x17a>
 8005360:	4b64      	ldr	r3, [pc, #400]	; (80054f4 <UART_SetConfig+0x2cc>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800536a:	2b30      	cmp	r3, #48	; 0x30
 800536c:	d013      	beq.n	8005396 <UART_SetConfig+0x16e>
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d814      	bhi.n	800539c <UART_SetConfig+0x174>
 8005372:	2b20      	cmp	r3, #32
 8005374:	d009      	beq.n	800538a <UART_SetConfig+0x162>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d810      	bhi.n	800539c <UART_SetConfig+0x174>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <UART_SetConfig+0x15c>
 800537e:	2b10      	cmp	r3, #16
 8005380:	d006      	beq.n	8005390 <UART_SetConfig+0x168>
 8005382:	e00b      	b.n	800539c <UART_SetConfig+0x174>
 8005384:	2300      	movs	r3, #0
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e0f2      	b.n	8005570 <UART_SetConfig+0x348>
 800538a:	2302      	movs	r3, #2
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e0ef      	b.n	8005570 <UART_SetConfig+0x348>
 8005390:	2304      	movs	r3, #4
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e0ec      	b.n	8005570 <UART_SetConfig+0x348>
 8005396:	2308      	movs	r3, #8
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e0e9      	b.n	8005570 <UART_SetConfig+0x348>
 800539c:	2310      	movs	r3, #16
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e0e6      	b.n	8005570 <UART_SetConfig+0x348>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a56      	ldr	r2, [pc, #344]	; (8005500 <UART_SetConfig+0x2d8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d120      	bne.n	80053ee <UART_SetConfig+0x1c6>
 80053ac:	4b51      	ldr	r3, [pc, #324]	; (80054f4 <UART_SetConfig+0x2cc>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053b6:	2bc0      	cmp	r3, #192	; 0xc0
 80053b8:	d013      	beq.n	80053e2 <UART_SetConfig+0x1ba>
 80053ba:	2bc0      	cmp	r3, #192	; 0xc0
 80053bc:	d814      	bhi.n	80053e8 <UART_SetConfig+0x1c0>
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d009      	beq.n	80053d6 <UART_SetConfig+0x1ae>
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d810      	bhi.n	80053e8 <UART_SetConfig+0x1c0>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <UART_SetConfig+0x1a8>
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x1b4>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x1c0>
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e0cc      	b.n	8005570 <UART_SetConfig+0x348>
 80053d6:	2302      	movs	r3, #2
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e0c9      	b.n	8005570 <UART_SetConfig+0x348>
 80053dc:	2304      	movs	r3, #4
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e0c6      	b.n	8005570 <UART_SetConfig+0x348>
 80053e2:	2308      	movs	r3, #8
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e0c3      	b.n	8005570 <UART_SetConfig+0x348>
 80053e8:	2310      	movs	r3, #16
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e0c0      	b.n	8005570 <UART_SetConfig+0x348>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a44      	ldr	r2, [pc, #272]	; (8005504 <UART_SetConfig+0x2dc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d125      	bne.n	8005444 <UART_SetConfig+0x21c>
 80053f8:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <UART_SetConfig+0x2cc>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005406:	d017      	beq.n	8005438 <UART_SetConfig+0x210>
 8005408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540c:	d817      	bhi.n	800543e <UART_SetConfig+0x216>
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d00b      	beq.n	800542c <UART_SetConfig+0x204>
 8005414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005418:	d811      	bhi.n	800543e <UART_SetConfig+0x216>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <UART_SetConfig+0x1fe>
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d006      	beq.n	8005432 <UART_SetConfig+0x20a>
 8005424:	e00b      	b.n	800543e <UART_SetConfig+0x216>
 8005426:	2300      	movs	r3, #0
 8005428:	77fb      	strb	r3, [r7, #31]
 800542a:	e0a1      	b.n	8005570 <UART_SetConfig+0x348>
 800542c:	2302      	movs	r3, #2
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e09e      	b.n	8005570 <UART_SetConfig+0x348>
 8005432:	2304      	movs	r3, #4
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e09b      	b.n	8005570 <UART_SetConfig+0x348>
 8005438:	2308      	movs	r3, #8
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e098      	b.n	8005570 <UART_SetConfig+0x348>
 800543e:	2310      	movs	r3, #16
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e095      	b.n	8005570 <UART_SetConfig+0x348>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <UART_SetConfig+0x2e0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d125      	bne.n	800549a <UART_SetConfig+0x272>
 800544e:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <UART_SetConfig+0x2cc>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545c:	d017      	beq.n	800548e <UART_SetConfig+0x266>
 800545e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005462:	d817      	bhi.n	8005494 <UART_SetConfig+0x26c>
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d00b      	beq.n	8005482 <UART_SetConfig+0x25a>
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546e:	d811      	bhi.n	8005494 <UART_SetConfig+0x26c>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <UART_SetConfig+0x254>
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d006      	beq.n	8005488 <UART_SetConfig+0x260>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x26c>
 800547c:	2301      	movs	r3, #1
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e076      	b.n	8005570 <UART_SetConfig+0x348>
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e073      	b.n	8005570 <UART_SetConfig+0x348>
 8005488:	2304      	movs	r3, #4
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e070      	b.n	8005570 <UART_SetConfig+0x348>
 800548e:	2308      	movs	r3, #8
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e06d      	b.n	8005570 <UART_SetConfig+0x348>
 8005494:	2310      	movs	r3, #16
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e06a      	b.n	8005570 <UART_SetConfig+0x348>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <UART_SetConfig+0x2e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d138      	bne.n	8005516 <UART_SetConfig+0x2ee>
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <UART_SetConfig+0x2cc>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054b2:	d017      	beq.n	80054e4 <UART_SetConfig+0x2bc>
 80054b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054b8:	d82a      	bhi.n	8005510 <UART_SetConfig+0x2e8>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	d00b      	beq.n	80054d8 <UART_SetConfig+0x2b0>
 80054c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c4:	d824      	bhi.n	8005510 <UART_SetConfig+0x2e8>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <UART_SetConfig+0x2aa>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d006      	beq.n	80054de <UART_SetConfig+0x2b6>
 80054d0:	e01e      	b.n	8005510 <UART_SetConfig+0x2e8>
 80054d2:	2300      	movs	r3, #0
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e04b      	b.n	8005570 <UART_SetConfig+0x348>
 80054d8:	2302      	movs	r3, #2
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e048      	b.n	8005570 <UART_SetConfig+0x348>
 80054de:	2304      	movs	r3, #4
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e045      	b.n	8005570 <UART_SetConfig+0x348>
 80054e4:	2308      	movs	r3, #8
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e042      	b.n	8005570 <UART_SetConfig+0x348>
 80054ea:	bf00      	nop
 80054ec:	efff69f3 	.word	0xefff69f3
 80054f0:	40011000 	.word	0x40011000
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40004400 	.word	0x40004400
 80054fc:	40004800 	.word	0x40004800
 8005500:	40004c00 	.word	0x40004c00
 8005504:	40005000 	.word	0x40005000
 8005508:	40011400 	.word	0x40011400
 800550c:	40007800 	.word	0x40007800
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e02c      	b.n	8005570 <UART_SetConfig+0x348>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a72      	ldr	r2, [pc, #456]	; (80056e4 <UART_SetConfig+0x4bc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d125      	bne.n	800556c <UART_SetConfig+0x344>
 8005520:	4b71      	ldr	r3, [pc, #452]	; (80056e8 <UART_SetConfig+0x4c0>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800552a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800552e:	d017      	beq.n	8005560 <UART_SetConfig+0x338>
 8005530:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005534:	d817      	bhi.n	8005566 <UART_SetConfig+0x33e>
 8005536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553a:	d00b      	beq.n	8005554 <UART_SetConfig+0x32c>
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005540:	d811      	bhi.n	8005566 <UART_SetConfig+0x33e>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <UART_SetConfig+0x326>
 8005546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800554a:	d006      	beq.n	800555a <UART_SetConfig+0x332>
 800554c:	e00b      	b.n	8005566 <UART_SetConfig+0x33e>
 800554e:	2300      	movs	r3, #0
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e00d      	b.n	8005570 <UART_SetConfig+0x348>
 8005554:	2302      	movs	r3, #2
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e00a      	b.n	8005570 <UART_SetConfig+0x348>
 800555a:	2304      	movs	r3, #4
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e007      	b.n	8005570 <UART_SetConfig+0x348>
 8005560:	2308      	movs	r3, #8
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e004      	b.n	8005570 <UART_SetConfig+0x348>
 8005566:	2310      	movs	r3, #16
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e001      	b.n	8005570 <UART_SetConfig+0x348>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005578:	d15b      	bne.n	8005632 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800557a:	7ffb      	ldrb	r3, [r7, #31]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d828      	bhi.n	80055d2 <UART_SetConfig+0x3aa>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x360>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055ad 	.word	0x080055ad
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055bd 	.word	0x080055bd
 8005594:	080055d3 	.word	0x080055d3
 8005598:	080055c3 	.word	0x080055c3
 800559c:	080055d3 	.word	0x080055d3
 80055a0:	080055d3 	.word	0x080055d3
 80055a4:	080055d3 	.word	0x080055d3
 80055a8:	080055cb 	.word	0x080055cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ac:	f7fd fe76 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 80055b0:	61b8      	str	r0, [r7, #24]
        break;
 80055b2:	e013      	b.n	80055dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b4:	f7fd fe86 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 80055b8:	61b8      	str	r0, [r7, #24]
        break;
 80055ba:	e00f      	b.n	80055dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055bc:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <UART_SetConfig+0x4c4>)
 80055be:	61bb      	str	r3, [r7, #24]
        break;
 80055c0:	e00c      	b.n	80055dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c2:	f7fd fd59 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80055c6:	61b8      	str	r0, [r7, #24]
        break;
 80055c8:	e008      	b.n	80055dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ce:	61bb      	str	r3, [r7, #24]
        break;
 80055d0:	e004      	b.n	80055dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	77bb      	strb	r3, [r7, #30]
        break;
 80055da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d074      	beq.n	80056cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	005a      	lsls	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	441a      	add	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b0f      	cmp	r3, #15
 80055fc:	d916      	bls.n	800562c <UART_SetConfig+0x404>
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d212      	bcs.n	800562c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f023 030f 	bic.w	r3, r3, #15
 800560e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	b29b      	uxth	r3, r3
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	b29a      	uxth	r2, r3
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	4313      	orrs	r3, r2
 8005620:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	89fa      	ldrh	r2, [r7, #14]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	e04f      	b.n	80056cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77bb      	strb	r3, [r7, #30]
 8005630:	e04c      	b.n	80056cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d828      	bhi.n	800568a <UART_SetConfig+0x462>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x418>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	0800568b 	.word	0x0800568b
 8005650:	0800567b 	.word	0x0800567b
 8005654:	0800568b 	.word	0x0800568b
 8005658:	0800568b 	.word	0x0800568b
 800565c:	0800568b 	.word	0x0800568b
 8005660:	08005683 	.word	0x08005683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fd fe1a 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8005668:	61b8      	str	r0, [r7, #24]
        break;
 800566a:	e013      	b.n	8005694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566c:	f7fd fe2a 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8005670:	61b8      	str	r0, [r7, #24]
        break;
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <UART_SetConfig+0x4c4>)
 8005676:	61bb      	str	r3, [r7, #24]
        break;
 8005678:	e00c      	b.n	8005694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800567a:	f7fd fcfd 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800567e:	61b8      	str	r0, [r7, #24]
        break;
 8005680:	e008      	b.n	8005694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005686:	61bb      	str	r3, [r7, #24]
        break;
 8005688:	e004      	b.n	8005694 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	77bb      	strb	r3, [r7, #30]
        break;
 8005692:	bf00      	nop
    }

    if (pclk != 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d018      	beq.n	80056cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	085a      	lsrs	r2, r3, #1
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	441a      	add	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d909      	bls.n	80056c8 <UART_SetConfig+0x4a0>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d205      	bcs.n	80056c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e001      	b.n	80056cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40007c00 	.word	0x40007c00
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01a      	beq.n	8005806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d10a      	bne.n	8005806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005844:	f7fb fc64 	bl	8001110 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b08      	cmp	r3, #8
 8005856:	d10e      	bne.n	8005876 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f81b 	bl	80058a2 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e011      	b.n	800589a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b09c      	sub	sp, #112	; 0x70
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b2:	e0a7      	b.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	f000 80a3 	beq.w	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fb fc27 	bl	8001110 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d13f      	bne.n	8005954 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058e8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005926:	64ba      	str	r2, [r7, #72]	; 0x48
 8005928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800592c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e068      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d050      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005970:	d148      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800597a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
 800599c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e6      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	613b      	str	r3, [r7, #16]
   return(result);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ce:	623a      	str	r2, [r7, #32]
 80059d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	69f9      	ldr	r1, [r7, #28]
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	61bb      	str	r3, [r7, #24]
   return(result);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e010      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	f43f af48 	beq.w	80058b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3770      	adds	r7, #112	; 0x70
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b097      	sub	sp, #92	; 0x5c
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d10e      	bne.n	8005a82 <UART_Start_Receive_IT+0x52>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <UART_Start_Receive_IT+0x48>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a76:	e02d      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a80:	e028      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <UART_Start_Receive_IT+0x76>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <UART_Start_Receive_IT+0x6c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a9a:	e01b      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	227f      	movs	r2, #127	; 0x7f
 8005aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa4:	e016      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aae:	d10d      	bne.n	8005acc <UART_Start_Receive_IT+0x9c>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <UART_Start_Receive_IT+0x92>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	227f      	movs	r2, #127	; 0x7f
 8005abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac0:	e008      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	223f      	movs	r2, #63	; 0x3f
 8005ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aca:	e003      	b.n	8005ad4 <UART_Start_Receive_IT+0xa4>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2222      	movs	r2, #34	; 0x22
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	657b      	str	r3, [r7, #84]	; 0x54
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b04:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e5      	bne.n	8005ae4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d107      	bne.n	8005b32 <UART_Start_Receive_IT+0x102>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <UART_Start_Receive_IT+0x184>)
 8005b2e:	669a      	str	r2, [r3, #104]	; 0x68
 8005b30:	e002      	b.n	8005b38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <UART_Start_Receive_IT+0x188>)
 8005b36:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_Start_Receive_IT+0x110>
 8005b72:	e018      	b.n	8005ba6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	613b      	str	r3, [r7, #16]
   return(result);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f043 0320 	orr.w	r3, r3, #32
 8005b88:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	69f9      	ldr	r1, [r7, #28]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e6      	bne.n	8005b74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	375c      	adds	r7, #92	; 0x5c
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	080061db 	.word	0x080061db
 8005bb8:	08006075 	.word	0x08006075

08005bbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b096      	sub	sp, #88	; 0x58
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2222      	movs	r2, #34	; 0x22
 8005be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d028      	beq.n	8005c42 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	4a3e      	ldr	r2, [pc, #248]	; (8005cf0 <UART_Start_Receive_DMA+0x134>)
 8005bf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfc:	4a3d      	ldr	r2, [pc, #244]	; (8005cf4 <UART_Start_Receive_DMA+0x138>)
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	4a3c      	ldr	r2, [pc, #240]	; (8005cf8 <UART_Start_Receive_DMA+0x13c>)
 8005c06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3324      	adds	r3, #36	; 0x24
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	461a      	mov	r2, r3
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	f7fb fbb5 	bl	8001392 <HAL_DMA_Start_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2210      	movs	r2, #16
 8005c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e051      	b.n	8005ce6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	653b      	str	r3, [r7, #80]	; 0x50
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c9c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cd0:	623a      	str	r2, [r7, #32]
 8005cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3758      	adds	r7, #88	; 0x58
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	08005e11 	.word	0x08005e11
 8005cf4:	08005f39 	.word	0x08005f39
 8005cf8:	08005f77 	.word	0x08005f77

08005cfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	; 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005d3c:	bf00      	nop
 8005d3e:	3724      	adds	r7, #36	; 0x24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b095      	sub	sp, #84	; 0x54
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d118      	bne.n	8005df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e04:	bf00      	nop
 8005e06:	3754      	adds	r7, #84	; 0x54
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b09c      	sub	sp, #112	; 0x70
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e26:	d071      	beq.n	8005f0c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e82:	647a      	str	r2, [r7, #68]	; 0x44
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d118      	bne.n	8005f0c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	617b      	str	r3, [r7, #20]
   return(result);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e6      	bne.n	8005eda <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d107      	bne.n	8005f2a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f20:	4619      	mov	r1, r3
 8005f22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f24:	f7ff f974 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f28:	e002      	b.n	8005f30 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8005f2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f2c:	f7ff f952 	bl	80051d4 <HAL_UART_RxCpltCallback>
}
 8005f30:	bf00      	nop
 8005f32:	3770      	adds	r7, #112	; 0x70
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d109      	bne.n	8005f68 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff f955 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f66:	e002      	b.n	8005f6e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff f93d 	bl	80051e8 <HAL_UART_RxHalfCpltCallback>
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d109      	bne.n	8005fb4 <UART_DMAError+0x3e>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b21      	cmp	r3, #33	; 0x21
 8005fa4:	d106      	bne.n	8005fb4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005fae:	6978      	ldr	r0, [r7, #20]
 8005fb0:	f7ff fea4 	bl	8005cfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d109      	bne.n	8005fd6 <UART_DMAError+0x60>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b22      	cmp	r3, #34	; 0x22
 8005fc6:	d106      	bne.n	8005fd6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005fd0:	6978      	ldr	r0, [r7, #20]
 8005fd2:	f7ff feb9 	bl	8005d48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	f043 0210 	orr.w	r2, r3, #16
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	f7ff f908 	bl	80051fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff f8f2 	bl	80051fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	60bb      	str	r3, [r7, #8]
   return(result);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6979      	ldr	r1, [r7, #20]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	613b      	str	r3, [r7, #16]
   return(result);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e6      	bne.n	8006028 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff f8aa 	bl	80051c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606c:	bf00      	nop
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b096      	sub	sp, #88	; 0x58
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006082:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800608c:	2b22      	cmp	r3, #34	; 0x22
 800608e:	f040 8098 	bne.w	80061c2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800609c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80060a0:	b2d9      	uxtb	r1, r3
 80060a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	400a      	ands	r2, r1
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d17b      	bne.n	80061d2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ee:	653b      	str	r3, [r7, #80]	; 0x50
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	647b      	str	r3, [r7, #68]	; 0x44
 80060fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	623b      	str	r3, [r7, #32]
   return(result);
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612c:	633a      	str	r2, [r7, #48]	; 0x30
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006158:	2b01      	cmp	r3, #1
 800615a:	d12e      	bne.n	80061ba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	617b      	str	r3, [r7, #20]
   return(result);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d103      	bne.n	80061aa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2210      	movs	r2, #16
 80061a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f82c 	bl	8005210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061b8:	e00b      	b.n	80061d2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff f80a 	bl	80051d4 <HAL_UART_RxCpltCallback>
}
 80061c0:	e007      	b.n	80061d2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0208 	orr.w	r2, r2, #8
 80061d0:	619a      	str	r2, [r3, #24]
}
 80061d2:	bf00      	nop
 80061d4:	3758      	adds	r7, #88	; 0x58
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b096      	sub	sp, #88	; 0x58
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f2:	2b22      	cmp	r3, #34	; 0x22
 80061f4:	f040 8098 	bne.w	8006328 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006208:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800620c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006210:	4013      	ands	r3, r2
 8006212:	b29a      	uxth	r2, r3
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d17b      	bne.n	8006338 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	643b      	str	r3, [r7, #64]	; 0x40
 8006260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e6      	bne.n	8006240 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	61fb      	str	r3, [r7, #28]
   return(result);
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	64bb      	str	r3, [r7, #72]	; 0x48
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d12e      	bne.n	8006320 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b10      	cmp	r3, #16
 8006306:	d103      	bne.n	8006310 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2210      	movs	r2, #16
 800630e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fe ff79 	bl	8005210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800631e:	e00b      	b.n	8006338 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fe ff57 	bl	80051d4 <HAL_UART_RxCpltCallback>
}
 8006326:	e007      	b.n	8006338 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	619a      	str	r2, [r3, #24]
}
 8006338:	bf00      	nop
 800633a:	3758      	adds	r7, #88	; 0x58
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006340:	b084      	sub	sp, #16
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	f107 001c 	add.w	r0, r7, #28
 800634e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2b01      	cmp	r3, #1
 8006356:	d120      	bne.n	800639a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	4b20      	ldr	r3, [pc, #128]	; (80063ec <USB_CoreInit+0xac>)
 800636a:	4013      	ands	r3, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d105      	bne.n	800638e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa96 	bl	80068c0 <USB_CoreReset>
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	e010      	b.n	80063bc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa8a 	bl	80068c0 <USB_CoreReset>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d10b      	bne.n	80063da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f043 0206 	orr.w	r2, r3, #6
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e6:	b004      	add	sp, #16
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	ffbdffbf 	.word	0xffbdffbf

080063f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f023 0201 	bic.w	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d115      	bne.n	8006460 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006440:	2001      	movs	r0, #1
 8006442:	f7fa fe71 	bl	8001128 <HAL_Delay>
      ms++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa29 	bl	80068a4 <USB_GetMode>
 8006452:	4603      	mov	r3, r0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d01e      	beq.n	8006496 <USB_SetCurrentMode+0x84>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b31      	cmp	r3, #49	; 0x31
 800645c:	d9f0      	bls.n	8006440 <USB_SetCurrentMode+0x2e>
 800645e:	e01a      	b.n	8006496 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d115      	bne.n	8006492 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006472:	2001      	movs	r0, #1
 8006474:	f7fa fe58 	bl	8001128 <HAL_Delay>
      ms++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa10 	bl	80068a4 <USB_GetMode>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <USB_SetCurrentMode+0x84>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b31      	cmp	r3, #49	; 0x31
 800648e:	d9f0      	bls.n	8006472 <USB_SetCurrentMode+0x60>
 8006490:	e001      	b.n	8006496 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e005      	b.n	80064a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b32      	cmp	r3, #50	; 0x32
 800649a:	d101      	bne.n	80064a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064ac:	b084      	sub	sp, #16
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e009      	b.n	80064e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3340      	adds	r3, #64	; 0x40
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3301      	adds	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b0e      	cmp	r3, #14
 80064e4:	d9f2      	bls.n	80064cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11c      	bne.n	8006526 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e005      	b.n	8006532 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006538:	461a      	mov	r2, r3
 800653a:	2300      	movs	r3, #0
 800653c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	4619      	mov	r1, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	461a      	mov	r2, r3
 800654e:	680b      	ldr	r3, [r1, #0]
 8006550:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10c      	bne.n	8006572 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800655e:	2100      	movs	r1, #0
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f965 	bl	8006830 <USB_SetDevSpeed>
 8006566:	e008      	b.n	800657a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006568:	2101      	movs	r1, #1
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f960 	bl	8006830 <USB_SetDevSpeed>
 8006570:	e003      	b.n	800657a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006572:	2103      	movs	r1, #3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f95b 	bl	8006830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800657a:	2110      	movs	r1, #16
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f8f3 	bl	8006768 <USB_FlushTxFifo>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f91f 	bl	80067d0 <USB_FlushRxFifo>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	461a      	mov	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e043      	b.n	800664e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065dc:	d118      	bne.n	8006610 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	461a      	mov	r2, r3
 80065f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e013      	b.n	8006622 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e008      	b.n	8006622 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	461a      	mov	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	461a      	mov	r2, r3
 8006642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	3301      	adds	r3, #1
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3b7      	bcc.n	80065c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	e043      	b.n	80066e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800666e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006672:	d118      	bne.n	80066a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	461a      	mov	r2, r3
 8006688:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	e013      	b.n	80066b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	461a      	mov	r2, r3
 800669e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e008      	b.n	80066b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	461a      	mov	r2, r3
 80066c6:	2300      	movs	r3, #0
 80066c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	461a      	mov	r2, r3
 80066d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3b7      	bcc.n	800665c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800670c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f043 0210 	orr.w	r2, r3, #16
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <USB_DevInit+0x2b4>)
 8006726:	4313      	orrs	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800672c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f043 0208 	orr.w	r2, r3, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d105      	bne.n	8006750 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <USB_DevInit+0x2b8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800675c:	b004      	add	sp, #16
 800675e:	4770      	bx	lr
 8006760:	803c3800 	.word	0x803c3800
 8006764:	40000004 	.word	0x40000004

08006768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a13      	ldr	r2, [pc, #76]	; (80067cc <USB_FlushTxFifo+0x64>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e01b      	b.n	80067c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	daf2      	bge.n	8006776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	019b      	lsls	r3, r3, #6
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <USB_FlushTxFifo+0x64>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e006      	b.n	80067c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d0f0      	beq.n	80067a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	00030d40 	.word	0x00030d40

080067d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <USB_FlushRxFifo+0x5c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e018      	b.n	8006820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	daf2      	bge.n	80067dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2210      	movs	r2, #16
 80067fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a08      	ldr	r2, [pc, #32]	; (800682c <USB_FlushRxFifo+0x5c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e006      	b.n	8006820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b10      	cmp	r3, #16
 800681c:	d0f0      	beq.n	8006800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	00030d40 	.word	0x00030d40

08006830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800687c:	f023 0303 	bic.w	r3, r3, #3
 8006880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0301 	and.w	r3, r3, #1
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <USB_CoreReset+0x64>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d901      	bls.n	80068de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e01b      	b.n	8006916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	daf2      	bge.n	80068cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <USB_CoreReset+0x64>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e006      	b.n	8006916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b01      	cmp	r3, #1
 8006912:	d0f0      	beq.n	80068f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	00030d40 	.word	0x00030d40

08006928 <memset>:
 8006928:	4402      	add	r2, r0
 800692a:	4603      	mov	r3, r0
 800692c:	4293      	cmp	r3, r2
 800692e:	d100      	bne.n	8006932 <memset+0xa>
 8006930:	4770      	bx	lr
 8006932:	f803 1b01 	strb.w	r1, [r3], #1
 8006936:	e7f9      	b.n	800692c <memset+0x4>

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f000 f818 	bl	8006980 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	080069b8 	.word	0x080069b8
 8006974:	080069b8 	.word	0x080069b8
 8006978:	080069b8 	.word	0x080069b8
 800697c:	080069bc 	.word	0x080069bc

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
