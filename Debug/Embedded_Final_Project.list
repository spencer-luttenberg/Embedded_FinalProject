
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007458  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007680  08007680  00022a8c  2**0
                  CONTENTS
  4 .ARM          00000008  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007688  08007688  00022a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a8c  20000000  08007690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20002a8c  0800a11c  00022a8c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000345c  0800a11c  0002345c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022a8c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00022abc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b2f  00000000  00000000  00022aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be9  00000000  00000000  0003962e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f87  00000000  00000000  0003d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027265  00000000  00000000  0003e557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b67  00000000  00000000  000657bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3c8b  00000000  00000000  0007e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a44  00000000  00000000  00171fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001779f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002a8c 	.word	0x20002a8c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007610 	.word	0x08007610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002a90 	.word	0x20002a90
 800020c:	08007610 	.word	0x08007610

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <set_motor_pwm>:
extern TIM_HandleTypeDef htim10;


float current_duty_cycle = 0.0;

void set_motor_pwm(uint8_t motor_ID, float duty_cycle){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	ed87 0a00 	vstr	s0, [r7]
 80005b8:	71fb      	strb	r3, [r7, #7]
	switch(motor_ID){
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d028      	beq.n	8000612 <set_motor_pwm+0x66>
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	dc37      	bgt.n	8000634 <set_motor_pwm+0x88>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <set_motor_pwm+0x22>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d011      	beq.n	80005f0 <set_motor_pwm+0x44>
	{
		TIM4->CCR2 = (65535-1)*(duty_cycle/100);
		break;
	}
	}
};
 80005cc:	e032      	b.n	8000634 <set_motor_pwm+0x88>
		TIM1->CCR4 = (65535-1)*(duty_cycle/100);
 80005ce:	ed97 7a00 	vldr	s14, [r7]
 80005d2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000640 <set_motor_pwm+0x94>
 80005d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005da:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000644 <set_motor_pwm+0x98>
 80005de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <set_motor_pwm+0x9c>)
 80005e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e8:	ee17 2a90 	vmov	r2, s15
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80005ee:	e021      	b.n	8000634 <set_motor_pwm+0x88>
		TIM3->CCR1 = (65535-1)*(duty_cycle/100);
 80005f0:	ed97 7a00 	vldr	s14, [r7]
 80005f4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000640 <set_motor_pwm+0x94>
 80005f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005fc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000644 <set_motor_pwm+0x98>
 8000600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <set_motor_pwm+0xa0>)
 8000606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800060a:	ee17 2a90 	vmov	r2, s15
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000610:	e010      	b.n	8000634 <set_motor_pwm+0x88>
		TIM4->CCR2 = (65535-1)*(duty_cycle/100);
 8000612:	ed97 7a00 	vldr	s14, [r7]
 8000616:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000640 <set_motor_pwm+0x94>
 800061a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800061e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000644 <set_motor_pwm+0x98>
 8000622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <set_motor_pwm+0xa4>)
 8000628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062c:	ee17 2a90 	vmov	r2, s15
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000632:	bf00      	nop
};
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	42c80000 	.word	0x42c80000
 8000644:	477ffe00 	.word	0x477ffe00
 8000648:	40010000 	.word	0x40010000
 800064c:	40000400 	.word	0x40000400
 8000650:	40000800 	.word	0x40000800

08000654 <set_fish_motor_states>:

void set_fish_motor_states(uint8_t state){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	//Bit format = 0b00000MBT
	switch(state){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b07      	cmp	r3, #7
 8000662:	f200 8093 	bhi.w	800078c <set_fish_motor_states+0x138>
 8000666:	a201      	add	r2, pc, #4	; (adr r2, 800066c <set_fish_motor_states+0x18>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	0800068d 	.word	0x0800068d
 8000670:	080006ad 	.word	0x080006ad
 8000674:	080006cd 	.word	0x080006cd
 8000678:	080006ed 	.word	0x080006ed
 800067c:	0800070d 	.word	0x0800070d
 8000680:	0800072d 	.word	0x0800072d
 8000684:	0800074d 	.word	0x0800074d
 8000688:	0800076d 	.word	0x0800076d
	case 0x00:
	{
		//M:0 B:0 T:0
		set_motor_pwm(MOUTH_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 800068c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8000794 <set_fish_motor_states+0x140>
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 8000696:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8000794 <set_fish_motor_states+0x140>
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff ff86 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006a0:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8000794 <set_fish_motor_states+0x140>
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff ff81 	bl	80005ac <set_motor_pwm>
		break;
 80006aa:	e06f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x01:
	{
		//M:0 B:0 T:1
		set_motor_pwm(MOUTH_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006ac:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8000794 <set_fish_motor_states+0x140>
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff7b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006b6:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8000794 <set_fish_motor_states+0x140>
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff76 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_ON_DUTY_CYCLE);
 80006c0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8000798 <set_fish_motor_states+0x144>
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff ff71 	bl	80005ac <set_motor_pwm>
		break;
 80006ca:	e05f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x02:
	{
		//M:0 B:1 T:0
		set_motor_pwm(MOUTH_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006cc:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000794 <set_fish_motor_states+0x140>
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff6b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_BODY_DUTY_CYCLE);
 80006d6:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8000798 <set_fish_motor_states+0x144>
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff66 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006e0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8000794 <set_fish_motor_states+0x140>
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff61 	bl	80005ac <set_motor_pwm>
		break;
 80006ea:	e04f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x03:
	{
		//M:0 B:1 T:1
		set_motor_pwm(MOUTH_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80006ec:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000794 <set_fish_motor_states+0x140>
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff5b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_BODY_DUTY_CYCLE);
 80006f6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8000798 <set_fish_motor_states+0x144>
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff56 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_ON_DUTY_CYCLE);
 8000700:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8000798 <set_fish_motor_states+0x144>
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff ff51 	bl	80005ac <set_motor_pwm>
		break;
 800070a:	e03f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x04:
	{
		//M:1 B:0 T:0
		set_motor_pwm(MOUTH_MOTOR, MOTOR_ON_DUTY_CYCLE);
 800070c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000798 <set_fish_motor_states+0x144>
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff4b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 8000716:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000794 <set_fish_motor_states+0x140>
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff46 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 8000720:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8000794 <set_fish_motor_states+0x140>
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff ff41 	bl	80005ac <set_motor_pwm>
		break;
 800072a:	e02f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x05:
	{
		//M:1 B:0 T:1
		set_motor_pwm(MOUTH_MOTOR, MOTOR_ON_DUTY_CYCLE);
 800072c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000798 <set_fish_motor_states+0x144>
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff3b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 8000736:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000794 <set_fish_motor_states+0x140>
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ff36 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_ON_DUTY_CYCLE);
 8000740:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000798 <set_fish_motor_states+0x144>
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff ff31 	bl	80005ac <set_motor_pwm>
		break;
 800074a:	e01f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x06:
	{
		//M:1 B:1 T:0
		set_motor_pwm(MOUTH_MOTOR, MOTOR_ON_DUTY_CYCLE);
 800074c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000798 <set_fish_motor_states+0x144>
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff2b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_BODY_DUTY_CYCLE);
 8000756:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000798 <set_fish_motor_states+0x144>
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ff26 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 8000760:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000794 <set_fish_motor_states+0x140>
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff ff21 	bl	80005ac <set_motor_pwm>
		break;
 800076a:	e00f      	b.n	800078c <set_fish_motor_states+0x138>
	}
	case 0x07:
	{
		//M:1 B:1 T:1
		set_motor_pwm(MOUTH_MOTOR, MOTOR_ON_DUTY_CYCLE);
 800076c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000798 <set_fish_motor_states+0x144>
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff1b 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(BODY_MOTOR, MOTOR_BODY_DUTY_CYCLE);
 8000776:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000798 <set_fish_motor_states+0x144>
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff16 	bl	80005ac <set_motor_pwm>
		set_motor_pwm(TAIL_MOTOR, MOTOR_ON_DUTY_CYCLE);
 8000780:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000798 <set_fish_motor_states+0x144>
 8000784:	2002      	movs	r0, #2
 8000786:	f7ff ff11 	bl	80005ac <set_motor_pwm>
		break;
 800078a:	bf00      	nop
	}
	}
};
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	00000000 	.word	0x00000000
 8000798:	42c80000 	.word	0x42c80000

0800079c <reset_fish_motors>:
void reset_fish_motors(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	set_motor_pwm(MOUTH_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80007a0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80007c4 <reset_fish_motors+0x28>
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff01 	bl	80005ac <set_motor_pwm>
	set_motor_pwm(BODY_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80007aa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80007c4 <reset_fish_motors+0x28>
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fefc 	bl	80005ac <set_motor_pwm>
	set_motor_pwm(TAIL_MOTOR, MOTOR_OFF_DUTY_CYCLE);
 80007b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80007c4 <reset_fish_motors+0x28>
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fef7 	bl	80005ac <set_motor_pwm>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	00000000 	.word	0x00000000

080007c8 <loadSongsIntoMemory>:
extern uint8_t* currently_loaded_songs[MAX_FISH_SONGS];
extern uint8_t current_fish_state;
extern uint16_t i_play;
extern uint8_t initial_start_playing;

void loadSongsIntoMemory(){
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	currently_loaded_songs[0] = loaded_songs[0];
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <loadSongsIntoMemory+0x20>)
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <loadSongsIntoMemory+0x24>)
 80007d0:	601a      	str	r2, [r3, #0]
	currently_loaded_songs[1] = loaded_songs[1];
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <loadSongsIntoMemory+0x20>)
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <loadSongsIntoMemory+0x28>)
 80007d6:	605a      	str	r2, [r3, #4]
	currently_loaded_songs[2] = loaded_songs[2];
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <loadSongsIntoMemory+0x20>)
 80007da:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <loadSongsIntoMemory+0x2c>)
 80007dc:	609a      	str	r2, [r3, #8]
	//currently_loaded_songs = loaded_songs;
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200032fc 	.word	0x200032fc
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000e10 	.word	0x20000e10
 80007f4:	20001c20 	.word	0x20001c20

080007f8 <playSong>:


int playSong() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	// gather memory


	i_play = 0;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <playSong+0x34>)
 80007fe:	2200      	movs	r2, #0
 8000800:	801a      	strh	r2, [r3, #0]
	initial_start_playing = 1;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <playSong+0x38>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]

	current_song_data = currently_loaded_songs[current_song];
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <playSong+0x3c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <playSong+0x40>)
 8000810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000814:	4a09      	ldr	r2, [pc, #36]	; (800083c <playSong+0x44>)
 8000816:	6013      	str	r3, [r2, #0]
	//load into memory current song

	// current state is playing
	current_fish_state = FISH_PLAYING_STATE;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <playSong+0x48>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

	return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200032fa 	.word	0x200032fa
 8000830:	200032f8 	.word	0x200032f8
 8000834:	200032f0 	.word	0x200032f0
 8000838:	200032fc 	.word	0x200032fc
 800083c:	200032f4 	.word	0x200032f4
 8000840:	20003308 	.word	0x20003308

08000844 <stopSong>:


int stopSong() {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	// Stop playing song, return to idle mode
	uint8_t dataTemp[] = "q";
 800084a:	2371      	movs	r3, #113	; 0x71
 800084c:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	230a      	movs	r3, #10
 8000852:	2202      	movs	r2, #2
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <stopSong+0x4c>)
 8000856:	f005 faa7 	bl	8005da8 <HAL_UART_Transmit>
//	HAL_Delay(300);
//	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
//	HAL_Delay(100);

	// iterate song
	current_song++;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <stopSong+0x50>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <stopSong+0x50>)
 8000864:	701a      	strb	r2, [r3, #0]
	if(current_song > MAX_FISH_SONGS-1){
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <stopSong+0x50>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d902      	bls.n	8000874 <stopSong+0x30>
		current_song = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <stopSong+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	}

	// reset play counter
	i_play = 0;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <stopSong+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]

	// current state is paused
	current_fish_state = FISH_PAUSED_STATE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <stopSong+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
	reset_fish_motors();
 8000880:	f7ff ff8c 	bl	800079c <reset_fish_motors>
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20002d00 	.word	0x20002d00
 8000894:	200032f0 	.word	0x200032f0
 8000898:	200032fa 	.word	0x200032fa
 800089c:	20003308 	.word	0x20003308

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f001 f93c 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f889 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 fbef 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b2:	f000 fbcf 	bl	8001054 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 fb3f 	bl	8000f38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ba:	f000 fb9d 	bl	8000ff8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80008be:	f000 fa27 	bl	8000d10 <MX_TIM3_Init>
  MX_TIM10_Init();
 80008c2:	f000 fb15 	bl	8000ef0 <MX_TIM10_Init>
  MX_TIM1_Init();
 80008c6:	f000 f921 	bl	8000b0c <MX_TIM1_Init>
  MX_TIM4_Init();
 80008ca:	f000 fa99 	bl	8000e00 <MX_TIM4_Init>
  MX_I2C1_Init();
 80008ce:	f000 f8dd 	bl	8000a8c <MX_I2C1_Init>
  MX_TIM2_Init();
 80008d2:	f000 f9c5 	bl	8000c60 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80008d6:	f000 fb5f 	bl	8000f98 <MX_USART6_UART_Init>
//  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
//  HAL_Delay(300);
//  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
//  HAL_Delay(100);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	482d      	ldr	r0, [pc, #180]	; (8000994 <main+0xf4>)
 80008de:	f004 f90d 	bl	8004afc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008e2:	210c      	movs	r1, #12
 80008e4:	482c      	ldr	r0, [pc, #176]	; (8000998 <main+0xf8>)
 80008e6:	f004 f909 	bl	8004afc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80008ea:	2104      	movs	r1, #4
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <main+0xfc>)
 80008ee:	f004 f905 	bl	8004afc <HAL_TIM_PWM_Start>


  //HAL_TIM_Base_Start_IT(&htim10);

  //playSong();
  loadSongsIntoMemory();
 80008f2:	f7ff ff69 	bl	80007c8 <loadSongsIntoMemory>
  //stopSong();
  HAL_Delay(1000);
 80008f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fa:	f001 f96f 	bl	8001bdc <HAL_Delay>


	uint8_t dataTemp[] = "q";
 80008fe:	2371      	movs	r3, #113	; 0x71
 8000900:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 10);
 8000902:	f107 010c 	add.w	r1, r7, #12
 8000906:	230a      	movs	r3, #10
 8000908:	2202      	movs	r2, #2
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <main+0x100>)
 800090c:	f005 fa4c 	bl	8005da8 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	if(current_fish_state==FISH_PLAYING_STATE){
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <main+0x104>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d1fb      	bne.n	8000910 <main+0x70>
		if(initial_start_playing == 1){
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <main+0x108>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d11b      	bne.n	8000958 <main+0xb8>
		    uint8_t dataTemp[] = "#x\n";
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <main+0x10c>)
 8000922:	60bb      	str	r3, [r7, #8]
		    // Convert the uint8_t variable to a string
		    char variableString[2]; // Assuming a single-digit number
		    snprintf(variableString, sizeof(variableString), "%u", (current_song));
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <main+0x110>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	1d38      	adds	r0, r7, #4
 800092a:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <main+0x114>)
 800092c:	2102      	movs	r1, #2
 800092e:	f006 f9b7 	bl	8006ca0 <sniprintf>
		    // Replace the "2" with the variable in the array
		    dataTemp[1] = variableString[0];
 8000932:	793b      	ldrb	r3, [r7, #4]
 8000934:	727b      	strb	r3, [r7, #9]

			// 0 = Love Sosa - Chief Keef
			// 1 = September - Earth, Wind, and Fire
			// 2 = Swervo - G Herbo
		    HAL_Delay(500);
 8000936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093a:	f001 f94f 	bl	8001bdc <HAL_Delay>
			HAL_UART_Transmit (&huart6, dataTemp, sizeof (dataTemp), 150);
 800093e:	f107 0108 	add.w	r1, r7, #8
 8000942:	2396      	movs	r3, #150	; 0x96
 8000944:	2204      	movs	r2, #4
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <main+0x100>)
 8000948:	f005 fa2e 	bl	8005da8 <HAL_UART_Transmit>
			//HAL_Delay(1000);
			//delay?

			initial_start_playing = 0;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <main+0x108>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
			i_play = 0;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <main+0x118>)
 8000954:	2200      	movs	r2, #0
 8000956:	801a      	strh	r2, [r3, #0]
		}
		uint8_t current_song_byte;
		if(i_play < 3600){
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x118>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000960:	d214      	bcs.n	800098c <main+0xec>
			current_song_byte = current_song_data[i_play];
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <main+0x11c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <main+0x118>)
 8000968:	8812      	ldrh	r2, [r2, #0]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	73fb      	strb	r3, [r7, #15]
			set_fish_motor_states(current_song_byte);
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe6e 	bl	8000654 <set_fish_motor_states>
			i_play++;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x118>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <main+0x118>)
 8000982:	801a      	strh	r2, [r3, #0]
			HAL_Delay(83.33333);
 8000984:	2053      	movs	r0, #83	; 0x53
 8000986:	f001 f929 	bl	8001bdc <HAL_Delay>
 800098a:	e7c1      	b.n	8000910 <main+0x70>
		}
		else{
			stopSong();
 800098c:	f7ff ff5a 	bl	8000844 <stopSong>
	  	if(current_fish_state==FISH_PLAYING_STATE){
 8000990:	e7be      	b.n	8000910 <main+0x70>
 8000992:	bf00      	nop
 8000994:	20002b94 	.word	0x20002b94
 8000998:	20002afc 	.word	0x20002afc
 800099c:	20002be0 	.word	0x20002be0
 80009a0:	20002d00 	.word	0x20002d00
 80009a4:	20003308 	.word	0x20003308
 80009a8:	200032f8 	.word	0x200032f8
 80009ac:	000a7823 	.word	0x000a7823
 80009b0:	200032f0 	.word	0x200032f0
 80009b4:	08007628 	.word	0x08007628
 80009b8:	200032fa 	.word	0x200032fa
 80009bc:	200032f4 	.word	0x200032f4

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 f99a 	bl	8006d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemClock_Config+0xc4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <SystemClock_Config+0xc4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <SystemClock_Config+0xc4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <SystemClock_Config+0xc8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <SystemClock_Config+0xc8>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <SystemClock_Config+0xc8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a30:	2348      	movs	r3, #72	; 0x48
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fef3 	bl	800382c <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a4c:	f000 fc64 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 f981 	bl	8003d74 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a78:	f000 fc4e 	bl	8001318 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3750      	adds	r7, #80	; 0x50
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_I2C1_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x7c>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ac8:	f001 fec2 	bl	8002850 <HAL_I2C_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 fc21 	bl	8001318 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000ada:	f002 fcc8 	bl	800346e <HAL_I2CEx_ConfigAnalogFilter>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 fc18 	bl	8001318 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_I2C1_Init+0x74>)
 8000aec:	f002 fd0a 	bl	8003504 <HAL_I2CEx_ConfigDigitalFilter>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000af6:	f000 fc0f 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20002aa8 	.word	0x20002aa8
 8000b04:	40005400 	.word	0x40005400
 8000b08:	00305fff 	.word	0x00305fff

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09a      	sub	sp, #104	; 0x68
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	222c      	movs	r2, #44	; 0x2c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 f8de 	bl	8006d08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b4c:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b4e:	4a43      	ldr	r2, [pc, #268]	; (8000c5c <MX_TIM1_Init+0x150>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b78:	4837      	ldr	r0, [pc, #220]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b7a:	f003 ff11 	bl	80049a0 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 fbc8 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b92:	4619      	mov	r1, r3
 8000b94:	4830      	ldr	r0, [pc, #192]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000b96:	f004 fadf 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ba0:	f000 fbba 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ba4:	482c      	ldr	r0, [pc, #176]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000ba6:	f003 ff52 	bl	8004a4e <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bb0:	f000 fbb2 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000bc8:	f004 ff76 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bd2:	f000 fba1 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd6:	2360      	movs	r3, #96	; 0x60
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be6:	2300      	movs	r3, #0
 8000be8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000bf8:	f004 f99a 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c02:	f000 fb89 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000c3c:	f004 ffca 	bl	8005bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000c46:	f000 fb67 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM1_Init+0x14c>)
 8000c4c:	f000 fc86 	bl	800155c <HAL_TIM_MspPostInit>

}
 8000c50:	bf00      	nop
 8000c52:	3768      	adds	r7, #104	; 0x68
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20002afc 	.word	0x20002afc
 8000c5c:	40010000 	.word	0x40010000

08000c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000caa:	4818      	ldr	r0, [pc, #96]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000cac:	f003 fecf 	bl	8004a4e <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cb6:	f000 fb2f 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4810      	ldr	r0, [pc, #64]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000cca:	f004 fef5 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cd4:	f000 fb20 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2360      	movs	r3, #96	; 0x60
 8000cda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000cf0:	f004 f91e 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cfa:	f000 fb0d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <MX_TIM2_Init+0xac>)
 8000d00:	f000 fc2c 	bl	800155c <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20002b48 	.word	0x20002b48

08000d10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_TIM3_Init+0xec>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d6a:	f003 fe19 	bl	80049a0 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d74:	f000 fad0 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	4619      	mov	r1, r3
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d86:	f004 f9e7 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d90:	f000 fac2 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d94:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000d96:	f003 fe5a 	bl	8004a4e <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000da0:	f000 faba 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000db4:	f004 fe80 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dbe:	f000 faab 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	; 0x60
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 8000dc6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000dca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000ddc:	f004 f8a8 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000de6:	f000 fa97 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM3_Init+0xe8>)
 8000dec:	f000 fbb6 	bl	800155c <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3738      	adds	r7, #56	; 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20002b94 	.word	0x20002b94
 8000dfc:	40000400 	.word	0x40000400

08000e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e32:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <MX_TIM4_Init+0xec>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e58:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e5a:	f003 fda1 	bl	80049a0 <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e64:	f000 fa58 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	4619      	mov	r1, r3
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e76:	f004 f96f 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e80:	f000 fa4a 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e84:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000e86:	f003 fde2 	bl	8004a4e <HAL_TIM_PWM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e90:	f000 fa42 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000ea4:	f004 fe08 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000eae:	f000 fa33 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000eca:	f004 f831 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ed4:	f000 fa20 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM4_Init+0xe8>)
 8000eda:	f000 fb3f 	bl	800155c <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3738      	adds	r7, #56	; 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20002be0 	.word	0x20002be0
 8000eec:	40000800 	.word	0x40000800

08000ef0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <MX_TIM10_Init+0x44>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000efc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f00:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000f0a:	2263      	movs	r2, #99	; 0x63
 8000f0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_TIM10_Init+0x40>)
 8000f1c:	f003 fd40 	bl	80049a0 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f26:	f000 f9f7 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20002c2c 	.word	0x20002c2c
 8000f34:	40014400 	.word	0x40014400

08000f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f60:	220c      	movs	r2, #12
 8000f62:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7e:	f004 fec5 	bl	8005d0c <HAL_UART_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000f88:	f000 f9c6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20002c78 	.word	0x20002c78
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_USART6_UART_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fdc:	f004 fe96 	bl	8005d0c <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f997 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002d00 	.word	0x20002d00
 8000ff4:	40011400 	.word	0x40011400

08000ff8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001006:	2206      	movs	r2, #6
 8001008:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100c:	2202      	movs	r2, #2
 800100e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001018:	2202      	movs	r2, #2
 800101a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101e:	2201      	movs	r2, #1
 8001020:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001030:	2201      	movs	r2, #1
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103c:	f002 faae 	bl	800359c <HAL_PCD_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001046:	f000 f967 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20002de8 	.word	0x20002de8

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_DMA_Init+0x38>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <MX_DMA_Init+0x38>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_DMA_Init+0x38>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200c      	movs	r0, #12
 8001078:	f000 feaf 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800107c:	200c      	movs	r0, #12
 800107e:	f000 fec8 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b8d      	ldr	r3, [pc, #564]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a8c      	ldr	r2, [pc, #560]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b8a      	ldr	r3, [pc, #552]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b87      	ldr	r3, [pc, #540]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a86      	ldr	r2, [pc, #536]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b84      	ldr	r3, [pc, #528]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a80      	ldr	r2, [pc, #512]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b7b      	ldr	r3, [pc, #492]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a7a      	ldr	r2, [pc, #488]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b78      	ldr	r3, [pc, #480]	; (80012dc <MX_GPIO_Init+0x24c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b75      	ldr	r3, [pc, #468]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a74      	ldr	r2, [pc, #464]	; (80012dc <MX_GPIO_Init+0x24c>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b72      	ldr	r3, [pc, #456]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <MX_GPIO_Init+0x24c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	4b69      	ldr	r3, [pc, #420]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a68      	ldr	r2, [pc, #416]	; (80012dc <MX_GPIO_Init+0x24c>)
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b66      	ldr	r3, [pc, #408]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a62      	ldr	r2, [pc, #392]	; (80012dc <MX_GPIO_Init+0x24c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <MX_GPIO_Init+0x24c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f244 0181 	movw	r1, #16513	; 0x4081
 800116c:	485c      	ldr	r0, [pc, #368]	; (80012e0 <MX_GPIO_Init+0x250>)
 800116e:	f001 fb31 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001178:	485a      	ldr	r0, [pc, #360]	; (80012e4 <MX_GPIO_Init+0x254>)
 800117a:	f001 fb2b 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2141      	movs	r1, #65	; 0x41
 8001182:	4859      	ldr	r0, [pc, #356]	; (80012e8 <MX_GPIO_Init+0x258>)
 8001184:	f001 fb26 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4853      	ldr	r0, [pc, #332]	; (80012ec <MX_GPIO_Init+0x25c>)
 80011a0:	f001 f96c 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a4:	2332      	movs	r3, #50	; 0x32
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b4:	230b      	movs	r3, #11
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	484b      	ldr	r0, [pc, #300]	; (80012ec <MX_GPIO_Init+0x25c>)
 80011c0:	f001 f95c 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011c4:	2386      	movs	r3, #134	; 0x86
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d4:	230b      	movs	r3, #11
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4844      	ldr	r0, [pc, #272]	; (80012f0 <MX_GPIO_Init+0x260>)
 80011e0:	f001 f94c 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4838      	ldr	r0, [pc, #224]	; (80012e0 <MX_GPIO_Init+0x250>)
 80011fe:	f001 f93d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4832      	ldr	r0, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x254>)
 800121c:	f001 f92e 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8001220:	2341      	movs	r3, #65	; 0x41
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_GPIO_Init+0x258>)
 8001238:	f001 f920 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124e:	230b      	movs	r3, #11
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <MX_GPIO_Init+0x250>)
 800125a:	f001 f90f 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	481d      	ldr	r0, [pc, #116]	; (80012e8 <MX_GPIO_Init+0x258>)
 8001272:	f001 f903 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001280:	2302      	movs	r3, #2
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MX_GPIO_Init+0x264>)
 800128c:	f001 f8f6 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001290:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a2:	230b      	movs	r3, #11
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_GPIO_Init+0x258>)
 80012ae:	f001 f8e5 	bl	800247c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2017      	movs	r0, #23
 80012b8:	f000 fd8f 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012bc:	2017      	movs	r0, #23
 80012be:	f000 fda8 	bl	8001e12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2028      	movs	r0, #40	; 0x28
 80012c8:	f000 fd87 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012cc:	2028      	movs	r0, #40	; 0x28
 80012ce:	f000 fda0 	bl	8001e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d2:	bf00      	nop
 80012d4:	3738      	adds	r7, #56	; 0x38
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <HAL_TIM_PeriodElapsedCallback>:


// Playback Function 12Hz
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim10 )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001304:	4293      	cmp	r3, r2
//			stopSong();
//		}
//	}
  }
}
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20002c2c 	.word	0x20002c2c

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x44>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x44>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x44>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x44>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x44>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0aa      	sub	sp, #168	; 0xa8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2284      	movs	r2, #132	; 0x84
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fcbb 	bl	8006d08 <memset>
  if(hi2c->Instance==I2C1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <HAL_I2C_MspInit+0xd4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d14c      	bne.n	8001436 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800139c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 ff08 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013b6:	f7ff ffaf 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80013d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013da:	2312      	movs	r3, #18
 80013dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ec:	2304      	movs	r3, #4
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <HAL_I2C_MspInit+0xdc>)
 80013fa:	f001 f83f 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_I2C_MspInit+0xd8>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201f      	movs	r0, #31
 800141c:	f000 fcdd 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001420:	201f      	movs	r0, #31
 8001422:	f000 fcf6 	bl	8001e12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2020      	movs	r0, #32
 800142c:	f000 fcd5 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001430:	2020      	movs	r0, #32
 8001432:	f000 fcee 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	37a8      	adds	r7, #168	; 0xa8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005400 	.word	0x40005400
 8001444:	40023800 	.word	0x40023800
 8001448:	40020400 	.word	0x40020400

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2c      	ldr	r2, [pc, #176]	; (800150c <HAL_TIM_Base_MspInit+0xc0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2019      	movs	r0, #25
 800147c:	f000 fcad 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001480:	2019      	movs	r0, #25
 8001482:	f000 fcc6 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001486:	e03c      	b.n	8001502 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_TIM_Base_MspInit+0xc8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10c      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
}
 80014aa:	e02a      	b.n	8001502 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_TIM_Base_MspInit+0xcc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10c      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
}
 80014ce:	e018      	b.n	8001502 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_TIM_Base_MspInit+0xd0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d113      	bne.n	8001502 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2019      	movs	r0, #25
 80014f8:	f000 fc6f 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 fc88 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40010000 	.word	0x40010000
 8001510:	40023800 	.word	0x40023800
 8001514:	40000400 	.word	0x40000400
 8001518:	40000800 	.word	0x40000800
 800151c:	40014400 	.word	0x40014400

08001520 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001530:	d10b      	bne.n	800154a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_TIM_MspPostInit+0x134>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11d      	bne.n	80015ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800157e:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a44      	ldr	r2, [pc, #272]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b42      	ldr	r3, [pc, #264]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4839      	ldr	r0, [pc, #228]	; (8001698 <HAL_TIM_MspPostInit+0x13c>)
 80015b4:	f000 ff62 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015b8:	e066      	b.n	8001688 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c2:	d11d      	bne.n	8001600 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4828      	ldr	r0, [pc, #160]	; (800169c <HAL_TIM_MspPostInit+0x140>)
 80015fa:	f000 ff3f 	bl	800247c <HAL_GPIO_Init>
}
 80015fe:	e043      	b.n	8001688 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_TIM_MspPostInit+0x144>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11c      	bne.n	8001644 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001632:	2302      	movs	r3, #2
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <HAL_TIM_MspPostInit+0x140>)
 800163e:	f000 ff1d 	bl	800247c <HAL_GPIO_Init>
}
 8001642:	e021      	b.n	8001688 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_TIM_MspPostInit+0x148>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d11c      	bne.n	8001688 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_TIM_MspPostInit+0x138>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001678:	2302      	movs	r3, #2
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <HAL_TIM_MspPostInit+0x14c>)
 8001684:	f000 fefa 	bl	800247c <HAL_GPIO_Init>
}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010000 	.word	0x40010000
 8001694:	40023800 	.word	0x40023800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020000 	.word	0x40020000
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40020c00 	.word	0x40020c00

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0ac      	sub	sp, #176	; 0xb0
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2284      	movs	r2, #132	; 0x84
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fb1b 	bl	8006d08 <memset>
  if(huart->Instance==USART3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5b      	ldr	r2, [pc, #364]	; (8001844 <HAL_UART_MspInit+0x198>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d16d      	bne.n	80017b8 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fd68 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016f6:	f7ff fe0f 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001744:	2307      	movs	r3, #7
 8001746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174e:	4619      	mov	r1, r3
 8001750:	483e      	ldr	r0, [pc, #248]	; (800184c <HAL_UART_MspInit+0x1a0>)
 8001752:	f000 fe93 	bl	800247c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001758:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <HAL_UART_MspInit+0x1a8>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 800175e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 800178e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001792:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800179a:	482d      	ldr	r0, [pc, #180]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 800179c:	f000 fb54 	bl	8001e48 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80017a6:	f7ff fdb7 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 80017ae:	675a      	str	r2, [r3, #116]	; 0x74
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_UART_MspInit+0x1a4>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017b6:	e040      	b.n	800183a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a26      	ldr	r2, [pc, #152]	; (8001858 <HAL_UART_MspInit+0x1ac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d13b      	bne.n	800183a <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80017c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fcf5 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80017dc:	f7ff fd9c 	bl	8001318 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	6453      	str	r3, [r2, #68]	; 0x44
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_UART_MspInit+0x19c>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_UART_MspInit+0x19c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001810:	23c0      	movs	r3, #192	; 0xc0
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001828:	2308      	movs	r3, #8
 800182a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001832:	4619      	mov	r1, r3
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <HAL_UART_MspInit+0x1b0>)
 8001836:	f000 fe21 	bl	800247c <HAL_GPIO_Init>
}
 800183a:	bf00      	nop
 800183c:	37b0      	adds	r7, #176	; 0xb0
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40004800 	.word	0x40004800
 8001848:	40023800 	.word	0x40023800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	20002d88 	.word	0x20002d88
 8001854:	40026028 	.word	0x40026028
 8001858:	40011400 	.word	0x40011400
 800185c:	40020800 	.word	0x40020800

08001860 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ac      	sub	sp, #176	; 0xb0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	2284      	movs	r2, #132	; 0x84
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fa41 	bl	8006d08 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188e:	d159      	bne.n	8001944 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001890:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fc8d 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018ac:	f7ff fd34 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_PCD_MspInit+0xec>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_PCD_MspInit+0xec>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6313      	str	r3, [r2, #48]	; 0x30
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_PCD_MspInit+0xec>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e2:	230a      	movs	r3, #10
 80018e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <HAL_PCD_MspInit+0xf0>)
 80018f0:	f000 fdc4 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800190c:	4619      	mov	r1, r3
 800190e:	4810      	ldr	r0, [pc, #64]	; (8001950 <HAL_PCD_MspInit+0xf0>)
 8001910:	f000 fdb4 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_PCD_MspInit+0xec>)
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_PCD_MspInit+0xec>)
 800191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191e:	6353      	str	r3, [r2, #52]	; 0x34
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_PCD_MspInit+0xec>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_PCD_MspInit+0xec>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_PCD_MspInit+0xec>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6453      	str	r3, [r2, #68]	; 0x44
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_PCD_MspInit+0xec>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	37b0      	adds	r7, #176	; 0xb0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f8fc 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <DMA1_Stream1_IRQHandler+0x10>)
 80019ae:	f000 fb1b 	bl	8001fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20002d88 	.word	0x20002d88

080019bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0


	//}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Button_Pin);
 80019c0:	2080      	movs	r0, #128	; 0x80
 80019c2:	f000 ff21 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80019d2:	f003 f98d 	bl	8004cf0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80019d8:	f003 f98a 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20002afc 	.word	0x20002afc
 80019e4:	20002c2c 	.word	0x20002c2c

080019e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <I2C1_EV_IRQHandler+0x10>)
 80019ee:	f000 ffbf 	bl	8002970 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20002aa8 	.word	0x20002aa8

080019fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <I2C1_ER_IRQHandler+0x10>)
 8001a02:	f000 ffcf 	bl	80029a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20002aa8 	.word	0x20002aa8

08001a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a18:	f000 fef6 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  switch(current_fish_state){
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <EXTI15_10_IRQHandler+0x2c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <EXTI15_10_IRQHandler+0x1a>
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d003      	beq.n	8001a30 <EXTI15_10_IRQHandler+0x20>
  }

  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	e005      	b.n	8001a36 <EXTI15_10_IRQHandler+0x26>
	  playSong();
 8001a2a:	f7fe fee5 	bl	80007f8 <playSong>
	  break;
 8001a2e:	e002      	b.n	8001a36 <EXTI15_10_IRQHandler+0x26>
	  stopSong();
 8001a30:	f7fe ff08 	bl	8000844 <stopSong>
	  break;
 8001a34:	bf00      	nop
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20003308 	.word	0x20003308

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f005 f952 	bl	8006d18 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20050000 	.word	0x20050000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	2000330c 	.word	0x2000330c
 8001aa8:	20003460 	.word	0x20003460

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f005 f911 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7fe fecd 	bl	80008a0 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20002a8c 	.word	0x20002a8c
  ldr r2, =_sidata
 8001b14:	08007690 	.word	0x08007690
  ldr r2, =_sbss
 8001b18:	20002a8c 	.word	0x20002a8c
  ldr r4, =_ebss
 8001b1c:	2000345c 	.word	0x2000345c

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>

08001b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 f94c 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f000 f805 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fbf7 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f967 	bl	8001e2e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f92f 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20002a30 	.word	0x20002a30
 8001b94:	20002a38 	.word	0x20002a38
 8001b98:	20002a34 	.word	0x20002a34

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20002a38 	.word	0x20002a38
 8001bc0:	20003310 	.word	0x20003310

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20003310 	.word	0x20003310

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20002a38 	.word	0x20002a38

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00
 8001c68:	05fa0000 	.word	0x05fa0000

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff feb6 	bl	8001bc4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e099      	b.n	8001f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fe9d 	bl	8001bc4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d908      	bls.n	8001ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e078      	b.n	8001f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e8      	bne.n	8001e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x158>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fa19 	bl	8002384 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f9d0 	bl	8002318 <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	f010803f 	.word	0xf010803f

08001fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00c      	b.n	8001fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ff4:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <HAL_DMA_IRQHandler+0x248>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a8e      	ldr	r2, [pc, #568]	; (8002234 <HAL_DMA_IRQHandler+0x24c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	2208      	movs	r2, #8
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2208      	movs	r2, #8
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2201      	movs	r2, #1
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2204      	movs	r2, #4
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2204      	movs	r2, #4
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2210      	movs	r2, #16
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d043      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2210      	movs	r2, #16
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d018      	beq.n	800212a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d024      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e01f      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e016      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2220      	movs	r2, #32
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808f 	beq.w	8002288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8087 	beq.w	8002288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	2220      	movs	r2, #32
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d136      	bne.n	8002200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0216 	bic.w	r2, r2, #22
 80021a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x1da>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0208 	bic.w	r2, r2, #8
 80021d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	223f      	movs	r2, #63	; 0x3f
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07e      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
        }
        return;
 80021fe:	e079      	b.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01d      	beq.n	800224a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10d      	bne.n	8002238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	2b00      	cmp	r3, #0
 8002222:	d031      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e02c      	b.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
 800222e:	bf00      	nop
 8002230:	20002a30 	.word	0x20002a30
 8002234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e01e      	b.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10f      	bne.n	8002278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0210 	bic.w	r2, r2, #16
 8002266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	2b00      	cmp	r3, #0
 800228e:	d032      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2205      	movs	r2, #5
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d307      	bcc.n	80022d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f2      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x2cc>
 80022ce:	e000      	b.n	80022d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e000      	b.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f4:	bf00      	nop
    }
  }
}
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3b10      	subs	r3, #16
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <DMA_CalcBaseAndBitshift+0x60>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <DMA_CalcBaseAndBitshift+0x64>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d908      	bls.n	8002358 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <DMA_CalcBaseAndBitshift+0x68>)
 800234e:	4013      	ands	r3, r2
 8002350:	1d1a      	adds	r2, r3, #4
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58
 8002356:	e006      	b.n	8002366 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <DMA_CalcBaseAndBitshift+0x68>)
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	aaaaaaab 	.word	0xaaaaaaab
 800237c:	08007644 	.word	0x08007644
 8002380:	fffffc00 	.word	0xfffffc00

08002384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11f      	bne.n	80023de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d856      	bhi.n	8002452 <DMA_CheckFifoParam+0xce>
 80023a4:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <DMA_CheckFifoParam+0x28>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023cf 	.word	0x080023cf
 80023b4:	080023bd 	.word	0x080023bd
 80023b8:	08002453 	.word	0x08002453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d046      	beq.n	8002456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023cc:	e043      	b.n	8002456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d6:	d140      	bne.n	800245a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023dc:	e03d      	b.n	800245a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e6:	d121      	bne.n	800242c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d837      	bhi.n	800245e <DMA_CheckFifoParam+0xda>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <DMA_CheckFifoParam+0x70>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	0800240b 	.word	0x0800240b
 80023fc:	08002405 	.word	0x08002405
 8002400:	0800241d 	.word	0x0800241d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e030      	b.n	800246c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d025      	beq.n	8002462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241a:	e022      	b.n	8002462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002424:	d11f      	bne.n	8002466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242a:	e01c      	b.n	8002466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d903      	bls.n	800243a <DMA_CheckFifoParam+0xb6>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d003      	beq.n	8002440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002438:	e018      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      break;
 800243e:	e015      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00e      	beq.n	800246a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e00b      	b.n	800246a <DMA_CheckFifoParam+0xe6>
      break;
 8002452:	bf00      	nop
 8002454:	e00a      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
 8002458:	e008      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e006      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e004      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e002      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;   
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
    }
  } 
  
  return status; 
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e175      	b.n	8002788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8164 	bne.w	8002782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x56>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80be 	beq.w	8002782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_GPIO_Init+0x324>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_GPIO_Init+0x328>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d037      	beq.n	80026ba <HAL_GPIO_Init+0x23e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_GPIO_Init+0x330>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_GPIO_Init+0x23a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a56      	ldr	r2, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02b      	beq.n	80026b2 <HAL_GPIO_Init+0x236>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a55      	ldr	r2, [pc, #340]	; (80027b4 <HAL_GPIO_Init+0x338>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x232>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x33c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x22e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a53      	ldr	r2, [pc, #332]	; (80027bc <HAL_GPIO_Init+0x340>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x22a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_GPIO_Init+0x344>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <HAL_GPIO_Init+0x348>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_GPIO_Init+0x34c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4f      	ldr	r2, [pc, #316]	; (80027cc <HAL_GPIO_Init+0x350>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x21a>
 8002692:	2309      	movs	r3, #9
 8002694:	e012      	b.n	80026bc <HAL_GPIO_Init+0x240>
 8002696:	230a      	movs	r3, #10
 8002698:	e010      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269a:	2308      	movs	r3, #8
 800269c:	e00e      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x328>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_GPIO_Init+0x354>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae86 	bls.w	800249c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022400 	.word	0x40022400
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f806 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fd78 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e006      	b.n	80028d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d104      	bne.n	80028ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_I2C_Init+0x11c>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	02008000 	.word	0x02008000

08002970 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
  }
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00f      	beq.n	80029e6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00f      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f043 0208 	orr.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a38:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 030b 	and.w	r3, r3, #11
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fb77 	bl	8003140 <I2C_ITError>
  }
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <I2C_Slave_ISR_IT+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0e1      	b.n	8002cc2 <I2C_Slave_ISR_IT+0x1e8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f9b5 	bl	8002e8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d04b      	beq.n	8002bc4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d046      	beq.n	8002bc4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d128      	bne.n	8002b92 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b28      	cmp	r3, #40	; 0x28
 8002b4a:	d108      	bne.n	8002b5e <I2C_Slave_ISR_IT+0x84>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b52:	d104      	bne.n	8002b5e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b54:	6939      	ldr	r1, [r7, #16]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa9e 	bl	8003098 <I2C_ITListenCplt>
 8002b5c:	e031      	b.n	8002bc2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b29      	cmp	r3, #41	; 0x29
 8002b68:	d10e      	bne.n	8002b88 <I2C_Slave_ISR_IT+0xae>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d00a      	beq.n	8002b88 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2210      	movs	r2, #16
 8002b78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fbd7 	bl	800332e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f926 	bl	8002dd2 <I2C_ITSlaveSeqCplt>
 8002b86:	e01c      	b.n	8002bc2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b90:	e08f      	b.n	8002cb2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0204 	orr.w	r2, r3, #4
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <I2C_Slave_ISR_IT+0xda>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb2:	d17e      	bne.n	8002cb2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fac0 	bl	8003140 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bc0:	e077      	b.n	8002cb2 <I2C_Slave_ISR_IT+0x1d8>
 8002bc2:	e076      	b.n	8002cb2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02f      	beq.n	8002c2e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02a      	beq.n	8002c2e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d14b      	bne.n	8002cb6 <I2C_Slave_ISR_IT+0x1dc>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c24:	d047      	beq.n	8002cb6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8d3 	bl	8002dd2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c2c:	e043      	b.n	8002cb6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c42:	6939      	ldr	r1, [r7, #16]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f840 	bl	8002cca <I2C_ITAddrCplt>
 8002c4a:	e035      	b.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d030      	beq.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02b      	beq.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c9a:	e00d      	b.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca2:	d002      	beq.n	8002caa <I2C_Slave_ISR_IT+0x1d0>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f891 	bl	8002dd2 <I2C_ITSlaveSeqCplt>
 8002cb0:	e002      	b.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002cb6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ce0:	2b28      	cmp	r3, #40	; 0x28
 8002ce2:	d16a      	bne.n	8002dba <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d02:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d10:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d1e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d138      	bne.n	8002d9a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	09db      	lsrs	r3, r3, #7
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	89bb      	ldrh	r3, [r7, #12]
 8002d30:	4053      	eors	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f003 0306 	and.w	r3, r3, #6
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11c      	bne.n	8002d76 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d3c:	897b      	ldrh	r3, [r7, #10]
 8002d3e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d13b      	bne.n	8002dca <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d68:	89ba      	ldrh	r2, [r7, #12]
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fe87 	bl	8002a82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d74:	e029      	b.n	8002dca <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fb17 	bl	80033b2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d8c:	89ba      	ldrh	r2, [r7, #12]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fe75 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002d98:	e017      	b.n	8002dca <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb07 	bl	80033b2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dac:	89ba      	ldrh	r2, [r7, #12]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fe65 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002db8:	e007      	b.n	8002dca <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e00c      	b.n	8002e20 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b29      	cmp	r3, #41	; 0x29
 8002e2a:	d112      	bne.n	8002e52 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2228      	movs	r2, #40	; 0x28
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fab8 	bl	80033b2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fe05 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e50:	e017      	b.n	8002e82 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5c:	d111      	bne.n	8002e82 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2228      	movs	r2, #40	; 0x28
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2222      	movs	r2, #34	; 0x22
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa9f 	bl	80033b2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fdf6 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b21      	cmp	r3, #33	; 0x21
 8002eb6:	d002      	beq.n	8002ebe <I2C_ITSlaveCplt+0x32>
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b29      	cmp	r3, #41	; 0x29
 8002ebc:	d108      	bne.n	8002ed0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ebe:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa75 	bl	80033b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2221      	movs	r2, #33	; 0x21
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ece:	e00d      	b.n	8002eec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d002      	beq.n	8002edc <I2C_ITSlaveCplt+0x50>
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eda:	d107      	bne.n	8002eec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002edc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa66 	bl	80033b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2222      	movs	r2, #34	; 0x22
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <I2C_ITSlaveCplt+0x204>)
 8002f08:	400b      	ands	r3, r1
 8002f0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa0e 	bl	800332e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01f      	beq.n	8002f74 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f42:	e017      	b.n	8002f74 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d020      	beq.n	8002fc0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8a4 	bl	8003140 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b28      	cmp	r3, #40	; 0x28
 8003002:	d141      	bne.n	8003088 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f846 	bl	8003098 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800300c:	e03c      	b.n	8003088 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003016:	d014      	beq.n	8003042 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff feda 	bl	8002dd2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <I2C_ITSlaveCplt+0x208>)
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fd2f 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
}
 8003040:	e022      	b.n	8003088 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b22      	cmp	r3, #34	; 0x22
 800304c:	d10e      	bne.n	800306c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fd02 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 800306a:	e00d      	b.n	8003088 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fce9 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	fe00e800 	.word	0xfe00e800
 8003094:	ffff0000 	.word	0xffff0000

08003098 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <I2C_ITListenCplt+0xa4>)
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d022      	beq.n	8003114 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003114:	f248 0103 	movw	r1, #32771	; 0x8003
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f94a 	bl	80033b2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2210      	movs	r2, #16
 8003124:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fcb5 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	ffff0000 	.word	0xffff0000

08003140 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <I2C_ITError+0x194>)
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b28      	cmp	r3, #40	; 0x28
 8003176:	d005      	beq.n	8003184 <I2C_ITError+0x44>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b29      	cmp	r3, #41	; 0x29
 800317c:	d002      	beq.n	8003184 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b2a      	cmp	r3, #42	; 0x2a
 8003182:	d10b      	bne.n	800319c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003184:	2103      	movs	r1, #3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f913 	bl	80033b2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2228      	movs	r2, #40	; 0x28
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a50      	ldr	r2, [pc, #320]	; (80032d8 <I2C_ITError+0x198>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	e011      	b.n	80031c0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800319c:	f248 0103 	movw	r1, #32771	; 0x8003
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f906 	bl	80033b2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b60      	cmp	r3, #96	; 0x60
 80031b0:	d003      	beq.n	80031ba <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d039      	beq.n	8003242 <I2C_ITError+0x102>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d002      	beq.n	80031da <I2C_ITError+0x9a>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b21      	cmp	r3, #33	; 0x21
 80031d8:	d133      	bne.n	8003242 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e8:	d107      	bne.n	80031fa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f87c 	bl	80022fc <HAL_DMA_GetState>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d017      	beq.n	800323a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <I2C_ITError+0x19c>)
 8003210:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fec0 	bl	8001fa4 <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04d      	beq.n	80032c6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003234:	4610      	mov	r0, r2
 8003236:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003238:	e045      	b.n	80032c6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f850 	bl	80032e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003240:	e041      	b.n	80032c6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d039      	beq.n	80032be <I2C_ITError+0x17e>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b12      	cmp	r3, #18
 800324e:	d002      	beq.n	8003256 <I2C_ITError+0x116>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b22      	cmp	r3, #34	; 0x22
 8003254:	d133      	bne.n	80032be <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003264:	d107      	bne.n	8003276 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003274:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f83e 	bl	80022fc <HAL_DMA_GetState>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d017      	beq.n	80032b6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <I2C_ITError+0x19c>)
 800328c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fe82 	bl	8001fa4 <HAL_DMA_Abort_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d011      	beq.n	80032ca <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032b0:	4610      	mov	r0, r2
 80032b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032b4:	e009      	b.n	80032ca <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f812 	bl	80032e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032bc:	e005      	b.n	80032ca <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f80e 	bl	80032e0 <I2C_TreatErrorCallback>
  }
}
 80032c4:	e002      	b.n	80032cc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ca:	bf00      	nop
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	ffff0000 	.word	0xffff0000
 80032d8:	08002adb 	.word	0x08002adb
 80032dc:	08003377 	.word	0x08003377

080032e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d10e      	bne.n	8003312 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fbdb 	bl	8002ac6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003310:	e009      	b.n	8003326 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fbc6 	bl	8002ab2 <HAL_I2C_ErrorCallback>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d103      	bne.n	800334c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d007      	beq.n	800336a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	619a      	str	r2, [r3, #24]
  }
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	2200      	movs	r2, #0
 8003392:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2200      	movs	r2, #0
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ff9b 	bl	80032e0 <I2C_TreatErrorCallback>
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80033d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033e0:	2b28      	cmp	r3, #40	; 0x28
 80033e2:	d003      	beq.n	80033ec <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80033ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00f      	beq.n	8003416 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80033fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800340a:	2b28      	cmp	r3, #40	; 0x28
 800340c:	d003      	beq.n	8003416 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003414:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800341a:	2b00      	cmp	r3, #0
 800341c:	da03      	bge.n	8003426 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	2b10      	cmp	r3, #16
 800342a:	d103      	bne.n	8003434 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003432:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	2b20      	cmp	r3, #32
 8003438:	d103      	bne.n	8003442 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 0320 	orr.w	r3, r3, #32
 8003440:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d103      	bne.n	8003450 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	43da      	mvns	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	400a      	ands	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d138      	bne.n	80034f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800348e:	2302      	movs	r3, #2
 8003490:	e032      	b.n	80034f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d139      	bne.n	800358e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003524:	2302      	movs	r3, #2
 8003526:	e033      	b.n	8003590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b08f      	sub	sp, #60	; 0x3c
 80035a0:	af0a      	add	r7, sp, #40	; 0x28
 80035a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e116      	b.n	80037dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe f949 	bl	8001860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 f8bb 	bl	8006768 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	687e      	ldr	r6, [r7, #4]
 80035fa:	466d      	mov	r5, sp
 80035fc:	f106 0410 	add.w	r4, r6, #16
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800360c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003610:	1d33      	adds	r3, r6, #4
 8003612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f003 f84f 	bl	80066b8 <USB_CoreInit>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d7      	b.n	80037dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f003 f8a9 	bl	800678a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e04a      	b.n	80036d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	333d      	adds	r3, #61	; 0x3d
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	333c      	adds	r3, #60	; 0x3c
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	b298      	uxth	r0, r3
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3344      	adds	r3, #68	; 0x44
 800367a:	4602      	mov	r2, r0
 800367c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3340      	adds	r3, #64	; 0x40
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3348      	adds	r3, #72	; 0x48
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	334c      	adds	r3, #76	; 0x4c
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3354      	adds	r3, #84	; 0x54
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3af      	bcc.n	800363e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e044      	b.n	800376e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	3301      	adds	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d3b5      	bcc.n	80036e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	687e      	ldr	r6, [r7, #4]
 8003780:	466d      	mov	r5, sp
 8003782:	f106 0410 	add.w	r4, r6, #16
 8003786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003792:	e885 0003 	stmia.w	r5, {r0, r1}
 8003796:	1d33      	adds	r3, r6, #4
 8003798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f003 f842 	bl	8006824 <USB_DevInit>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e014      	b.n	80037dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f80a 	bl	80037e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fa00 	bl	8006bda <USB_DevDisconnect>

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_PCDEx_ActivateLPM+0x44>)
 8003814:	4313      	orrs	r3, r2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	10000003 	.word	0x10000003

0800382c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003834:	2300      	movs	r3, #0
 8003836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e291      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8087 	beq.w	800395e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003850:	4b96      	ldr	r3, [pc, #600]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385c:	4b93      	ldr	r3, [pc, #588]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <HAL_RCC_OscConfig+0x62>
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d06c      	beq.n	800395c <HAL_RCC_OscConfig+0x130>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d168      	bne.n	800395c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e26b      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x7a>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a83      	ldr	r2, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e02e      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x9c>
 80038ae:	4b7f      	ldr	r3, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7e      	ldr	r2, [pc, #504]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7b      	ldr	r2, [pc, #492]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0xc0>
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a75      	ldr	r2, [pc, #468]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a72      	ldr	r2, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xd8>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f95a 	bl	8001bc4 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe f956 	bl	8001bc4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e21f      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xe8>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f946 	bl	8001bc4 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7fe f942 	bl	8001bc4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e20b      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b57      	ldr	r3, [pc, #348]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x110>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d069      	beq.n	8003a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396a:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x190>
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1df      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	493d      	ldr	r1, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d023      	beq.n	8003a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f8f8 	bl	8001bc4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe f8f4 	bl	8001bc4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1bd      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4929      	ldr	r1, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	e018      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe f8d4 	bl	8001bc4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fe f8d0 	bl	8001bc4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e199      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d038      	beq.n	8003abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe f8b1 	bl	8001bc4 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe f8ad 	bl	8001bc4 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e176      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x23a>
 8003a84:	e01a      	b.n	8003abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fe f897 	bl	8001bc4 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe f893 	bl	8001bc4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d903      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e15c      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
 8003aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a4 	beq.w	8003c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b8b      	ldr	r3, [pc, #556]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	4a87      	ldr	r2, [pc, #540]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003afe:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe f85b 	bl	8001bc4 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fe f857 	bl	8001bc4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	; 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e120      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b24:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x4d0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x31a>
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	e02d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x33c>
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5a:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	e01c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x35e>
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a60      	ldr	r2, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a5a      	ldr	r2, [pc, #360]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
 8003b96:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe f80b 	bl	8001bc4 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f807 	bl	8001bc4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0ce      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ee      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x386>
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fff5 	bl	8001bc4 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fd fff1 	bl	8001bc4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0b8      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80a4 	beq.w	8003d64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d06b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d149      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ffc2 	bl	8001bc4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fd ffbe 	bl	8001bc4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e087      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	019b      	lsls	r3, r3, #6
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	4313      	orrs	r3, r2
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd ff92 	bl	8001bc4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd ff8e 	bl	8001bc4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e057      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x478>
 8003cc2:	e04f      	b.n	8003d64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd ff78 	bl	8001bc4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd ff74 	bl	8001bc4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e03d      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4ac>
 8003cf6:	e035      	b.n	8003d64 <HAL_RCC_OscConfig+0x538>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x544>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d028      	beq.n	8003d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d121      	bne.n	8003d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d11a      	bne.n	8003d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0d0      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	4965      	ldr	r1, [pc, #404]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d040      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d115      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e073      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4936      	ldr	r1, [pc, #216]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd feac 	bl	8001bc4 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd fea8 	bl	8001bc4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e053      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d210      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 020f 	bic.w	r2, r3, #15
 8003eae:	4922      	ldr	r1, [pc, #136]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	490a      	ldr	r1, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1cc>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1d0>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1d4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fe08 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	0800762c 	.word	0x0800762c
 8003f44:	20002a30 	.word	0x20002a30
 8003f48:	20002a34 	.word	0x20002a34

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b094      	sub	sp, #80	; 0x50
 8003f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
 8003f58:	2300      	movs	r3, #0
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d00d      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x40>
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	f200 80e1 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7e:	e0db      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b73      	ldr	r3, [pc, #460]	; (8004150 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f84:	e0db      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f86:	4b73      	ldr	r3, [pc, #460]	; (8004154 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8a:	e0d8      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d063      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd0:	0150      	lsls	r0, r2, #5
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	1a51      	subs	r1, r2, r1
 8003fda:	6139      	str	r1, [r7, #16]
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	018b      	lsls	r3, r1, #6
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	018a      	lsls	r2, r1, #6
 8003ffe:	4651      	mov	r1, sl
 8004000:	ebb2 0801 	subs.w	r8, r2, r1
 8004004:	4659      	mov	r1, fp
 8004006:	eb63 0901 	sbc.w	r9, r3, r1
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800401e:	4690      	mov	r8, r2
 8004020:	4699      	mov	r9, r3
 8004022:	4623      	mov	r3, r4
 8004024:	eb18 0303 	adds.w	r3, r8, r3
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	462b      	mov	r3, r5
 800402c:	eb49 0303 	adc.w	r3, r9, r3
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800403e:	4629      	mov	r1, r5
 8004040:	024b      	lsls	r3, r1, #9
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004048:	4621      	mov	r1, r4
 800404a:	024a      	lsls	r2, r1, #9
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004052:	2200      	movs	r2, #0
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800405c:	f7fc f928 	bl	80002b0 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004068:	e058      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406a:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	2200      	movs	r2, #0
 8004072:	4618      	mov	r0, r3
 8004074:	4611      	mov	r1, r2
 8004076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004096:	0150      	lsls	r0, r2, #5
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4641      	mov	r1, r8
 800409e:	ebb2 0a01 	subs.w	sl, r2, r1
 80040a2:	4649      	mov	r1, r9
 80040a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040bc:	ebb2 040a 	subs.w	r4, r2, sl
 80040c0:	eb63 050b 	sbc.w	r5, r3, fp
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	00eb      	lsls	r3, r5, #3
 80040ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d2:	00e2      	lsls	r2, r4, #3
 80040d4:	4614      	mov	r4, r2
 80040d6:	461d      	mov	r5, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	18e3      	adds	r3, r4, r3
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	464b      	mov	r3, r9
 80040e0:	eb45 0303 	adc.w	r3, r5, r3
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f2:	4629      	mov	r1, r5
 80040f4:	028b      	lsls	r3, r1, #10
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040fc:	4621      	mov	r1, r4
 80040fe:	028a      	lsls	r2, r1, #10
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004106:	2200      	movs	r2, #0
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	61fa      	str	r2, [r7, #28]
 800410c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004110:	f7fc f8ce 	bl	80002b0 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800412c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x204>)
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004140:	4618      	mov	r0, r3
 8004142:	3750      	adds	r7, #80	; 0x50
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	007a1200 	.word	0x007a1200

08004158 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20002a30 	.word	0x20002a30

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	0800763c 	.word	0x0800763c

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff ffdc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800763c 	.word	0x0800763c

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a68      	ldr	r2, [pc, #416]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041f2:	6093      	str	r3, [r2, #8]
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	4964      	ldr	r1, [pc, #400]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800421a:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	4959      	ldr	r1, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004238:	d101      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800423a:	2301      	movs	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d017      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004256:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	494a      	ldr	r1, [pc, #296]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004274:	d101      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 808b 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	4a39      	ldr	r2, [pc, #228]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6413      	str	r3, [r2, #64]	; 0x40
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042bc:	4b35      	ldr	r3, [pc, #212]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a34      	ldr	r2, [pc, #208]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fd fc7c 	bl	8001bc4 <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d0:	f7fd fc78 	bl	8001bc4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e357      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042e2:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d035      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d02e      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800430c:	4b20      	ldr	r3, [pc, #128]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004314:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d114      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fc40 	bl	8001bc4 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fc3c 	bl	8001bc4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e319      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d111      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004386:	400b      	ands	r3, r1
 8004388:	4901      	ldr	r1, [pc, #4]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
 800438e:	e00b      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004390:	40023800 	.word	0x40023800
 8004394:	40007000 	.word	0x40007000
 8004398:	0ffffcff 	.word	0x0ffffcff
 800439c:	4baa      	ldr	r3, [pc, #680]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4aa9      	ldr	r2, [pc, #676]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	4ba7      	ldr	r3, [pc, #668]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	49a4      	ldr	r1, [pc, #656]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043c6:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	4a9e      	ldr	r2, [pc, #632]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043d6:	4b9c      	ldr	r3, [pc, #624]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	4999      	ldr	r1, [pc, #612]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f4:	4b94      	ldr	r3, [pc, #592]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004402:	4991      	ldr	r1, [pc, #580]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004416:	4b8c      	ldr	r3, [pc, #560]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004424:	4988      	ldr	r1, [pc, #544]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004446:	4980      	ldr	r1, [pc, #512]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800445a:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4977      	ldr	r1, [pc, #476]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800447c:	4b72      	ldr	r3, [pc, #456]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	496f      	ldr	r1, [pc, #444]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800449e:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f023 020c 	bic.w	r2, r3, #12
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	4966      	ldr	r1, [pc, #408]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	495e      	ldr	r1, [pc, #376]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e2:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	4955      	ldr	r1, [pc, #340]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004504:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	494d      	ldr	r1, [pc, #308]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004526:	4b48      	ldr	r3, [pc, #288]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	4944      	ldr	r1, [pc, #272]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	493c      	ldr	r1, [pc, #240]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004578:	4933      	ldr	r1, [pc, #204]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800458c:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459a:	492b      	ldr	r1, [pc, #172]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d011      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045bc:	4922      	ldr	r1, [pc, #136]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fc:	4912      	ldr	r1, [pc, #72]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004620:	4909      	ldr	r1, [pc, #36]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d006      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80d9 	beq.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a01      	ldr	r2, [pc, #4]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004646:	e001      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004648:	40023800 	.word	0x40023800
 800464c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464e:	f7fd fab9 	bl	8001bc4 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004656:	f7fd fab5 	bl	8001bc4 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b64      	cmp	r3, #100	; 0x64
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e194      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004668:	4b6c      	ldr	r3, [pc, #432]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d021      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11d      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004688:	4b64      	ldr	r3, [pc, #400]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004696:	4b61      	ldr	r3, [pc, #388]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	019a      	lsls	r2, r3, #6
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	071b      	lsls	r3, r3, #28
 80046bc:	4957      	ldr	r1, [pc, #348]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02e      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ee:	d129      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046fe:	4b47      	ldr	r3, [pc, #284]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004704:	0f1b      	lsrs	r3, r3, #28
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	019a      	lsls	r2, r3, #6
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	071b      	lsls	r3, r3, #28
 8004724:	493d      	ldr	r1, [pc, #244]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004732:	f023 021f 	bic.w	r2, r3, #31
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	3b01      	subs	r3, #1
 800473c:	4937      	ldr	r1, [pc, #220]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01d      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004756:	0e1b      	lsrs	r3, r3, #24
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004764:	0f1b      	lsrs	r3, r3, #28
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	019a      	lsls	r2, r3, #6
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	431a      	orrs	r2, r3
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	431a      	orrs	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	071b      	lsls	r3, r3, #28
 8004784:	4925      	ldr	r1, [pc, #148]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d011      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	019a      	lsls	r2, r3, #6
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	071b      	lsls	r3, r3, #28
 80047b4:	4919      	ldr	r1, [pc, #100]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fd f9fc 	bl	8001bc4 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047d0:	f7fd f9f8 	bl	8001bc4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0d7      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e2:	4b0e      	ldr	r3, [pc, #56]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 80cd 	bne.w	8004990 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004802:	f7fd f9df 	bl	8001bc4 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800480a:	f7fd f9db 	bl	8001bc4 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b64      	cmp	r3, #100	; 0x64
 8004816:	d903      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0ba      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800481c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004820:	4b5e      	ldr	r3, [pc, #376]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482c:	d0ed      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02e      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d12a      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004856:	4b51      	ldr	r3, [pc, #324]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	0f1b      	lsrs	r3, r3, #28
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	019a      	lsls	r2, r3, #6
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	071b      	lsls	r3, r3, #28
 800488a:	4944      	ldr	r1, [pc, #272]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004892:	4b42      	ldr	r3, [pc, #264]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004898:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	493d      	ldr	r1, [pc, #244]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d022      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c0:	d11d      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	0e1b      	lsrs	r3, r3, #24
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	0f1b      	lsrs	r3, r3, #28
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	019a      	lsls	r2, r3, #6
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	041b      	lsls	r3, r3, #16
 80048ea:	431a      	orrs	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	071b      	lsls	r3, r3, #28
 80048f6:	4929      	ldr	r1, [pc, #164]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	0e1b      	lsrs	r3, r3, #24
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004918:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	019a      	lsls	r2, r3, #6
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	071b      	lsls	r3, r3, #28
 800493e:	4917      	ldr	r1, [pc, #92]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4911      	ldr	r1, [pc, #68]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0e      	ldr	r2, [pc, #56]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fd f92c 	bl	8001bc4 <HAL_GetTick>
 800496c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004970:	f7fd f928 	bl	8001bc4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e007      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498e:	d1ef      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e049      	b.n	8004a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fd40 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fcac 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e049      	b.n	8004af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fd53 	bl	8001520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fc55 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start+0x24>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e03c      	b.n	8004b9a <HAL_TIM_PWM_Start+0x9e>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d109      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x3e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e02f      	b.n	8004b9a <HAL_TIM_PWM_Start+0x9e>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x58>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e022      	b.n	8004b9a <HAL_TIM_PWM_Start+0x9e>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d109      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x72>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	e015      	b.n	8004b9a <HAL_TIM_PWM_Start+0x9e>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x8c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e008      	b.n	8004b9a <HAL_TIM_PWM_Start+0x9e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e092      	b.n	8004cc8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xb6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	e023      	b.n	8004bfa <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xc6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc0:	e01b      	b.n	8004bfa <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xd6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	e013      	b.n	8004bfa <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xe6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be0:	e00b      	b.n	8004bfa <HAL_TIM_PWM_Start+0xfe>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0xf6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	e003      	b.n	8004bfa <HAL_TIM_PWM_Start+0xfe>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 ff32 	bl	8005a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_TIM_PWM_Start+0x1d4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x120>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <HAL_TIM_PWM_Start+0x1d8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_PWM_Start+0x124>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_TIM_PWM_Start+0x126>
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <HAL_TIM_PWM_Start+0x1d4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d01d      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_TIM_PWM_Start+0x1dc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <HAL_TIM_PWM_Start+0x1e0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <HAL_TIM_PWM_Start+0x1e4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <HAL_TIM_PWM_Start+0x1d8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <HAL_TIM_PWM_Start+0x1e8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x18a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_TIM_PWM_Start+0x1ec>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d115      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <HAL_TIM_PWM_Start+0x1f0>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b06      	cmp	r3, #6
 8004c96:	d015      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x1c8>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d011      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb0:	e008      	b.n	8004cc4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e000      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40001800 	.word	0x40001800
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d122      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11b      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0202 	mvn.w	r2, #2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fae4 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fad6 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fae7 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d122      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d11b      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0204 	mvn.w	r2, #4
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 faba 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 faac 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fabd 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0208 	mvn.w	r2, #8
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa90 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa82 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa93 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0210 	mvn.w	r2, #16
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa66 	bl	8005300 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa58 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa69 	bl	8005314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0201 	mvn.w	r2, #1
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fa42 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b80      	cmp	r3, #128	; 0x80
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 ff22 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 ff15 	bl	8005cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa17 	bl	8005328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0220 	mvn.w	r2, #32
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fed5 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0ff      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b14      	cmp	r3, #20
 8004f5a:	f200 80f0 	bhi.w	800513e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	0800513f 	.word	0x0800513f
 8004f6c:	0800513f 	.word	0x0800513f
 8004f70:	0800513f 	.word	0x0800513f
 8004f74:	08004ff9 	.word	0x08004ff9
 8004f78:	0800513f 	.word	0x0800513f
 8004f7c:	0800513f 	.word	0x0800513f
 8004f80:	0800513f 	.word	0x0800513f
 8004f84:	0800503b 	.word	0x0800503b
 8004f88:	0800513f 	.word	0x0800513f
 8004f8c:	0800513f 	.word	0x0800513f
 8004f90:	0800513f 	.word	0x0800513f
 8004f94:	0800507b 	.word	0x0800507b
 8004f98:	0800513f 	.word	0x0800513f
 8004f9c:	0800513f 	.word	0x0800513f
 8004fa0:	0800513f 	.word	0x0800513f
 8004fa4:	080050bd 	.word	0x080050bd
 8004fa8:	0800513f 	.word	0x0800513f
 8004fac:	0800513f 	.word	0x0800513f
 8004fb0:	0800513f 	.word	0x0800513f
 8004fb4:	080050fd 	.word	0x080050fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fa5c 	bl	800547c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0208 	orr.w	r2, r2, #8
 8004fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0204 	bic.w	r2, r2, #4
 8004fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6999      	ldr	r1, [r3, #24]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	619a      	str	r2, [r3, #24]
      break;
 8004ff6:	e0a5      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 faae 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6999      	ldr	r1, [r3, #24]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	021a      	lsls	r2, r3, #8
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	619a      	str	r2, [r3, #24]
      break;
 8005038:	e084      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fb05 	bl	8005650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0208 	orr.w	r2, r2, #8
 8005054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0204 	bic.w	r2, r2, #4
 8005064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69d9      	ldr	r1, [r3, #28]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	61da      	str	r2, [r3, #28]
      break;
 8005078:	e064      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fb5b 	bl	800573c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	021a      	lsls	r2, r3, #8
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	61da      	str	r2, [r3, #28]
      break;
 80050ba:	e043      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fb92 	bl	80057ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0204 	bic.w	r2, r2, #4
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050fa:	e023      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fbc4 	bl	8005890 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800513c:	e002      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
      break;
 8005142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop

08005158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIM_ConfigClockSource+0x1c>
 8005170:	2302      	movs	r3, #2
 8005172:	e0b4      	b.n	80052de <HAL_TIM_ConfigClockSource+0x186>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4b56      	ldr	r3, [pc, #344]	; (80052e8 <HAL_TIM_ConfigClockSource+0x190>)
 8005190:	4013      	ands	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ac:	d03e      	beq.n	800522c <HAL_TIM_ConfigClockSource+0xd4>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	f200 8087 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	f000 8086 	beq.w	80052ca <HAL_TIM_ConfigClockSource+0x172>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d87f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b70      	cmp	r3, #112	; 0x70
 80051c6:	d01a      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xa6>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d87b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b60      	cmp	r3, #96	; 0x60
 80051ce:	d050      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x11a>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d877      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d03c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xfa>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d873      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d058      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x13a>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d86f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d064      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d86b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d060      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d867      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d05a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	e062      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800520e:	f000 fc0d 	bl	8005a2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e04f      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800523c:	f000 fbf6 	bl	8005a2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	609a      	str	r2, [r3, #8]
      break;
 8005250:	e03c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fb6a 	bl	8005938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fbc3 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005270:	e02c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	461a      	mov	r2, r3
 8005280:	f000 fb89 	bl	8005996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2160      	movs	r1, #96	; 0x60
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fbb3 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005290:	e01c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fb4a 	bl	8005938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2140      	movs	r1, #64	; 0x40
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fba3 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e00c      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 fb9a 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 80052c2:	e003      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	e000      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	fffeff88 	.word	0xfffeff88

080052ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a40      	ldr	r2, [pc, #256]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535a:	d00f      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3d      	ldr	r2, [pc, #244]	; (8005454 <TIM_Base_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00b      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3c      	ldr	r2, [pc, #240]	; (8005458 <TIM_Base_SetConfig+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d007      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3b      	ldr	r2, [pc, #236]	; (800545c <TIM_Base_SetConfig+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3a      	ldr	r2, [pc, #232]	; (8005460 <TIM_Base_SetConfig+0x124>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d108      	bne.n	800538e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539c:	d027      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <TIM_Base_SetConfig+0x118>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d023      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <TIM_Base_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <TIM_Base_SetConfig+0x120>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_Base_SetConfig+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d017      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <TIM_Base_SetConfig+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a27      	ldr	r2, [pc, #156]	; (8005468 <TIM_Base_SetConfig+0x12c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a26      	ldr	r2, [pc, #152]	; (800546c <TIM_Base_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a25      	ldr	r2, [pc, #148]	; (8005470 <TIM_Base_SetConfig+0x134>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a24      	ldr	r2, [pc, #144]	; (8005474 <TIM_Base_SetConfig+0x138>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a23      	ldr	r2, [pc, #140]	; (8005478 <TIM_Base_SetConfig+0x13c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <TIM_Base_SetConfig+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d103      	bne.n	800543c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40010400 	.word	0x40010400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800
 8005470:	40001800 	.word	0x40001800
 8005474:	40001c00 	.word	0x40001c00
 8005478:	40002000 	.word	0x40002000

0800547c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <TIM_OC1_SetConfig+0xd8>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_OC1_SetConfig+0xdc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC1_SetConfig+0x64>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a20      	ldr	r2, [pc, #128]	; (800555c <TIM_OC1_SetConfig+0xe0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10c      	bne.n	80054fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0308 	bic.w	r3, r3, #8
 80054e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_OC1_SetConfig+0xdc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_OC1_SetConfig+0x8e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <TIM_OC1_SetConfig+0xe0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d111      	bne.n	800552e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	fffeff8f 	.word	0xfffeff8f
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0210 	bic.w	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4b2e      	ldr	r3, [pc, #184]	; (8005644 <TIM_OC2_SetConfig+0xe4>)
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a23      	ldr	r2, [pc, #140]	; (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC2_SetConfig+0x68>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a22      	ldr	r2, [pc, #136]	; (800564c <TIM_OC2_SetConfig+0xec>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_OC2_SetConfig+0xec>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d113      	bne.n	800561c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	feff8fff 	.word	0xfeff8fff
 8005648:	40010000 	.word	0x40010000
 800564c:	40010400 	.word	0x40010400

08005650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <TIM_OC3_SetConfig+0xe0>)
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <TIM_OC3_SetConfig+0xe4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_OC3_SetConfig+0x66>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <TIM_OC3_SetConfig+0xe8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10d      	bne.n	80056d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <TIM_OC3_SetConfig+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_OC3_SetConfig+0x92>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <TIM_OC3_SetConfig+0xe8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d113      	bne.n	800570a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	fffeff8f 	.word	0xfffeff8f
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400

0800573c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <TIM_OC4_SetConfig+0xa4>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <TIM_OC4_SetConfig+0xa8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC4_SetConfig+0x68>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <TIM_OC4_SetConfig+0xac>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	feff8fff 	.word	0xfeff8fff
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <TIM_OC5_SetConfig+0x98>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800582c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a12      	ldr	r2, [pc, #72]	; (8005888 <TIM_OC5_SetConfig+0x9c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC5_SetConfig+0x5e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a11      	ldr	r2, [pc, #68]	; (800588c <TIM_OC5_SetConfig+0xa0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d109      	bne.n	800585e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	fffeff8f 	.word	0xfffeff8f
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4b1c      	ldr	r3, [pc, #112]	; (800592c <TIM_OC6_SetConfig+0x9c>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	051b      	lsls	r3, r3, #20
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <TIM_OC6_SetConfig+0xa0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC6_SetConfig+0x60>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <TIM_OC6_SetConfig+0xa4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	feff8fff 	.word	0xfeff8fff
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400

08005938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f023 030a 	bic.w	r3, r3, #10
 8005974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005996:	b480      	push	{r7}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f023 0210 	bic.w	r2, r3, #16
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	031b      	lsls	r3, r3, #12
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f043 0307 	orr.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2201      	movs	r2, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e06d      	b.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d108      	bne.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10c      	bne.n	8005b9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40001800 	.word	0x40001800

08005bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e065      	b.n	8005cbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d115      	bne.n	8005caa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	051b      	lsls	r3, r3, #20
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e040      	b.n	8005da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fcbc 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8b0 	bl	8005eb0 <UART_SetConfig>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e022      	b.n	8005da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fb08 	bl	8006378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb8f 	bl	80064bc <UART_CheckIdleState>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d171      	bne.n	8005ea4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_UART_Transmit+0x24>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e06a      	b.n	8005ea6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2221      	movs	r2, #33	; 0x21
 8005ddc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dde:	f7fb fef1 	bl	8001bc4 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d108      	bne.n	8005e10 <HAL_UART_Transmit+0x68>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e003      	b.n	8005e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e18:	e02c      	b.n	8005e74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fb80 	bl	800652a <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e038      	b.n	8005ea6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	e007      	b.n	8005e62 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1cc      	bne.n	8005e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2140      	movs	r1, #64	; 0x40
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fb4d 	bl	800652a <UART_WaitOnFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e005      	b.n	8005ea6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4ba6      	ldr	r3, [pc, #664]	; (8006174 <UART_SetConfig+0x2c4>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a94      	ldr	r2, [pc, #592]	; (8006178 <UART_SetConfig+0x2c8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d120      	bne.n	8005f6e <UART_SetConfig+0xbe>
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <UART_SetConfig+0x2cc>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d816      	bhi.n	8005f68 <UART_SetConfig+0xb8>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x90>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f57 	.word	0x08005f57
 8005f4c:	08005f63 	.word	0x08005f63
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e150      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f56:	2302      	movs	r3, #2
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e14d      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e14a      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f62:	2308      	movs	r3, #8
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e147      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e144      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a83      	ldr	r2, [pc, #524]	; (8006180 <UART_SetConfig+0x2d0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d132      	bne.n	8005fde <UART_SetConfig+0x12e>
 8005f78:	4b80      	ldr	r3, [pc, #512]	; (800617c <UART_SetConfig+0x2cc>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d828      	bhi.n	8005fd8 <UART_SetConfig+0x128>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0xdc>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd9 	.word	0x08005fd9
 8005f94:	08005fd9 	.word	0x08005fd9
 8005f98:	08005fd9 	.word	0x08005fd9
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fd9 	.word	0x08005fd9
 8005fa4:	08005fd9 	.word	0x08005fd9
 8005fa8:	08005fd9 	.word	0x08005fd9
 8005fac:	08005fc7 	.word	0x08005fc7
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fd3 	.word	0x08005fd3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e118      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e115      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e112      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e10f      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e10c      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a68      	ldr	r2, [pc, #416]	; (8006184 <UART_SetConfig+0x2d4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0x17a>
 8005fe8:	4b64      	ldr	r3, [pc, #400]	; (800617c <UART_SetConfig+0x2cc>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ff2:	2b30      	cmp	r3, #48	; 0x30
 8005ff4:	d013      	beq.n	800601e <UART_SetConfig+0x16e>
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d814      	bhi.n	8006024 <UART_SetConfig+0x174>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d009      	beq.n	8006012 <UART_SetConfig+0x162>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d810      	bhi.n	8006024 <UART_SetConfig+0x174>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <UART_SetConfig+0x15c>
 8006006:	2b10      	cmp	r3, #16
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x168>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x174>
 800600c:	2300      	movs	r3, #0
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0f2      	b.n	80061f8 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0ef      	b.n	80061f8 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0ec      	b.n	80061f8 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e0e9      	b.n	80061f8 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0e6      	b.n	80061f8 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a56      	ldr	r2, [pc, #344]	; (8006188 <UART_SetConfig+0x2d8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d120      	bne.n	8006076 <UART_SetConfig+0x1c6>
 8006034:	4b51      	ldr	r3, [pc, #324]	; (800617c <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800603e:	2bc0      	cmp	r3, #192	; 0xc0
 8006040:	d013      	beq.n	800606a <UART_SetConfig+0x1ba>
 8006042:	2bc0      	cmp	r3, #192	; 0xc0
 8006044:	d814      	bhi.n	8006070 <UART_SetConfig+0x1c0>
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d009      	beq.n	800605e <UART_SetConfig+0x1ae>
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d810      	bhi.n	8006070 <UART_SetConfig+0x1c0>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <UART_SetConfig+0x1a8>
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d006      	beq.n	8006064 <UART_SetConfig+0x1b4>
 8006056:	e00b      	b.n	8006070 <UART_SetConfig+0x1c0>
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0cc      	b.n	80061f8 <UART_SetConfig+0x348>
 800605e:	2302      	movs	r3, #2
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0c9      	b.n	80061f8 <UART_SetConfig+0x348>
 8006064:	2304      	movs	r3, #4
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0c6      	b.n	80061f8 <UART_SetConfig+0x348>
 800606a:	2308      	movs	r3, #8
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e0c3      	b.n	80061f8 <UART_SetConfig+0x348>
 8006070:	2310      	movs	r3, #16
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0c0      	b.n	80061f8 <UART_SetConfig+0x348>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a44      	ldr	r2, [pc, #272]	; (800618c <UART_SetConfig+0x2dc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d125      	bne.n	80060cc <UART_SetConfig+0x21c>
 8006080:	4b3e      	ldr	r3, [pc, #248]	; (800617c <UART_SetConfig+0x2cc>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608e:	d017      	beq.n	80060c0 <UART_SetConfig+0x210>
 8006090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006094:	d817      	bhi.n	80060c6 <UART_SetConfig+0x216>
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d00b      	beq.n	80060b4 <UART_SetConfig+0x204>
 800609c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a0:	d811      	bhi.n	80060c6 <UART_SetConfig+0x216>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <UART_SetConfig+0x1fe>
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d006      	beq.n	80060ba <UART_SetConfig+0x20a>
 80060ac:	e00b      	b.n	80060c6 <UART_SetConfig+0x216>
 80060ae:	2300      	movs	r3, #0
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e0a1      	b.n	80061f8 <UART_SetConfig+0x348>
 80060b4:	2302      	movs	r3, #2
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e09e      	b.n	80061f8 <UART_SetConfig+0x348>
 80060ba:	2304      	movs	r3, #4
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e09b      	b.n	80061f8 <UART_SetConfig+0x348>
 80060c0:	2308      	movs	r3, #8
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e098      	b.n	80061f8 <UART_SetConfig+0x348>
 80060c6:	2310      	movs	r3, #16
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e095      	b.n	80061f8 <UART_SetConfig+0x348>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <UART_SetConfig+0x2e0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d125      	bne.n	8006122 <UART_SetConfig+0x272>
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <UART_SetConfig+0x2cc>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e4:	d017      	beq.n	8006116 <UART_SetConfig+0x266>
 80060e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ea:	d817      	bhi.n	800611c <UART_SetConfig+0x26c>
 80060ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f0:	d00b      	beq.n	800610a <UART_SetConfig+0x25a>
 80060f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f6:	d811      	bhi.n	800611c <UART_SetConfig+0x26c>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <UART_SetConfig+0x254>
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d006      	beq.n	8006110 <UART_SetConfig+0x260>
 8006102:	e00b      	b.n	800611c <UART_SetConfig+0x26c>
 8006104:	2301      	movs	r3, #1
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e076      	b.n	80061f8 <UART_SetConfig+0x348>
 800610a:	2302      	movs	r3, #2
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e073      	b.n	80061f8 <UART_SetConfig+0x348>
 8006110:	2304      	movs	r3, #4
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e070      	b.n	80061f8 <UART_SetConfig+0x348>
 8006116:	2308      	movs	r3, #8
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e06d      	b.n	80061f8 <UART_SetConfig+0x348>
 800611c:	2310      	movs	r3, #16
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e06a      	b.n	80061f8 <UART_SetConfig+0x348>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <UART_SetConfig+0x2e4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d138      	bne.n	800619e <UART_SetConfig+0x2ee>
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <UART_SetConfig+0x2cc>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006136:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800613a:	d017      	beq.n	800616c <UART_SetConfig+0x2bc>
 800613c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006140:	d82a      	bhi.n	8006198 <UART_SetConfig+0x2e8>
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006146:	d00b      	beq.n	8006160 <UART_SetConfig+0x2b0>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d824      	bhi.n	8006198 <UART_SetConfig+0x2e8>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <UART_SetConfig+0x2aa>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d006      	beq.n	8006166 <UART_SetConfig+0x2b6>
 8006158:	e01e      	b.n	8006198 <UART_SetConfig+0x2e8>
 800615a:	2300      	movs	r3, #0
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e04b      	b.n	80061f8 <UART_SetConfig+0x348>
 8006160:	2302      	movs	r3, #2
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e048      	b.n	80061f8 <UART_SetConfig+0x348>
 8006166:	2304      	movs	r3, #4
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e045      	b.n	80061f8 <UART_SetConfig+0x348>
 800616c:	2308      	movs	r3, #8
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e042      	b.n	80061f8 <UART_SetConfig+0x348>
 8006172:	bf00      	nop
 8006174:	efff69f3 	.word	0xefff69f3
 8006178:	40011000 	.word	0x40011000
 800617c:	40023800 	.word	0x40023800
 8006180:	40004400 	.word	0x40004400
 8006184:	40004800 	.word	0x40004800
 8006188:	40004c00 	.word	0x40004c00
 800618c:	40005000 	.word	0x40005000
 8006190:	40011400 	.word	0x40011400
 8006194:	40007800 	.word	0x40007800
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e02c      	b.n	80061f8 <UART_SetConfig+0x348>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a72      	ldr	r2, [pc, #456]	; (800636c <UART_SetConfig+0x4bc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d125      	bne.n	80061f4 <UART_SetConfig+0x344>
 80061a8:	4b71      	ldr	r3, [pc, #452]	; (8006370 <UART_SetConfig+0x4c0>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061b6:	d017      	beq.n	80061e8 <UART_SetConfig+0x338>
 80061b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061bc:	d817      	bhi.n	80061ee <UART_SetConfig+0x33e>
 80061be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c2:	d00b      	beq.n	80061dc <UART_SetConfig+0x32c>
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c8:	d811      	bhi.n	80061ee <UART_SetConfig+0x33e>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <UART_SetConfig+0x326>
 80061ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d2:	d006      	beq.n	80061e2 <UART_SetConfig+0x332>
 80061d4:	e00b      	b.n	80061ee <UART_SetConfig+0x33e>
 80061d6:	2300      	movs	r3, #0
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e00d      	b.n	80061f8 <UART_SetConfig+0x348>
 80061dc:	2302      	movs	r3, #2
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e00a      	b.n	80061f8 <UART_SetConfig+0x348>
 80061e2:	2304      	movs	r3, #4
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e007      	b.n	80061f8 <UART_SetConfig+0x348>
 80061e8:	2308      	movs	r3, #8
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e004      	b.n	80061f8 <UART_SetConfig+0x348>
 80061ee:	2310      	movs	r3, #16
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e001      	b.n	80061f8 <UART_SetConfig+0x348>
 80061f4:	2310      	movs	r3, #16
 80061f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d15b      	bne.n	80062ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d828      	bhi.n	800625a <UART_SetConfig+0x3aa>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0x360>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006235 	.word	0x08006235
 8006214:	0800623d 	.word	0x0800623d
 8006218:	08006245 	.word	0x08006245
 800621c:	0800625b 	.word	0x0800625b
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800625b 	.word	0x0800625b
 8006228:	0800625b 	.word	0x0800625b
 800622c:	0800625b 	.word	0x0800625b
 8006230:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fd ff9c 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8006238:	61b8      	str	r0, [r7, #24]
        break;
 800623a:	e013      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fd ffac 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 8006240:	61b8      	str	r0, [r7, #24]
        break;
 8006242:	e00f      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <UART_SetConfig+0x4c4>)
 8006246:	61bb      	str	r3, [r7, #24]
        break;
 8006248:	e00c      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fd fe7f 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 800624e:	61b8      	str	r0, [r7, #24]
        break;
 8006250:	e008      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	61bb      	str	r3, [r7, #24]
        break;
 8006258:	e004      	b.n	8006264 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	77bb      	strb	r3, [r7, #30]
        break;
 8006262:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d074      	beq.n	8006354 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	005a      	lsls	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	d916      	bls.n	80062b4 <UART_SetConfig+0x404>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628c:	d212      	bcs.n	80062b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f023 030f 	bic.w	r3, r3, #15
 8006296:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	89fa      	ldrh	r2, [r7, #14]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	e04f      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	77bb      	strb	r3, [r7, #30]
 80062b8:	e04c      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d828      	bhi.n	8006312 <UART_SetConfig+0x462>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x418>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	08006313 	.word	0x08006313
 80062d8:	08006303 	.word	0x08006303
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006313 	.word	0x08006313
 80062e4:	08006313 	.word	0x08006313
 80062e8:	0800630b 	.word	0x0800630b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fd ff40 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 80062f0:	61b8      	str	r0, [r7, #24]
        break;
 80062f2:	e013      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fd ff50 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 80062f8:	61b8      	str	r0, [r7, #24]
        break;
 80062fa:	e00f      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <UART_SetConfig+0x4c4>)
 80062fe:	61bb      	str	r3, [r7, #24]
        break;
 8006300:	e00c      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006302:	f7fd fe23 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8006306:	61b8      	str	r0, [r7, #24]
        break;
 8006308:	e008      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630e:	61bb      	str	r3, [r7, #24]
        break;
 8006310:	e004      	b.n	800631c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	77bb      	strb	r3, [r7, #30]
        break;
 800631a:	bf00      	nop
    }

    if (pclk != 0U)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	085a      	lsrs	r2, r3, #1
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	441a      	add	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b0f      	cmp	r3, #15
 800633a:	d909      	bls.n	8006350 <UART_SetConfig+0x4a0>
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006342:	d205      	bcs.n	8006350 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e001      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006360:	7fbb      	ldrb	r3, [r7, #30]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40007c00 	.word	0x40007c00
 8006370:	40023800 	.word	0x40023800
 8006374:	00f42400 	.word	0x00f42400

08006378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01a      	beq.n	800648e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006476:	d10a      	bne.n	800648e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064cc:	f7fb fb7a 	bl	8001bc4 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d10e      	bne.n	80064fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f81b 	bl	800652a <UART_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e011      	b.n	8006522 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b09c      	sub	sp, #112	; 0x70
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	603b      	str	r3, [r7, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653a:	e0a7      	b.n	800668c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	f000 80a3 	beq.w	800668c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fb fb3d 	bl	8001bc4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <UART_WaitOnFlagUntilTimeout+0x32>
 8006556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006558:	2b00      	cmp	r3, #0
 800655a:	d13f      	bne.n	80065dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800656a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006570:	667b      	str	r3, [r7, #100]	; 0x64
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800657c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e6      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e068      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d050      	beq.n	800668c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d148      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006602:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
 8006624:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	66bb      	str	r3, [r7, #104]	; 0x68
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006656:	623a      	str	r2, [r7, #32]
 8006658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	69f9      	ldr	r1, [r7, #28]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	61bb      	str	r3, [r7, #24]
   return(result);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e010      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f43f af48 	beq.w	800653c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3770      	adds	r7, #112	; 0x70
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066b8:	b084      	sub	sp, #16
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	f107 001c 	add.w	r0, r7, #28
 80066c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d120      	bne.n	8006712 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <USB_CoreInit+0xac>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d105      	bne.n	8006706 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa96 	bl	8006c38 <USB_CoreReset>
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
 8006710:	e010      	b.n	8006734 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa8a 	bl	8006c38 <USB_CoreReset>
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10b      	bne.n	8006752 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f043 0206 	orr.w	r2, r3, #6
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800675e:	b004      	add	sp, #16
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	ffbdffbf 	.word	0xffbdffbf

08006768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f023 0201 	bic.w	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d115      	bne.n	80067d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb fa0f 	bl	8001bdc <HAL_Delay>
      ms++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fa29 	bl	8006c1c <USB_GetMode>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d01e      	beq.n	800680e <USB_SetCurrentMode+0x84>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b31      	cmp	r3, #49	; 0x31
 80067d4:	d9f0      	bls.n	80067b8 <USB_SetCurrentMode+0x2e>
 80067d6:	e01a      	b.n	800680e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d115      	bne.n	800680a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f7fb f9f6 	bl	8001bdc <HAL_Delay>
      ms++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa10 	bl	8006c1c <USB_GetMode>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <USB_SetCurrentMode+0x84>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b31      	cmp	r3, #49	; 0x31
 8006806:	d9f0      	bls.n	80067ea <USB_SetCurrentMode+0x60>
 8006808:	e001      	b.n	800680e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e005      	b.n	800681a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b32      	cmp	r3, #50	; 0x32
 8006812:	d101      	bne.n	8006818 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006824:	b084      	sub	sp, #16
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	e009      	b.n	8006858 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	3340      	adds	r3, #64	; 0x40
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	2200      	movs	r2, #0
 8006850:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b0e      	cmp	r3, #14
 800685c:	d9f2      	bls.n	8006844 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11c      	bne.n	800689e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f043 0302 	orr.w	r3, r3, #2
 8006876:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e005      	b.n	80068aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	4619      	mov	r1, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	461a      	mov	r2, r3
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10c      	bne.n	80068ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068d6:	2100      	movs	r1, #0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f965 	bl	8006ba8 <USB_SetDevSpeed>
 80068de:	e008      	b.n	80068f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068e0:	2101      	movs	r1, #1
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f960 	bl	8006ba8 <USB_SetDevSpeed>
 80068e8:	e003      	b.n	80068f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ea:	2103      	movs	r1, #3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f95b 	bl	8006ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068f2:	2110      	movs	r1, #16
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8f3 	bl	8006ae0 <USB_FlushTxFifo>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f91f 	bl	8006b48 <USB_FlushRxFifo>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	461a      	mov	r2, r3
 800691c:	2300      	movs	r3, #0
 800691e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	461a      	mov	r2, r3
 8006928:	2300      	movs	r3, #0
 800692a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	e043      	b.n	80069c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d118      	bne.n	8006988 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	461a      	mov	r2, r3
 800696a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	e013      	b.n	800699a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	461a      	mov	r2, r3
 8006980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e008      	b.n	800699a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006994:	461a      	mov	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	461a      	mov	r2, r3
 80069a8:	2300      	movs	r3, #0
 80069aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	461a      	mov	r2, r3
 80069ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	3301      	adds	r3, #1
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3b7      	bcc.n	800693e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ce:	2300      	movs	r3, #0
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	e043      	b.n	8006a5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ea:	d118      	bne.n	8006a1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	461a      	mov	r2, r3
 8006a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e013      	b.n	8006a30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e008      	b.n	8006a30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d3b7      	bcc.n	80069d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f043 0210 	orr.w	r2, r3, #16
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <USB_DevInit+0x2b4>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f043 0208 	orr.w	r2, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <USB_DevInit+0x2b8>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad4:	b004      	add	sp, #16
 8006ad6:	4770      	bx	lr
 8006ad8:	803c3800 	.word	0x803c3800
 8006adc:	40000004 	.word	0x40000004

08006ae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <USB_FlushTxFifo+0x64>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e01b      	b.n	8006b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	daf2      	bge.n	8006aee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	019b      	lsls	r3, r3, #6
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <USB_FlushTxFifo+0x64>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e006      	b.n	8006b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d0f0      	beq.n	8006b18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	00030d40 	.word	0x00030d40

08006b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <USB_FlushRxFifo+0x5c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e018      	b.n	8006b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	daf2      	bge.n	8006b54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2210      	movs	r2, #16
 8006b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <USB_FlushRxFifo+0x5c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e006      	b.n	8006b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d0f0      	beq.n	8006b78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f003 0301 	and.w	r3, r3, #1
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <USB_CoreReset+0x64>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e01b      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	daf2      	bge.n	8006c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f043 0201 	orr.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <USB_CoreReset+0x64>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d901      	bls.n	8006c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d0f0      	beq.n	8006c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <sniprintf>:
 8006ca0:	b40c      	push	{r2, r3}
 8006ca2:	b530      	push	{r4, r5, lr}
 8006ca4:	4b17      	ldr	r3, [pc, #92]	; (8006d04 <sniprintf+0x64>)
 8006ca6:	1e0c      	subs	r4, r1, #0
 8006ca8:	681d      	ldr	r5, [r3, #0]
 8006caa:	b09d      	sub	sp, #116	; 0x74
 8006cac:	da08      	bge.n	8006cc0 <sniprintf+0x20>
 8006cae:	238b      	movs	r3, #139	; 0x8b
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	b01d      	add	sp, #116	; 0x74
 8006cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cbc:	b002      	add	sp, #8
 8006cbe:	4770      	bx	lr
 8006cc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006cc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cc8:	bf14      	ite	ne
 8006cca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cce:	4623      	moveq	r3, r4
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	9307      	str	r3, [sp, #28]
 8006cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cd8:	9002      	str	r0, [sp, #8]
 8006cda:	9006      	str	r0, [sp, #24]
 8006cdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ce0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ce2:	ab21      	add	r3, sp, #132	; 0x84
 8006ce4:	a902      	add	r1, sp, #8
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	f000 f993 	bl	8007014 <_svfiprintf_r>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	bfbc      	itt	lt
 8006cf2:	238b      	movlt	r3, #139	; 0x8b
 8006cf4:	602b      	strlt	r3, [r5, #0]
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	d0dd      	beq.n	8006cb6 <sniprintf+0x16>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	e7d9      	b.n	8006cb6 <sniprintf+0x16>
 8006d02:	bf00      	nop
 8006d04:	20002a88 	.word	0x20002a88

08006d08 <memset>:
 8006d08:	4402      	add	r2, r0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d100      	bne.n	8006d12 <memset+0xa>
 8006d10:	4770      	bx	lr
 8006d12:	f803 1b01 	strb.w	r1, [r3], #1
 8006d16:	e7f9      	b.n	8006d0c <memset+0x4>

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20002a88 	.word	0x20002a88

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 fc6a 	bl	8007610 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08007688 	.word	0x08007688
 8006d60:	08007688 	.word	0x08007688
 8006d64:	08007688 	.word	0x08007688
 8006d68:	0800768c 	.word	0x0800768c

08006d6c <__retarget_lock_acquire_recursive>:
 8006d6c:	4770      	bx	lr

08006d6e <__retarget_lock_release_recursive>:
 8006d6e:	4770      	bx	lr

08006d70 <_free_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d044      	beq.n	8006e00 <_free_r+0x90>
 8006d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7a:	9001      	str	r0, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d82:	bfb8      	it	lt
 8006d84:	18e4      	addlt	r4, r4, r3
 8006d86:	f000 f8df 	bl	8006f48 <__malloc_lock>
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <_free_r+0x94>)
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b933      	cbnz	r3, 8006da0 <_free_r+0x30>
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	6014      	str	r4, [r2, #0]
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f000 b8da 	b.w	8006f54 <__malloc_unlock>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d908      	bls.n	8006db6 <_free_r+0x46>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1949      	addeq	r1, r1, r5
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	e7ed      	b.n	8006d92 <_free_r+0x22>
 8006db6:	461a      	mov	r2, r3
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	b10b      	cbz	r3, 8006dc0 <_free_r+0x50>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d9fa      	bls.n	8006db6 <_free_r+0x46>
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	1855      	adds	r5, r2, r1
 8006dc4:	42a5      	cmp	r5, r4
 8006dc6:	d10b      	bne.n	8006de0 <_free_r+0x70>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	4421      	add	r1, r4
 8006dcc:	1854      	adds	r4, r2, r1
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	d1e0      	bne.n	8006d96 <_free_r+0x26>
 8006dd4:	681c      	ldr	r4, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	440c      	add	r4, r1
 8006ddc:	6014      	str	r4, [r2, #0]
 8006dde:	e7da      	b.n	8006d96 <_free_r+0x26>
 8006de0:	d902      	bls.n	8006de8 <_free_r+0x78>
 8006de2:	230c      	movs	r3, #12
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e7d6      	b.n	8006d96 <_free_r+0x26>
 8006de8:	6825      	ldr	r5, [r4, #0]
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf04      	itt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	bf04      	itt	eq
 8006df8:	1949      	addeq	r1, r1, r5
 8006dfa:	6021      	streq	r1, [r4, #0]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	e7ca      	b.n	8006d96 <_free_r+0x26>
 8006e00:	b003      	add	sp, #12
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	20003454 	.word	0x20003454

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0e      	ldr	r6, [pc, #56]	; (8006e44 <sbrk_aligned+0x3c>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 fba6 	bl	8007564 <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fba1 	bl	8007564 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d00a      	beq.n	8006e3c <sbrk_aligned+0x34>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d007      	beq.n	8006e40 <sbrk_aligned+0x38>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fb96 	bl	8007564 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d101      	bne.n	8006e40 <sbrk_aligned+0x38>
 8006e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e40:	4620      	mov	r0, r4
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	20003458 	.word	0x20003458

08006e48 <_malloc_r>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d905      	bls.n	8006e70 <_malloc_r+0x28>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	2600      	movs	r6, #0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f44 <_malloc_r+0xfc>
 8006e74:	f000 f868 	bl	8006f48 <__malloc_lock>
 8006e78:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7c:	461c      	mov	r4, r3
 8006e7e:	bb5c      	cbnz	r4, 8006ed8 <_malloc_r+0x90>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ffc0 	bl	8006e08 <sbrk_aligned>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d155      	bne.n	8006f3a <_malloc_r+0xf2>
 8006e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e92:	4626      	mov	r6, r4
 8006e94:	2e00      	cmp	r6, #0
 8006e96:	d145      	bne.n	8006f24 <_malloc_r+0xdc>
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d048      	beq.n	8006f2e <_malloc_r+0xe6>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	eb04 0903 	add.w	r9, r4, r3
 8006ea6:	f000 fb5d 	bl	8007564 <_sbrk_r>
 8006eaa:	4581      	cmp	r9, r0
 8006eac:	d13f      	bne.n	8006f2e <_malloc_r+0xe6>
 8006eae:	6821      	ldr	r1, [r4, #0]
 8006eb0:	1a6d      	subs	r5, r5, r1
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ffa7 	bl	8006e08 <sbrk_aligned>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d037      	beq.n	8006f2e <_malloc_r+0xe6>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	442b      	add	r3, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d038      	beq.n	8006f3e <_malloc_r+0xf6>
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	42a2      	cmp	r2, r4
 8006ed0:	d12b      	bne.n	8006f2a <_malloc_r+0xe2>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	e00f      	b.n	8006ef8 <_malloc_r+0xb0>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	1b52      	subs	r2, r2, r5
 8006edc:	d41f      	bmi.n	8006f1e <_malloc_r+0xd6>
 8006ede:	2a0b      	cmp	r2, #11
 8006ee0:	d917      	bls.n	8006f12 <_malloc_r+0xca>
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	6025      	str	r5, [r4, #0]
 8006ee8:	bf18      	it	ne
 8006eea:	6059      	strne	r1, [r3, #4]
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	bf08      	it	eq
 8006ef0:	f8c8 1000 	streq.w	r1, [r8]
 8006ef4:	5162      	str	r2, [r4, r5]
 8006ef6:	604b      	str	r3, [r1, #4]
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f104 060b 	add.w	r6, r4, #11
 8006efe:	f000 f829 	bl	8006f54 <__malloc_unlock>
 8006f02:	f026 0607 	bic.w	r6, r6, #7
 8006f06:	1d23      	adds	r3, r4, #4
 8006f08:	1af2      	subs	r2, r6, r3
 8006f0a:	d0ae      	beq.n	8006e6a <_malloc_r+0x22>
 8006f0c:	1b9b      	subs	r3, r3, r6
 8006f0e:	50a3      	str	r3, [r4, r2]
 8006f10:	e7ab      	b.n	8006e6a <_malloc_r+0x22>
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	6862      	ldr	r2, [r4, #4]
 8006f16:	d1dd      	bne.n	8006ed4 <_malloc_r+0x8c>
 8006f18:	f8c8 2000 	str.w	r2, [r8]
 8006f1c:	e7ec      	b.n	8006ef8 <_malloc_r+0xb0>
 8006f1e:	4623      	mov	r3, r4
 8006f20:	6864      	ldr	r4, [r4, #4]
 8006f22:	e7ac      	b.n	8006e7e <_malloc_r+0x36>
 8006f24:	4634      	mov	r4, r6
 8006f26:	6876      	ldr	r6, [r6, #4]
 8006f28:	e7b4      	b.n	8006e94 <_malloc_r+0x4c>
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	e7cc      	b.n	8006ec8 <_malloc_r+0x80>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	4638      	mov	r0, r7
 8006f34:	f000 f80e 	bl	8006f54 <__malloc_unlock>
 8006f38:	e797      	b.n	8006e6a <_malloc_r+0x22>
 8006f3a:	6025      	str	r5, [r4, #0]
 8006f3c:	e7dc      	b.n	8006ef8 <_malloc_r+0xb0>
 8006f3e:	605b      	str	r3, [r3, #4]
 8006f40:	deff      	udf	#255	; 0xff
 8006f42:	bf00      	nop
 8006f44:	20003454 	.word	0x20003454

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f7ff bf0f 	b.w	8006d6c <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20003450 	.word	0x20003450

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f7ff bf0a 	b.w	8006d6e <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20003450 	.word	0x20003450

08006f60 <__ssputs_r>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	688e      	ldr	r6, [r1, #8]
 8006f66:	461f      	mov	r7, r3
 8006f68:	42be      	cmp	r6, r7
 8006f6a:	680b      	ldr	r3, [r1, #0]
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4690      	mov	r8, r2
 8006f72:	d82c      	bhi.n	8006fce <__ssputs_r+0x6e>
 8006f74:	898a      	ldrh	r2, [r1, #12]
 8006f76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f7a:	d026      	beq.n	8006fca <__ssputs_r+0x6a>
 8006f7c:	6965      	ldr	r5, [r4, #20]
 8006f7e:	6909      	ldr	r1, [r1, #16]
 8006f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f84:	eba3 0901 	sub.w	r9, r3, r1
 8006f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f8c:	1c7b      	adds	r3, r7, #1
 8006f8e:	444b      	add	r3, r9
 8006f90:	106d      	asrs	r5, r5, #1
 8006f92:	429d      	cmp	r5, r3
 8006f94:	bf38      	it	cc
 8006f96:	461d      	movcc	r5, r3
 8006f98:	0553      	lsls	r3, r2, #21
 8006f9a:	d527      	bpl.n	8006fec <__ssputs_r+0x8c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7ff ff53 	bl	8006e48 <_malloc_r>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	b360      	cbz	r0, 8007000 <__ssputs_r+0xa0>
 8006fa6:	6921      	ldr	r1, [r4, #16]
 8006fa8:	464a      	mov	r2, r9
 8006faa:	f000 faeb 	bl	8007584 <memcpy>
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	6126      	str	r6, [r4, #16]
 8006fbc:	6165      	str	r5, [r4, #20]
 8006fbe:	444e      	add	r6, r9
 8006fc0:	eba5 0509 	sub.w	r5, r5, r9
 8006fc4:	6026      	str	r6, [r4, #0]
 8006fc6:	60a5      	str	r5, [r4, #8]
 8006fc8:	463e      	mov	r6, r7
 8006fca:	42be      	cmp	r6, r7
 8006fcc:	d900      	bls.n	8006fd0 <__ssputs_r+0x70>
 8006fce:	463e      	mov	r6, r7
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	f000 faab 	bl	8007530 <memmove>
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	4433      	add	r3, r6
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 fad7 	bl	80075a0 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e0      	bne.n	8006fba <__ssputs_r+0x5a>
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7ff feb8 	bl	8006d70 <_free_r>
 8007000:	230c      	movs	r3, #12
 8007002:	f8ca 3000 	str.w	r3, [sl]
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	e7e9      	b.n	8006fe8 <__ssputs_r+0x88>

08007014 <_svfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	4698      	mov	r8, r3
 800701a:	898b      	ldrh	r3, [r1, #12]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	b09d      	sub	sp, #116	; 0x74
 8007020:	4607      	mov	r7, r0
 8007022:	460d      	mov	r5, r1
 8007024:	4614      	mov	r4, r2
 8007026:	d50e      	bpl.n	8007046 <_svfiprintf_r+0x32>
 8007028:	690b      	ldr	r3, [r1, #16]
 800702a:	b963      	cbnz	r3, 8007046 <_svfiprintf_r+0x32>
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	f7ff ff0b 	bl	8006e48 <_malloc_r>
 8007032:	6028      	str	r0, [r5, #0]
 8007034:	6128      	str	r0, [r5, #16]
 8007036:	b920      	cbnz	r0, 8007042 <_svfiprintf_r+0x2e>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e0d0      	b.n	80071e4 <_svfiprintf_r+0x1d0>
 8007042:	2340      	movs	r3, #64	; 0x40
 8007044:	616b      	str	r3, [r5, #20]
 8007046:	2300      	movs	r3, #0
 8007048:	9309      	str	r3, [sp, #36]	; 0x24
 800704a:	2320      	movs	r3, #32
 800704c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007050:	f8cd 800c 	str.w	r8, [sp, #12]
 8007054:	2330      	movs	r3, #48	; 0x30
 8007056:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071fc <_svfiprintf_r+0x1e8>
 800705a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800705e:	f04f 0901 	mov.w	r9, #1
 8007062:	4623      	mov	r3, r4
 8007064:	469a      	mov	sl, r3
 8007066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800706a:	b10a      	cbz	r2, 8007070 <_svfiprintf_r+0x5c>
 800706c:	2a25      	cmp	r2, #37	; 0x25
 800706e:	d1f9      	bne.n	8007064 <_svfiprintf_r+0x50>
 8007070:	ebba 0b04 	subs.w	fp, sl, r4
 8007074:	d00b      	beq.n	800708e <_svfiprintf_r+0x7a>
 8007076:	465b      	mov	r3, fp
 8007078:	4622      	mov	r2, r4
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ff6f 	bl	8006f60 <__ssputs_r>
 8007082:	3001      	adds	r0, #1
 8007084:	f000 80a9 	beq.w	80071da <_svfiprintf_r+0x1c6>
 8007088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800708a:	445a      	add	r2, fp
 800708c:	9209      	str	r2, [sp, #36]	; 0x24
 800708e:	f89a 3000 	ldrb.w	r3, [sl]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a1 	beq.w	80071da <_svfiprintf_r+0x1c6>
 8007098:	2300      	movs	r3, #0
 800709a:	f04f 32ff 	mov.w	r2, #4294967295
 800709e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a2:	f10a 0a01 	add.w	sl, sl, #1
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ae:	931a      	str	r3, [sp, #104]	; 0x68
 80070b0:	4654      	mov	r4, sl
 80070b2:	2205      	movs	r2, #5
 80070b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b8:	4850      	ldr	r0, [pc, #320]	; (80071fc <_svfiprintf_r+0x1e8>)
 80070ba:	f7f9 f8a9 	bl	8000210 <memchr>
 80070be:	9a04      	ldr	r2, [sp, #16]
 80070c0:	b9d8      	cbnz	r0, 80070fa <_svfiprintf_r+0xe6>
 80070c2:	06d0      	lsls	r0, r2, #27
 80070c4:	bf44      	itt	mi
 80070c6:	2320      	movmi	r3, #32
 80070c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070cc:	0711      	lsls	r1, r2, #28
 80070ce:	bf44      	itt	mi
 80070d0:	232b      	movmi	r3, #43	; 0x2b
 80070d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d6:	f89a 3000 	ldrb.w	r3, [sl]
 80070da:	2b2a      	cmp	r3, #42	; 0x2a
 80070dc:	d015      	beq.n	800710a <_svfiprintf_r+0xf6>
 80070de:	9a07      	ldr	r2, [sp, #28]
 80070e0:	4654      	mov	r4, sl
 80070e2:	2000      	movs	r0, #0
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	4621      	mov	r1, r4
 80070ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ee:	3b30      	subs	r3, #48	; 0x30
 80070f0:	2b09      	cmp	r3, #9
 80070f2:	d94d      	bls.n	8007190 <_svfiprintf_r+0x17c>
 80070f4:	b1b0      	cbz	r0, 8007124 <_svfiprintf_r+0x110>
 80070f6:	9207      	str	r2, [sp, #28]
 80070f8:	e014      	b.n	8007124 <_svfiprintf_r+0x110>
 80070fa:	eba0 0308 	sub.w	r3, r0, r8
 80070fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	46a2      	mov	sl, r4
 8007108:	e7d2      	b.n	80070b0 <_svfiprintf_r+0x9c>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	1d19      	adds	r1, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	9103      	str	r1, [sp, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfbb      	ittet	lt
 8007116:	425b      	neglt	r3, r3
 8007118:	f042 0202 	orrlt.w	r2, r2, #2
 800711c:	9307      	strge	r3, [sp, #28]
 800711e:	9307      	strlt	r3, [sp, #28]
 8007120:	bfb8      	it	lt
 8007122:	9204      	strlt	r2, [sp, #16]
 8007124:	7823      	ldrb	r3, [r4, #0]
 8007126:	2b2e      	cmp	r3, #46	; 0x2e
 8007128:	d10c      	bne.n	8007144 <_svfiprintf_r+0x130>
 800712a:	7863      	ldrb	r3, [r4, #1]
 800712c:	2b2a      	cmp	r3, #42	; 0x2a
 800712e:	d134      	bne.n	800719a <_svfiprintf_r+0x186>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	1d1a      	adds	r2, r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	9203      	str	r2, [sp, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfb8      	it	lt
 800713c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007140:	3402      	adds	r4, #2
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800720c <_svfiprintf_r+0x1f8>
 8007148:	7821      	ldrb	r1, [r4, #0]
 800714a:	2203      	movs	r2, #3
 800714c:	4650      	mov	r0, sl
 800714e:	f7f9 f85f 	bl	8000210 <memchr>
 8007152:	b138      	cbz	r0, 8007164 <_svfiprintf_r+0x150>
 8007154:	9b04      	ldr	r3, [sp, #16]
 8007156:	eba0 000a 	sub.w	r0, r0, sl
 800715a:	2240      	movs	r2, #64	; 0x40
 800715c:	4082      	lsls	r2, r0
 800715e:	4313      	orrs	r3, r2
 8007160:	3401      	adds	r4, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	4825      	ldr	r0, [pc, #148]	; (8007200 <_svfiprintf_r+0x1ec>)
 800716a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800716e:	2206      	movs	r2, #6
 8007170:	f7f9 f84e 	bl	8000210 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d038      	beq.n	80071ea <_svfiprintf_r+0x1d6>
 8007178:	4b22      	ldr	r3, [pc, #136]	; (8007204 <_svfiprintf_r+0x1f0>)
 800717a:	bb1b      	cbnz	r3, 80071c4 <_svfiprintf_r+0x1b0>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	3307      	adds	r3, #7
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	3308      	adds	r3, #8
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	4433      	add	r3, r6
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	e768      	b.n	8007062 <_svfiprintf_r+0x4e>
 8007190:	fb0c 3202 	mla	r2, ip, r2, r3
 8007194:	460c      	mov	r4, r1
 8007196:	2001      	movs	r0, #1
 8007198:	e7a6      	b.n	80070e8 <_svfiprintf_r+0xd4>
 800719a:	2300      	movs	r3, #0
 800719c:	3401      	adds	r4, #1
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	4620      	mov	r0, r4
 80071a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	2a09      	cmp	r2, #9
 80071b0:	d903      	bls.n	80071ba <_svfiprintf_r+0x1a6>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c6      	beq.n	8007144 <_svfiprintf_r+0x130>
 80071b6:	9105      	str	r1, [sp, #20]
 80071b8:	e7c4      	b.n	8007144 <_svfiprintf_r+0x130>
 80071ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80071be:	4604      	mov	r4, r0
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7f0      	b.n	80071a6 <_svfiprintf_r+0x192>
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <_svfiprintf_r+0x1f4>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4638      	mov	r0, r7
 80071d0:	f3af 8000 	nop.w
 80071d4:	1c42      	adds	r2, r0, #1
 80071d6:	4606      	mov	r6, r0
 80071d8:	d1d6      	bne.n	8007188 <_svfiprintf_r+0x174>
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	065b      	lsls	r3, r3, #25
 80071de:	f53f af2d 	bmi.w	800703c <_svfiprintf_r+0x28>
 80071e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071e4:	b01d      	add	sp, #116	; 0x74
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	462a      	mov	r2, r5
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <_svfiprintf_r+0x1f4>)
 80071f2:	a904      	add	r1, sp, #16
 80071f4:	4638      	mov	r0, r7
 80071f6:	f000 f879 	bl	80072ec <_printf_i>
 80071fa:	e7eb      	b.n	80071d4 <_svfiprintf_r+0x1c0>
 80071fc:	0800764c 	.word	0x0800764c
 8007200:	08007656 	.word	0x08007656
 8007204:	00000000 	.word	0x00000000
 8007208:	08006f61 	.word	0x08006f61
 800720c:	08007652 	.word	0x08007652

08007210 <_printf_common>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	4616      	mov	r6, r2
 8007216:	4699      	mov	r9, r3
 8007218:	688a      	ldr	r2, [r1, #8]
 800721a:	690b      	ldr	r3, [r1, #16]
 800721c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007220:	4293      	cmp	r3, r2
 8007222:	bfb8      	it	lt
 8007224:	4613      	movlt	r3, r2
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800722c:	4607      	mov	r7, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b10a      	cbz	r2, 8007236 <_printf_common+0x26>
 8007232:	3301      	adds	r3, #1
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	0699      	lsls	r1, r3, #26
 800723a:	bf42      	ittt	mi
 800723c:	6833      	ldrmi	r3, [r6, #0]
 800723e:	3302      	addmi	r3, #2
 8007240:	6033      	strmi	r3, [r6, #0]
 8007242:	6825      	ldr	r5, [r4, #0]
 8007244:	f015 0506 	ands.w	r5, r5, #6
 8007248:	d106      	bne.n	8007258 <_printf_common+0x48>
 800724a:	f104 0a19 	add.w	sl, r4, #25
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	6832      	ldr	r2, [r6, #0]
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	42ab      	cmp	r3, r5
 8007256:	dc26      	bgt.n	80072a6 <_printf_common+0x96>
 8007258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800725c:	1e13      	subs	r3, r2, #0
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	bf18      	it	ne
 8007262:	2301      	movne	r3, #1
 8007264:	0692      	lsls	r2, r2, #26
 8007266:	d42b      	bmi.n	80072c0 <_printf_common+0xb0>
 8007268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800726c:	4649      	mov	r1, r9
 800726e:	4638      	mov	r0, r7
 8007270:	47c0      	blx	r8
 8007272:	3001      	adds	r0, #1
 8007274:	d01e      	beq.n	80072b4 <_printf_common+0xa4>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	f003 0306 	and.w	r3, r3, #6
 800727e:	2b04      	cmp	r3, #4
 8007280:	bf02      	ittt	eq
 8007282:	68e5      	ldreq	r5, [r4, #12]
 8007284:	6833      	ldreq	r3, [r6, #0]
 8007286:	1aed      	subeq	r5, r5, r3
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	bf0c      	ite	eq
 800728c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007290:	2500      	movne	r5, #0
 8007292:	4293      	cmp	r3, r2
 8007294:	bfc4      	itt	gt
 8007296:	1a9b      	subgt	r3, r3, r2
 8007298:	18ed      	addgt	r5, r5, r3
 800729a:	2600      	movs	r6, #0
 800729c:	341a      	adds	r4, #26
 800729e:	42b5      	cmp	r5, r6
 80072a0:	d11a      	bne.n	80072d8 <_printf_common+0xc8>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e008      	b.n	80072b8 <_printf_common+0xa8>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4652      	mov	r2, sl
 80072aa:	4649      	mov	r1, r9
 80072ac:	4638      	mov	r0, r7
 80072ae:	47c0      	blx	r8
 80072b0:	3001      	adds	r0, #1
 80072b2:	d103      	bne.n	80072bc <_printf_common+0xac>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	3501      	adds	r5, #1
 80072be:	e7c6      	b.n	800724e <_printf_common+0x3e>
 80072c0:	18e1      	adds	r1, r4, r3
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	2030      	movs	r0, #48	; 0x30
 80072c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ca:	4422      	add	r2, r4
 80072cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072d4:	3302      	adds	r3, #2
 80072d6:	e7c7      	b.n	8007268 <_printf_common+0x58>
 80072d8:	2301      	movs	r3, #1
 80072da:	4622      	mov	r2, r4
 80072dc:	4649      	mov	r1, r9
 80072de:	4638      	mov	r0, r7
 80072e0:	47c0      	blx	r8
 80072e2:	3001      	adds	r0, #1
 80072e4:	d0e6      	beq.n	80072b4 <_printf_common+0xa4>
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7d9      	b.n	800729e <_printf_common+0x8e>
	...

080072ec <_printf_i>:
 80072ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	7e0f      	ldrb	r7, [r1, #24]
 80072f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f4:	2f78      	cmp	r7, #120	; 0x78
 80072f6:	4691      	mov	r9, r2
 80072f8:	4680      	mov	r8, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	469a      	mov	sl, r3
 80072fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007302:	d807      	bhi.n	8007314 <_printf_i+0x28>
 8007304:	2f62      	cmp	r7, #98	; 0x62
 8007306:	d80a      	bhi.n	800731e <_printf_i+0x32>
 8007308:	2f00      	cmp	r7, #0
 800730a:	f000 80d4 	beq.w	80074b6 <_printf_i+0x1ca>
 800730e:	2f58      	cmp	r7, #88	; 0x58
 8007310:	f000 80c0 	beq.w	8007494 <_printf_i+0x1a8>
 8007314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800731c:	e03a      	b.n	8007394 <_printf_i+0xa8>
 800731e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007322:	2b15      	cmp	r3, #21
 8007324:	d8f6      	bhi.n	8007314 <_printf_i+0x28>
 8007326:	a101      	add	r1, pc, #4	; (adr r1, 800732c <_printf_i+0x40>)
 8007328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800732c:	08007385 	.word	0x08007385
 8007330:	08007399 	.word	0x08007399
 8007334:	08007315 	.word	0x08007315
 8007338:	08007315 	.word	0x08007315
 800733c:	08007315 	.word	0x08007315
 8007340:	08007315 	.word	0x08007315
 8007344:	08007399 	.word	0x08007399
 8007348:	08007315 	.word	0x08007315
 800734c:	08007315 	.word	0x08007315
 8007350:	08007315 	.word	0x08007315
 8007354:	08007315 	.word	0x08007315
 8007358:	0800749d 	.word	0x0800749d
 800735c:	080073c5 	.word	0x080073c5
 8007360:	08007457 	.word	0x08007457
 8007364:	08007315 	.word	0x08007315
 8007368:	08007315 	.word	0x08007315
 800736c:	080074bf 	.word	0x080074bf
 8007370:	08007315 	.word	0x08007315
 8007374:	080073c5 	.word	0x080073c5
 8007378:	08007315 	.word	0x08007315
 800737c:	08007315 	.word	0x08007315
 8007380:	0800745f 	.word	0x0800745f
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	1d1a      	adds	r2, r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	602a      	str	r2, [r5, #0]
 800738c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007394:	2301      	movs	r3, #1
 8007396:	e09f      	b.n	80074d8 <_printf_i+0x1ec>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	0607      	lsls	r7, r0, #24
 800739e:	f103 0104 	add.w	r1, r3, #4
 80073a2:	6029      	str	r1, [r5, #0]
 80073a4:	d501      	bpl.n	80073aa <_printf_i+0xbe>
 80073a6:	681e      	ldr	r6, [r3, #0]
 80073a8:	e003      	b.n	80073b2 <_printf_i+0xc6>
 80073aa:	0646      	lsls	r6, r0, #25
 80073ac:	d5fb      	bpl.n	80073a6 <_printf_i+0xba>
 80073ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	da03      	bge.n	80073be <_printf_i+0xd2>
 80073b6:	232d      	movs	r3, #45	; 0x2d
 80073b8:	4276      	negs	r6, r6
 80073ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073be:	485a      	ldr	r0, [pc, #360]	; (8007528 <_printf_i+0x23c>)
 80073c0:	230a      	movs	r3, #10
 80073c2:	e012      	b.n	80073ea <_printf_i+0xfe>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	1d19      	adds	r1, r3, #4
 80073ca:	6029      	str	r1, [r5, #0]
 80073cc:	0605      	lsls	r5, r0, #24
 80073ce:	d501      	bpl.n	80073d4 <_printf_i+0xe8>
 80073d0:	681e      	ldr	r6, [r3, #0]
 80073d2:	e002      	b.n	80073da <_printf_i+0xee>
 80073d4:	0641      	lsls	r1, r0, #25
 80073d6:	d5fb      	bpl.n	80073d0 <_printf_i+0xe4>
 80073d8:	881e      	ldrh	r6, [r3, #0]
 80073da:	4853      	ldr	r0, [pc, #332]	; (8007528 <_printf_i+0x23c>)
 80073dc:	2f6f      	cmp	r7, #111	; 0x6f
 80073de:	bf0c      	ite	eq
 80073e0:	2308      	moveq	r3, #8
 80073e2:	230a      	movne	r3, #10
 80073e4:	2100      	movs	r1, #0
 80073e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ea:	6865      	ldr	r5, [r4, #4]
 80073ec:	60a5      	str	r5, [r4, #8]
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	bfa2      	ittt	ge
 80073f2:	6821      	ldrge	r1, [r4, #0]
 80073f4:	f021 0104 	bicge.w	r1, r1, #4
 80073f8:	6021      	strge	r1, [r4, #0]
 80073fa:	b90e      	cbnz	r6, 8007400 <_printf_i+0x114>
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	d04b      	beq.n	8007498 <_printf_i+0x1ac>
 8007400:	4615      	mov	r5, r2
 8007402:	fbb6 f1f3 	udiv	r1, r6, r3
 8007406:	fb03 6711 	mls	r7, r3, r1, r6
 800740a:	5dc7      	ldrb	r7, [r0, r7]
 800740c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007410:	4637      	mov	r7, r6
 8007412:	42bb      	cmp	r3, r7
 8007414:	460e      	mov	r6, r1
 8007416:	d9f4      	bls.n	8007402 <_printf_i+0x116>
 8007418:	2b08      	cmp	r3, #8
 800741a:	d10b      	bne.n	8007434 <_printf_i+0x148>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	07de      	lsls	r6, r3, #31
 8007420:	d508      	bpl.n	8007434 <_printf_i+0x148>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6861      	ldr	r1, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	bfde      	ittt	le
 800742a:	2330      	movle	r3, #48	; 0x30
 800742c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007434:	1b52      	subs	r2, r2, r5
 8007436:	6122      	str	r2, [r4, #16]
 8007438:	f8cd a000 	str.w	sl, [sp]
 800743c:	464b      	mov	r3, r9
 800743e:	aa03      	add	r2, sp, #12
 8007440:	4621      	mov	r1, r4
 8007442:	4640      	mov	r0, r8
 8007444:	f7ff fee4 	bl	8007210 <_printf_common>
 8007448:	3001      	adds	r0, #1
 800744a:	d14a      	bne.n	80074e2 <_printf_i+0x1f6>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	b004      	add	sp, #16
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	4833      	ldr	r0, [pc, #204]	; (800752c <_printf_i+0x240>)
 8007460:	2778      	movs	r7, #120	; 0x78
 8007462:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	061f      	lsls	r7, r3, #24
 800746c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007470:	d402      	bmi.n	8007478 <_printf_i+0x18c>
 8007472:	065f      	lsls	r7, r3, #25
 8007474:	bf48      	it	mi
 8007476:	b2b6      	uxthmi	r6, r6
 8007478:	07df      	lsls	r7, r3, #31
 800747a:	bf48      	it	mi
 800747c:	f043 0320 	orrmi.w	r3, r3, #32
 8007480:	6029      	str	r1, [r5, #0]
 8007482:	bf48      	it	mi
 8007484:	6023      	strmi	r3, [r4, #0]
 8007486:	b91e      	cbnz	r6, 8007490 <_printf_i+0x1a4>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f023 0320 	bic.w	r3, r3, #32
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	2310      	movs	r3, #16
 8007492:	e7a7      	b.n	80073e4 <_printf_i+0xf8>
 8007494:	4824      	ldr	r0, [pc, #144]	; (8007528 <_printf_i+0x23c>)
 8007496:	e7e4      	b.n	8007462 <_printf_i+0x176>
 8007498:	4615      	mov	r5, r2
 800749a:	e7bd      	b.n	8007418 <_printf_i+0x12c>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	6826      	ldr	r6, [r4, #0]
 80074a0:	6961      	ldr	r1, [r4, #20]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6028      	str	r0, [r5, #0]
 80074a6:	0635      	lsls	r5, r6, #24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0x1c4>
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0x1ca>
 80074b0:	0670      	lsls	r0, r6, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0x1c0>
 80074b4:	8019      	strh	r1, [r3, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	4615      	mov	r5, r2
 80074bc:	e7bc      	b.n	8007438 <_printf_i+0x14c>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7f8 fea0 	bl	8000210 <memchr>
 80074d0:	b108      	cbz	r0, 80074d6 <_printf_i+0x1ea>
 80074d2:	1b40      	subs	r0, r0, r5
 80074d4:	6060      	str	r0, [r4, #4]
 80074d6:	6863      	ldr	r3, [r4, #4]
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	2300      	movs	r3, #0
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	e7aa      	b.n	8007438 <_printf_i+0x14c>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	462a      	mov	r2, r5
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d0ad      	beq.n	800744c <_printf_i+0x160>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	079b      	lsls	r3, r3, #30
 80074f4:	d413      	bmi.n	800751e <_printf_i+0x232>
 80074f6:	68e0      	ldr	r0, [r4, #12]
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	4298      	cmp	r0, r3
 80074fc:	bfb8      	it	lt
 80074fe:	4618      	movlt	r0, r3
 8007500:	e7a6      	b.n	8007450 <_printf_i+0x164>
 8007502:	2301      	movs	r3, #1
 8007504:	4632      	mov	r2, r6
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d09d      	beq.n	800744c <_printf_i+0x160>
 8007510:	3501      	adds	r5, #1
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	42ab      	cmp	r3, r5
 800751a:	dcf2      	bgt.n	8007502 <_printf_i+0x216>
 800751c:	e7eb      	b.n	80074f6 <_printf_i+0x20a>
 800751e:	2500      	movs	r5, #0
 8007520:	f104 0619 	add.w	r6, r4, #25
 8007524:	e7f5      	b.n	8007512 <_printf_i+0x226>
 8007526:	bf00      	nop
 8007528:	0800765d 	.word	0x0800765d
 800752c:	0800766e 	.word	0x0800766e

08007530 <memmove>:
 8007530:	4288      	cmp	r0, r1
 8007532:	b510      	push	{r4, lr}
 8007534:	eb01 0402 	add.w	r4, r1, r2
 8007538:	d902      	bls.n	8007540 <memmove+0x10>
 800753a:	4284      	cmp	r4, r0
 800753c:	4623      	mov	r3, r4
 800753e:	d807      	bhi.n	8007550 <memmove+0x20>
 8007540:	1e43      	subs	r3, r0, #1
 8007542:	42a1      	cmp	r1, r4
 8007544:	d008      	beq.n	8007558 <memmove+0x28>
 8007546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754e:	e7f8      	b.n	8007542 <memmove+0x12>
 8007550:	4402      	add	r2, r0
 8007552:	4601      	mov	r1, r0
 8007554:	428a      	cmp	r2, r1
 8007556:	d100      	bne.n	800755a <memmove+0x2a>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007562:	e7f7      	b.n	8007554 <memmove+0x24>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa fa66 	bl	8001a40 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	2000344c 	.word	0x2000344c

08007584 <memcpy>:
 8007584:	440a      	add	r2, r1
 8007586:	4291      	cmp	r1, r2
 8007588:	f100 33ff 	add.w	r3, r0, #4294967295
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	4770      	bx	lr
 8007590:	b510      	push	{r4, lr}
 8007592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	4291      	cmp	r1, r2
 800759c:	d1f9      	bne.n	8007592 <memcpy+0xe>
 800759e:	bd10      	pop	{r4, pc}

080075a0 <_realloc_r>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	4680      	mov	r8, r0
 80075a6:	4614      	mov	r4, r2
 80075a8:	460e      	mov	r6, r1
 80075aa:	b921      	cbnz	r1, 80075b6 <_realloc_r+0x16>
 80075ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	4611      	mov	r1, r2
 80075b2:	f7ff bc49 	b.w	8006e48 <_malloc_r>
 80075b6:	b92a      	cbnz	r2, 80075c4 <_realloc_r+0x24>
 80075b8:	f7ff fbda 	bl	8006d70 <_free_r>
 80075bc:	4625      	mov	r5, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	f000 f81b 	bl	80075fe <_malloc_usable_size_r>
 80075c8:	4284      	cmp	r4, r0
 80075ca:	4607      	mov	r7, r0
 80075cc:	d802      	bhi.n	80075d4 <_realloc_r+0x34>
 80075ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075d2:	d812      	bhi.n	80075fa <_realloc_r+0x5a>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fc36 	bl	8006e48 <_malloc_r>
 80075dc:	4605      	mov	r5, r0
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0ed      	beq.n	80075be <_realloc_r+0x1e>
 80075e2:	42bc      	cmp	r4, r7
 80075e4:	4622      	mov	r2, r4
 80075e6:	4631      	mov	r1, r6
 80075e8:	bf28      	it	cs
 80075ea:	463a      	movcs	r2, r7
 80075ec:	f7ff ffca 	bl	8007584 <memcpy>
 80075f0:	4631      	mov	r1, r6
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7ff fbbc 	bl	8006d70 <_free_r>
 80075f8:	e7e1      	b.n	80075be <_realloc_r+0x1e>
 80075fa:	4635      	mov	r5, r6
 80075fc:	e7df      	b.n	80075be <_realloc_r+0x1e>

080075fe <_malloc_usable_size_r>:
 80075fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007602:	1f18      	subs	r0, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfbc      	itt	lt
 8007608:	580b      	ldrlt	r3, [r1, r0]
 800760a:	18c0      	addlt	r0, r0, r3
 800760c:	4770      	bx	lr
	...

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
