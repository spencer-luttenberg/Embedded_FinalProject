
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e94  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007074  08007074  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800707c  0800707c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000010  08007094  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08007094  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016694  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc0  00000000  00000000  00036717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  000393d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f92  00000000  00000000  0003a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f39  00000000  00000000  0003b732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a93  00000000  00000000  0006266b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3675  00000000  00000000  0007b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000557c  00000000  00000000  0016e774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00173cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007044 	.word	0x08007044

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08007044 	.word	0x08007044

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <set_motor_pwm>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define MOTORA 0

void set_motor_pwm(uint8_t motor_ID, float duty_cycle){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	ed87 0a00 	vstr	s0, [r7]
 8000510:	71fb      	strb	r3, [r7, #7]
	switch(motor_ID){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d113      	bne.n	8000540 <set_motor_pwm+0x3c>
	case MOTORA:
	{
		TIM3->CCR1 = htim3.Init.Period*(duty_cycle/100);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <set_motor_pwm+0x48>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000524:	edd7 6a00 	vldr	s13, [r7]
 8000528:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8000550 <set_motor_pwm+0x4c>
 800052c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <set_motor_pwm+0x50>)
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	ee17 2a90 	vmov	r2, s15
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	}

};
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200000d0 	.word	0x200000d0
 8000550:	42c80000 	.word	0x42c80000
 8000554:	40000400 	.word	0x40000400

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	f5ad 5de1 	sub.w	sp, sp, #7200	; 0x1c20
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fe9c 	bl	800129e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f887 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fa7d 	bl	8000a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f8e9 	bl	8000744 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000572:	f000 f927 	bl	80007c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000576:	f000 fa19 	bl	80009ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 fa47 	bl	8000a0c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800057e:	f000 f979 	bl	8000874 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000582:	f000 f9ef 	bl	8000964 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim10);
 8000586:	4833      	ldr	r0, [pc, #204]	; (8000654 <main+0xfc>)
 8000588:	f003 fde8 	bl	800415c <HAL_TIM_Base_Start>





	float current_duty_cycle = 0.0;
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000594:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	482f      	ldr	r0, [pc, #188]	; (8000658 <main+0x100>)
 800059a:	f003 fea7 	bl	80042ec <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA (&huart3, Rx_data, 4);  // Receive 4 Bytes of data
 800059e:	2204      	movs	r2, #4
 80005a0:	492e      	ldr	r1, [pc, #184]	; (800065c <main+0x104>)
 80005a2:	482f      	ldr	r0, [pc, #188]	; (8000660 <main+0x108>)
 80005a4:	f004 fe58 	bl	8005258 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT (&huart3, Rx_data, 4);
 80005a8:	2204      	movs	r2, #4
 80005aa:	492c      	ldr	r1, [pc, #176]	; (800065c <main+0x104>)
 80005ac:	482c      	ldr	r0, [pc, #176]	; (8000660 <main+0x108>)
 80005ae:	f004 fe0f 	bl	80051d0 <HAL_UART_Receive_IT>



	// example write
	uint8_t Input_Byte_Array[3600];
	for (int i = 0; i <= 3599; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	f641 4224 	movw	r2, #7204	; 0x1c24
 80005b8:	443a      	add	r2, r7
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	e014      	b.n	80005e8 <main+0x90>
		Input_Byte_Array[i] = (uint8_t)0b00001011;
 80005be:	f641 4328 	movw	r3, #7208	; 0x1c28
 80005c2:	443b      	add	r3, r7
 80005c4:	f6a3 6218 	subw	r2, r3, #3608	; 0xe18
 80005c8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005cc:	443b      	add	r3, r7
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	220b      	movs	r2, #11
 80005d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 3599; i++) {
 80005d6:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005da:	443b      	add	r3, r7
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	f641 4224 	movw	r2, #7204	; 0x1c24
 80005e4:	443a      	add	r2, r7
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	f641 4324 	movw	r3, #7204	; 0x1c24
 80005ec:	443b      	add	r3, r7
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80005f4:	dbe3      	blt.n	80005be <main+0x66>
	}
	writeEEPROM(0, Input_Byte_Array);
 80005f6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80005fa:	4619      	mov	r1, r3
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fb19 	bl	8000c34 <writeEEPROM>


	// example read
	uint8_t Output_Byte_Array[3600];
	readEEPROM(0, Output_Byte_Array);
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0x10c>)
 8000604:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8000608:	f103 0308 	add.w	r3, r3, #8
 800060c:	443b      	add	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fb55 	bl	8000cc0 <readEEPROM>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// create new thread
	timer4Value = __HAL_TIM_GET_COUNTER(&htim10);
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <main+0xfc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0x110>)
 8000620:	801a      	strh	r2, [r3, #0]
//	  //HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	}else{
//	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
//	}

	if(timer4Value % 1200 == 0){
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <main+0x110>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <main+0x114>)
 8000628:	fba2 1203 	umull	r1, r2, r2, r3
 800062c:	09d2      	lsrs	r2, r2, #7
 800062e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <main+0xee>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800063e:	2101      	movs	r1, #1
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <main+0x118>)
 8000642:	f001 fc70 	bl	8001f26 <HAL_GPIO_TogglePin>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_motor_pwm(MOTORA, 100.0);
 8000646:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000674 <main+0x11c>
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff5a 	bl	8000504 <set_motor_pwm>
	timer4Value = __HAL_TIM_GET_COUNTER(&htim10);
 8000650:	e7e1      	b.n	8000616 <main+0xbe>
 8000652:	bf00      	nop
 8000654:	2000011c 	.word	0x2000011c
 8000658:	200000d0 	.word	0x200000d0
 800065c:	200006fc 	.word	0x200006fc
 8000660:	20000168 	.word	0x20000168
 8000664:	ffffe3d8 	.word	0xffffe3d8
 8000668:	2000002c 	.word	0x2000002c
 800066c:	1b4e81b5 	.word	0x1b4e81b5
 8000670:	40020400 	.word	0x40020400
 8000674:	42c80000 	.word	0x42c80000

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fcb0 	bl	8006fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xc8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xc8>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xc8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e8:	2348      	movs	r3, #72	; 0x48
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f0:	2303      	movs	r3, #3
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fc1d 	bl	8002f38 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000704:	f000 fb18 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 feab 	bl	8003480 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000730:	f000 fb02 	bl	8000d38 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00305FFF;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f001 fbec 	bl	8001f5c <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fad5 	bl	8000d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f002 f9f2 	bl	8002b7a <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 facc 	bl	8000d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f002 fa34 	bl	8002c10 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fac3 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000030 	.word	0x20000030
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00305fff 	.word	0x00305fff

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_TIM2_Init+0xac>)
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_TIM2_Init+0xac>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_TIM2_Init+0xac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0xac>)
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_TIM2_Init+0xac>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_TIM2_Init+0xac>)
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <MX_TIM2_Init+0xac>)
 8000810:	f003 fd14 	bl	800423c <HAL_TIM_PWM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800081a:	f000 fa8d 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <MX_TIM2_Init+0xac>)
 800082e:	f004 fbf3 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000838:	f000 fa7e 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM2_Init+0xac>)
 8000854:	f003 fe44 	bl	80044e0 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800085e:	f000 fa6b 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM2_Init+0xac>)
 8000864:	f000 fb54 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000084 	.word	0x20000084

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_TIM3_Init+0xe8>)
 80008a8:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <MX_TIM3_Init+0xec>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_TIM3_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_TIM3_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_TIM3_Init+0xe8>)
 80008ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_TIM3_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_TIM3_Init+0xe8>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008cc:	4823      	ldr	r0, [pc, #140]	; (800095c <MX_TIM3_Init+0xe8>)
 80008ce:	f003 fbed 	bl	80040ac <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008d8:	f000 fa2e 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e6:	4619      	mov	r1, r3
 80008e8:	481c      	ldr	r0, [pc, #112]	; (800095c <MX_TIM3_Init+0xe8>)
 80008ea:	f003 ff0d 	bl	8004708 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008f4:	f000 fa20 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <MX_TIM3_Init+0xe8>)
 80008fa:	f003 fc9f 	bl	800423c <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000904:	f000 fa18 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_TIM3_Init+0xe8>)
 8000918:	f004 fb7e 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 fa09 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2360      	movs	r3, #96	; 0x60
 8000928:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 800092a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800092e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM3_Init+0xe8>)
 8000940:	f003 fdce 	bl	80044e0 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800094a:	f000 f9f5 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM3_Init+0xe8>)
 8000950:	f000 fade 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000d0 	.word	0x200000d0
 8000960:	40000400 	.word	0x40000400

08000964 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_TIM10_Init+0x40>)
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_TIM10_Init+0x44>)
 800096c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000970:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000974:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 13200;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_TIM10_Init+0x40>)
 800097e:	f243 3290 	movw	r2, #13200	; 0x3390
 8000982:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_TIM10_Init+0x40>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000992:	f003 fb8b 	bl	80040ac <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800099c:	f000 f9cc 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000011c 	.word	0x2000011c
 80009a8:	40014400 	.word	0x40014400

080009ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_USART3_UART_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009f2:	f004 fb9f 	bl	8005134 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80009fc:	f000 f99c 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000168 	.word	0x20000168
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2206      	movs	r2, #6
 8000a1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	f002 f92a 	bl	8002ca8 <HAL_PCD_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f96d 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001f0 	.word	0x200001f0

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b68      	ldr	r3, [pc, #416]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a67      	ldr	r2, [pc, #412]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	4b62      	ldr	r3, [pc, #392]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a61      	ldr	r2, [pc, #388]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b5f      	ldr	r3, [pc, #380]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a5b      	ldr	r2, [pc, #364]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b59      	ldr	r3, [pc, #356]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a55      	ldr	r2, [pc, #340]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ade:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a4f      	ldr	r2, [pc, #316]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <MX_GPIO_Init+0x1b8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b14:	4843      	ldr	r0, [pc, #268]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b16:	f001 f9ed 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2141      	movs	r1, #65	; 0x41
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000b20:	f001 f9e8 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483c      	ldr	r0, [pc, #240]	; (8000c2c <MX_GPIO_Init+0x1c4>)
 8000b3c:	f001 f82e 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b40:	2332      	movs	r3, #50	; 0x32
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4834      	ldr	r0, [pc, #208]	; (8000c2c <MX_GPIO_Init+0x1c4>)
 8000b5c:	f001 f81e 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b60:	2386      	movs	r3, #134	; 0x86
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482d      	ldr	r0, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x1c8>)
 8000b7c:	f001 f80e 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b80:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4822      	ldr	r0, [pc, #136]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000b9a:	f000 ffff 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000b9e:	2341      	movs	r3, #65	; 0x41
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000bb6:	f000 fff1 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4813      	ldr	r0, [pc, #76]	; (8000c24 <MX_GPIO_Init+0x1bc>)
 8000bd8:	f000 ffe0 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000bf0:	f000 ffd4 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_GPIO_Init+0x1c0>)
 8000c12:	f000 ffc3 	bl	8001b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c16:	bf00      	nop
 8000c18:	3730      	adds	r7, #48	; 0x30
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020000 	.word	0x40020000

08000c34 <writeEEPROM>:
/*
songID index begins at 0. Array expected to be
full, and padded with zeros.
Bit format = 0b00000MBT
*/
int writeEEPROM(int songID, uint8_t *array){
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <writeEEPROM+0x84>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]

	if((sizeof(array) > 3600) || songID > 71){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b47      	cmp	r3, #71	; 0x47
 8000c56:	dd01      	ble.n	8000c5c <writeEEPROM+0x28>
		return 1; // Input array too big or songID too big
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e029      	b.n	8000cb0 <writeEEPROM+0x7c>
	}

	// overwrite first index for checking in read memory
	array[0] = (uint8_t)0b01011000;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2258      	movs	r2, #88	; 0x58
 8000c60:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 8000c62:	f000 fe39 	bl	80018d8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_ERSERR | FLASH_FLAG_PGPERR);
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <writeEEPROM+0x88>)
 8000c68:	22f3      	movs	r2, #243	; 0xf3
 8000c6a:	60da      	str	r2, [r3, #12]

	for(int i = 0; i + 1 <= 3600; i++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	e013      	b.n	8000c9a <writeEEPROM+0x66>
	  HAL_FLASH_Program(FLASH_PROGRAM_BYTE, (MEM_Location), array[i]);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	4622      	mov	r2, r4
 8000c84:	462b      	mov	r3, r5
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 fdc9 	bl	8001820 <HAL_FLASH_Program>
	  MEM_Location = MEM_Location + 0x1;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i + 1 <= 3600; i++){
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000ca0:	dbe7      	blt.n	8000c72 <writeEEPROM+0x3e>
	}

	HAL_Delay(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f000 fb57 	bl	8001358 <HAL_Delay>
	HAL_FLASH_Lock();
 8000caa:	f000 fe37 	bl	800191c <HAL_FLASH_Lock>

	return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <readEEPROM>:
/*
Input argument arr will be filled with data
songID index begins at 0
Bit format = 0b00000MBT
*/
int readEEPROM(int songID, uint8_t arr[]) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	// 12 fps * 60 seconds * 5 min = 3600 samples

	if(songID > 71){
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b47      	cmp	r3, #71	; 0x47
 8000cce:	dd01      	ble.n	8000cd4 <readEEPROM+0x14>
		return 1; // songID too big
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e027      	b.n	8000d24 <readEEPROM+0x64>
	}

	uint32_t MEM_Location = EEPROM_Sector_5 + songID * 0xE10; // 0xE10 = 3600 Bytes offset
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <readEEPROM+0x70>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i <= 3599; i++){
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	e00f      	b.n	8000d0e <readEEPROM+0x4e>
		memcpy(&singlePacket, (void *) (MEM_Location), sizeof(singlePacket));
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <readEEPROM+0x74>)
 8000cf4:	701a      	strb	r2, [r3, #0]
		arr[i] = singlePacket;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <readEEPROM+0x74>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	701a      	strb	r2, [r3, #0]
		MEM_Location = MEM_Location + 0x1;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i <= 3599; i++){
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000d14:	dbeb      	blt.n	8000cee <readEEPROM+0x2e>
	}

	if((uint8_t)arr[0] != (uint8_t)0b01011000){
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b58      	cmp	r3, #88	; 0x58
 8000d1c:	d001      	beq.n	8000d22 <readEEPROM+0x62>
		return 1; // checksum failed, song not located in this memory location
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <readEEPROM+0x64>
	}

    return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20000000 	.word	0x20000000
 8000d34:	200006f8 	.word	0x200006f8

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0aa      	sub	sp, #168	; 0xa8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2284      	movs	r2, #132	; 0x84
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f006 f91d 	bl	8006fec <memset>
  if(hi2c->Instance==I2C1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <HAL_I2C_MspInit+0xd4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d14c      	bne.n	8000e56 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fd7e 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dd6:	f7ff ffaf 	bl	8000d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000df2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e16:	4619      	mov	r1, r3
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <HAL_I2C_MspInit+0xdc>)
 8000e1a:	f000 febf 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_I2C_MspInit+0xd8>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	201f      	movs	r0, #31
 8000e3c:	f000 fb8b 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e40:	201f      	movs	r0, #31
 8000e42:	f000 fba4 	bl	800158e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2020      	movs	r0, #32
 8000e4c:	f000 fb83 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e50:	2020      	movs	r0, #32
 8000e52:	f000 fb9c 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	37a8      	adds	r7, #168	; 0xa8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40005400 	.word	0x40005400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020400 	.word	0x40020400

08000e6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7c:	d10b      	bne.n	8000e96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x38>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x38>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x38>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <HAL_TIM_Base_MspInit+0x5c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ed2:	e010      	b.n	8000ef6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM10)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_TIM_Base_MspInit+0x64>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10b      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_TIM_Base_MspInit+0x60>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40000400 	.word	0x40000400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40014400 	.word	0x40014400

08000f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d11d      	bne.n	8000f6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_TIM_MspPostInit+0xac>)
 8000f68:	f000 fe18 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f6c:	e020      	b.n	8000fb0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_TIM_MspPostInit+0xb0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d11b      	bne.n	8000fb0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f90:	2340      	movs	r3, #64	; 0x40
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_TIM_MspPostInit+0xac>)
 8000fac:	f000 fdf6 	bl	8001b9c <HAL_GPIO_Init>
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0aa      	sub	sp, #168	; 0xa8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2284      	movs	r2, #132	; 0x84
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 f801 	bl	8006fec <memset>
  if(huart->Instance==USART3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_UART_MspInit+0xc4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d144      	bne.n	800107e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fc62 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800100e:	f7ff fe93 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_UART_MspInit+0xc8>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_UART_MspInit+0xc8>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_UART_MspInit+0xc8>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_UART_MspInit+0xc8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_UART_MspInit+0xc8>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_UART_MspInit+0xc8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001066:	4619      	mov	r1, r3
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_UART_MspInit+0xcc>)
 800106a:	f000 fd97 	bl	8001b9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2027      	movs	r0, #39	; 0x27
 8001074:	f000 fa6f 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001078:	2027      	movs	r0, #39	; 0x27
 800107a:	f000 fa88 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	37a8      	adds	r7, #168	; 0xa8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004800 	.word	0x40004800
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00

08001094 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ac      	sub	sp, #176	; 0xb0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2284      	movs	r2, #132	; 0x84
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 ff99 	bl	8006fec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c2:	d159      	bne.n	8001178 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fbf9 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010e0:	f7ff fe2a 	bl	8000d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	4619      	mov	r1, r3
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001124:	f000 fd3a 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	4619      	mov	r1, r3
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001144:	f000 fd2a 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001152:	6353      	str	r3, [r2, #52]	; 0x34
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	; 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f8a0 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <I2C1_EV_IRQHandler+0x10>)
 80011e2:	f000 ff4b 	bl	800207c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000030 	.word	0x20000030

080011f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <I2C1_ER_IRQHandler+0x10>)
 80011f6:	f000 ff5b 	bl	80020b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000030 	.word	0x20000030

08001204 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <USART3_IRQHandler+0x1c>)
 800120a:	f004 f869 	bl	80052e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT (&huart3, Rx_data, 256);
 800120e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001212:	4904      	ldr	r1, [pc, #16]	; (8001224 <USART3_IRQHandler+0x20>)
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USART3_IRQHandler+0x1c>)
 8001216:	f003 ffdb 	bl	80051d0 <HAL_UART_Receive_IT>


  /* USER CODE END USART3_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000168 	.word	0x20000168
 8001224:	200006fc 	.word	0x200006fc

08001228 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001252:	490e      	ldr	r1, [pc, #56]	; (800128c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001268:	4c0b      	ldr	r4, [pc, #44]	; (8001298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001276:	f7ff ffd7 	bl	8001228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f005 febf 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff f96b 	bl	8000558 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001290:	08007084 	.word	0x08007084
  ldr r2, =_sbss
 8001294:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001298:	2000081c 	.word	0x2000081c

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>

0800129e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 f94c 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f805 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ae:	f7ff fd49 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f967 	bl	80015aa <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f92f 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000004 	.word	0x20000004
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000000c 	.word	0x2000000c
 800133c:	200007fc 	.word	0x200007fc

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200007fc 	.word	0x200007fc

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000000c 	.word	0x2000000c

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	05fa0000 	.word	0x05fa0000

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff29 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff3e 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff31 	bl	8001404 <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa2 	bl	80014fc <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Start_IT+0x26>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e048      	b.n	800167a <HAL_DMA_Start_IT+0xb8>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d137      	bne.n	800166c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f8d6 	bl	80017c2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	223f      	movs	r2, #63	; 0x3f
 800161c:	409a      	lsls	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0216 	orr.w	r2, r2, #22
 8001630:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001640:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0208 	orr.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e005      	b.n	8001678 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001674:	2302      	movs	r3, #2
 8001676:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001678:	7dfb      	ldrb	r3, [r7, #23]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff fe56 	bl	8001340 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d008      	beq.n	80016b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e052      	b.n	800175a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0216 	bic.w	r2, r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d103      	bne.n	80016e4 <HAL_DMA_Abort+0x62>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	e013      	b.n	800172e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001706:	f7ff fe1b 	bl	8001340 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b05      	cmp	r3, #5
 8001712:	d90c      	bls.n	800172e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e015      	b.n	800175a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e4      	bne.n	8001706 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	223f      	movs	r2, #63	; 0x3f
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d004      	beq.n	8001780 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e00c      	b.n	800179a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2205      	movs	r2, #5
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b4:	b2db      	uxtb	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017de:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b40      	cmp	r3, #64	; 0x40
 80017ee:	d108      	bne.n	8001802 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001800:	e007      	b.n	8001812 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	60da      	str	r2, [r3, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_FLASH_Program+0xb0>)
 8001834:	7d1b      	ldrb	r3, [r3, #20]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_FLASH_Program+0x1e>
 800183a:	2302      	movs	r3, #2
 800183c:	e043      	b.n	80018c6 <HAL_FLASH_Program+0xa6>
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_FLASH_Program+0xb0>)
 8001840:	2201      	movs	r2, #1
 8001842:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001844:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001848:	f000 f878 	bl	800193c <FLASH_WaitForLastOperation>
 800184c:	4603      	mov	r3, r0
 800184e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d133      	bne.n	80018be <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d823      	bhi.n	80018a4 <HAL_FLASH_Program+0x84>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_FLASH_Program+0x44>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001875 	.word	0x08001875
 8001868:	08001881 	.word	0x08001881
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001899 	.word	0x08001899
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001874:	783b      	ldrb	r3, [r7, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f000 f921 	bl	8001ac0 <FLASH_Program_Byte>
        break;
 800187e:	e012      	b.n	80018a6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001880:	883b      	ldrh	r3, [r7, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f000 f8f5 	bl	8001a74 <FLASH_Program_HalfWord>
        break;
 800188a:	e00c      	b.n	80018a6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f000 f8c9 	bl	8001a28 <FLASH_Program_Word>
        break;
 8001896:	e006      	b.n	80018a6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f000 f88d 	bl	80019bc <FLASH_Program_DoubleWord>
        break;
 80018a2:	e000      	b.n	80018a6 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80018a4:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018aa:	f000 f847 	bl	800193c <FLASH_WaitForLastOperation>
 80018ae:	4603      	mov	r3, r0
 80018b0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_FLASH_Program+0xb4>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_FLASH_Program+0xb4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_FLASH_Program+0xb0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	751a      	strb	r2, [r3, #20]

  return status;
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000800 	.word	0x20000800
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_FLASH_Unlock+0x38>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da0b      	bge.n	8001902 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_FLASH_Unlock+0x38>)
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_FLASH_Unlock+0x3c>)
 80018ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_FLASH_Unlock+0x38>)
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_FLASH_Unlock+0x40>)
 80018f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_FLASH_Unlock+0x38>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da01      	bge.n	8001902 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001902:	79fb      	ldrb	r3, [r7, #7]
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40023c00 	.word	0x40023c00
 8001914:	45670123 	.word	0x45670123
 8001918:	cdef89ab 	.word	0xcdef89ab

0800191c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_FLASH_Lock+0x1c>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_FLASH_Lock+0x1c>)
 8001926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800192a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023c00 	.word	0x40023c00

0800193c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <FLASH_WaitForLastOperation+0x78>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800194e:	f7ff fcf7 	bl	8001340 <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001954:	e010      	b.n	8001978 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d00c      	beq.n	8001978 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d007      	beq.n	8001974 <FLASH_WaitForLastOperation+0x38>
 8001964:	f7ff fcec 	bl	8001340 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d201      	bcs.n	8001978 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e019      	b.n	80019ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <FLASH_WaitForLastOperation+0x7c>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e8      	bne.n	8001956 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <FLASH_WaitForLastOperation+0x7c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001990:	f000 f8ba 	bl	8001b08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e009      	b.n	80019ac <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <FLASH_WaitForLastOperation+0x7c>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <FLASH_WaitForLastOperation+0x7c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
  
}  
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000800 	.word	0x20000800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <FLASH_Program_DoubleWord+0x68>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80019f2:	f3bf 8f6f 	isb	sy
}
 80019f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80019f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	000a      	movs	r2, r1
 8001a06:	2300      	movs	r3, #0
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	3104      	adds	r1, #4
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a10:	f3bf 8f4f 	dsb	sy
}
 8001a14:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <FLASH_Program_Word+0x48>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5c:	f3bf 8f4f 	dsb	sy
}
 8001a60:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <FLASH_Program_HalfWord+0x48>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aaa:	f3bf 8f4f 	dsb	sy
}
 8001aae:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <FLASH_Program_Byte+0x44>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001af2:	f3bf 8f4f 	dsb	sy
}
 8001af6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b22:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b3a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b6a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <FLASH_SetErrorCode+0x90>)
 8001b82:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <FLASH_SetErrorCode+0x8c>)
 8001b86:	22f2      	movs	r2, #242	; 0xf2
 8001b88:	60da      	str	r2, [r3, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	20000800 	.word	0x20000800

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e175      	b.n	8001ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8164 	bne.w	8001ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x56>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80be 	beq.w	8001ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a65      	ldr	r2, [pc, #404]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d3e:	4a61      	ldr	r2, [pc, #388]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d037      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <HAL_GPIO_Init+0x340>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_GPIO_Init+0x344>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_GPIO_Init+0x348>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_GPIO_Init+0x350>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001db2:	2309      	movs	r3, #9
 8001db4:	e012      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001db6:	230a      	movs	r3, #10
 8001db8:	e010      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae86 	bls.w	8001bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40022400 	.word	0x40022400
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	041a      	lsls	r2, r3, #16
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	400b      	ands	r3, r1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe ff02 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d104      	bne.n	8001ff6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_I2C_Init+0x11c>)
 8002002:	430b      	orrs	r3, r1
 8002004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69d9      	ldr	r1, [r3, #28]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	02008000 	.word	0x02008000

0800207c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	68f9      	ldr	r1, [r7, #12]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00f      	beq.n	80020f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00f      	beq.n	800211c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f043 0208 	orr.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00f      	beq.n	8002146 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002144:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 030b 	and.w	r3, r3, #11
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fb77 	bl	800284c <I2C_ITError>
  }
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
 800219a:	4613      	mov	r3, r2
 800219c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <I2C_Slave_ISR_IT+0x24>
 8002206:	2302      	movs	r3, #2
 8002208:	e0e1      	b.n	80023ce <I2C_Slave_ISR_IT+0x1e8>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002226:	6939      	ldr	r1, [r7, #16]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f9b5 	bl	8002598 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d04b      	beq.n	80022d0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800223e:	2b00      	cmp	r3, #0
 8002240:	d046      	beq.n	80022d0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d128      	bne.n	800229e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b28      	cmp	r3, #40	; 0x28
 8002256:	d108      	bne.n	800226a <I2C_Slave_ISR_IT+0x84>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800225e:	d104      	bne.n	800226a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa9e 	bl	80027a4 <I2C_ITListenCplt>
 8002268:	e031      	b.n	80022ce <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b29      	cmp	r3, #41	; 0x29
 8002274:	d10e      	bne.n	8002294 <I2C_Slave_ISR_IT+0xae>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800227c:	d00a      	beq.n	8002294 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2210      	movs	r2, #16
 8002284:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fbd7 	bl	8002a3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f926 	bl	80024de <I2C_ITSlaveSeqCplt>
 8002292:	e01c      	b.n	80022ce <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800229c:	e08f      	b.n	80023be <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2210      	movs	r2, #16
 80022a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f043 0204 	orr.w	r2, r3, #4
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <I2C_Slave_ISR_IT+0xda>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022be:	d17e      	bne.n	80023be <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	4619      	mov	r1, r3
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fac0 	bl	800284c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022cc:	e077      	b.n	80023be <I2C_Slave_ISR_IT+0x1d8>
 80022ce:	e076      	b.n	80023be <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02f      	beq.n	800233a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02a      	beq.n	800233a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d018      	beq.n	8002320 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d14b      	bne.n	80023c2 <I2C_Slave_ISR_IT+0x1dc>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002330:	d047      	beq.n	80023c2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8d3 	bl	80024de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002338:	e043      	b.n	80023c2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800234e:	6939      	ldr	r1, [r7, #16]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f840 	bl	80023d6 <I2C_ITAddrCplt>
 8002356:	e035      	b.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d030      	beq.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02b      	beq.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d018      	beq.n	80023a8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80023a6:	e00d      	b.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ae:	d002      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x1d0>
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f891 	bl	80024de <I2C_ITSlaveSeqCplt>
 80023bc:	e002      	b.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80023c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023ec:	2b28      	cmp	r3, #40	; 0x28
 80023ee:	d16a      	bne.n	80024c6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b29b      	uxth	r3, r3
 800240a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800240e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	b29b      	uxth	r3, r3
 8002426:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800242a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d138      	bne.n	80024a6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	09db      	lsrs	r3, r3, #7
 8002438:	b29a      	uxth	r2, r3
 800243a:	89bb      	ldrh	r3, [r7, #12]
 800243c:	4053      	eors	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	f003 0306 	and.w	r3, r3, #6
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11c      	bne.n	8002482 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b02      	cmp	r3, #2
 800245c:	d13b      	bne.n	80024d6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2208      	movs	r2, #8
 800246a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fe87 	bl	800218e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002480:	e029      	b.n	80024d6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002482:	893b      	ldrh	r3, [r7, #8]
 8002484:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fb17 	bl	8002abe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002498:	89ba      	ldrh	r2, [r7, #12]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe75 	bl	800218e <HAL_I2C_AddrCallback>
}
 80024a4:	e017      	b.n	80024d6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fb07 	bl	8002abe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024b8:	89ba      	ldrh	r2, [r7, #12]
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fe65 	bl	800218e <HAL_I2C_AddrCallback>
}
 80024c4:	e007      	b.n	80024d6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2208      	movs	r2, #8
 80024cc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e00c      	b.n	800252c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b29      	cmp	r3, #41	; 0x29
 8002536:	d112      	bne.n	800255e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2228      	movs	r2, #40	; 0x28
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2221      	movs	r2, #33	; 0x21
 8002544:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002546:	2101      	movs	r1, #1
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fab8 	bl	8002abe <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fe05 	bl	8002166 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800255c:	e017      	b.n	800258e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b2a      	cmp	r3, #42	; 0x2a
 8002568:	d111      	bne.n	800258e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2228      	movs	r2, #40	; 0x28
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2222      	movs	r2, #34	; 0x22
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002578:	2102      	movs	r1, #2
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa9f 	bl	8002abe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fdf6 	bl	800217a <HAL_I2C_SlaveRxCpltCallback>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b21      	cmp	r3, #33	; 0x21
 80025c2:	d002      	beq.n	80025ca <I2C_ITSlaveCplt+0x32>
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b29      	cmp	r3, #41	; 0x29
 80025c8:	d108      	bne.n	80025dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80025ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa75 	bl	8002abe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2221      	movs	r2, #33	; 0x21
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
 80025da:	e00d      	b.n	80025f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b22      	cmp	r3, #34	; 0x22
 80025e0:	d002      	beq.n	80025e8 <I2C_ITSlaveCplt+0x50>
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b2a      	cmp	r3, #42	; 0x2a
 80025e6:	d107      	bne.n	80025f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80025e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fa66 	bl	8002abe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2222      	movs	r2, #34	; 0x22
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <I2C_ITSlaveCplt+0x204>)
 8002614:	400b      	ands	r3, r1
 8002616:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa0e 	bl	8002a3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002636:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01f      	beq.n	8002680 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800264e:	e017      	b.n	8002680 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002668:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8a4 	bl	800284c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b28      	cmp	r3, #40	; 0x28
 800270e:	d141      	bne.n	8002794 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002710:	6979      	ldr	r1, [r7, #20]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f846 	bl	80027a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002718:	e03c      	b.n	8002794 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002722:	d014      	beq.n	800274e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff feda 	bl	80024de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <I2C_ITSlaveCplt+0x208>)
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fd2f 	bl	80021aa <HAL_I2C_ListenCpltCallback>
}
 800274c:	e022      	b.n	8002794 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b22      	cmp	r3, #34	; 0x22
 8002758:	d10e      	bne.n	8002778 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fd02 	bl	800217a <HAL_I2C_SlaveRxCpltCallback>
}
 8002776:	e00d      	b.n	8002794 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fce9 	bl	8002166 <HAL_I2C_SlaveTxCpltCallback>
}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	fe00e800 	.word	0xfe00e800
 80027a0:	ffff0000 	.word	0xffff0000

080027a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <I2C_ITListenCplt+0xa4>)
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d022      	beq.n	8002820 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002820:	f248 0103 	movw	r1, #32771	; 0x8003
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f94a 	bl	8002abe <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2210      	movs	r2, #16
 8002830:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fcb5 	bl	80021aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	ffff0000 	.word	0xffff0000

0800284c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <I2C_ITError+0x194>)
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b28      	cmp	r3, #40	; 0x28
 8002882:	d005      	beq.n	8002890 <I2C_ITError+0x44>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b29      	cmp	r3, #41	; 0x29
 8002888:	d002      	beq.n	8002890 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b2a      	cmp	r3, #42	; 0x2a
 800288e:	d10b      	bne.n	80028a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002890:	2103      	movs	r1, #3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f913 	bl	8002abe <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2228      	movs	r2, #40	; 0x28
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <I2C_ITError+0x198>)
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34
 80028a6:	e011      	b.n	80028cc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f906 	bl	8002abe <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b60      	cmp	r3, #96	; 0x60
 80028bc:	d003      	beq.n	80028c6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d039      	beq.n	800294e <I2C_ITError+0x102>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b11      	cmp	r3, #17
 80028de:	d002      	beq.n	80028e6 <I2C_ITError+0x9a>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b21      	cmp	r3, #33	; 0x21
 80028e4:	d133      	bne.n	800294e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f4:	d107      	bne.n	8002906 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002904:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe ff4b 	bl	80017a6 <HAL_DMA_GetState>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d017      	beq.n	8002946 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <I2C_ITError+0x19c>)
 800291c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe ff19 	bl	8001762 <HAL_DMA_Abort_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04d      	beq.n	80029d2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002940:	4610      	mov	r0, r2
 8002942:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002944:	e045      	b.n	80029d2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f850 	bl	80029ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800294c:	e041      	b.n	80029d2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d039      	beq.n	80029ca <I2C_ITError+0x17e>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b12      	cmp	r3, #18
 800295a:	d002      	beq.n	8002962 <I2C_ITError+0x116>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b22      	cmp	r3, #34	; 0x22
 8002960:	d133      	bne.n	80029ca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002970:	d107      	bne.n	8002982 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002980:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ff0d 	bl	80017a6 <HAL_DMA_GetState>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d017      	beq.n	80029c2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <I2C_ITError+0x19c>)
 8002998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fedb 	bl	8001762 <HAL_DMA_Abort_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d011      	beq.n	80029d6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029bc:	4610      	mov	r0, r2
 80029be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029c0:	e009      	b.n	80029d6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f812 	bl	80029ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029c8:	e005      	b.n	80029d6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f80e 	bl	80029ec <I2C_TreatErrorCallback>
  }
}
 80029d0:	e002      	b.n	80029d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d6:	bf00      	nop
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	ffff0000 	.word	0xffff0000
 80029e4:	080021e7 	.word	0x080021e7
 80029e8:	08002a83 	.word	0x08002a83

080029ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b60      	cmp	r3, #96	; 0x60
 80029fe:	d10e      	bne.n	8002a1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fbdb 	bl	80021d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a1c:	e009      	b.n	8002a32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fbc6 	bl	80021be <HAL_I2C_ErrorCallback>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d103      	bne.n	8002a58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d007      	beq.n	8002a76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	619a      	str	r2, [r3, #24]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	2200      	movs	r2, #0
 8002aae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff ff9b 	bl	80029ec <I2C_TreatErrorCallback>
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00f      	beq.n	8002af8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002ade:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002aec:	2b28      	cmp	r3, #40	; 0x28
 8002aee:	d003      	beq.n	8002af8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002af6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00f      	beq.n	8002b22 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002b08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b16:	2b28      	cmp	r3, #40	; 0x28
 8002b18:	d003      	beq.n	8002b22 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da03      	bge.n	8002b32 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d103      	bne.n	8002b40 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d103      	bne.n	8002b4e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f043 0320 	orr.w	r3, r3, #32
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d103      	bne.n	8002b5c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d138      	bne.n	8002c02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e032      	b.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2224      	movs	r2, #36	; 0x24
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d139      	bne.n	8002c9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e033      	b.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	b08f      	sub	sp, #60	; 0x3c
 8002cac:	af0a      	add	r7, sp, #40	; 0x28
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e116      	b.n	8002ee8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fe f9dd 	bl	8001094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fedb 	bl	8006ab4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	687e      	ldr	r6, [r7, #4]
 8002d06:	466d      	mov	r5, sp
 8002d08:	f106 0410 	add.w	r4, r6, #16
 8002d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1c:	1d33      	adds	r3, r6, #4
 8002d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d20:	6838      	ldr	r0, [r7, #0]
 8002d22:	f003 fe6f 	bl	8006a04 <USB_CoreInit>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0d7      	b.n	8002ee8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fec9 	bl	8006ad6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e04a      	b.n	8002de0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	333d      	adds	r3, #61	; 0x3d
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	333c      	adds	r3, #60	; 0x3c
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	b298      	uxth	r0, r3
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	; 0x44
 8002d86:	4602      	mov	r2, r0
 8002d88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3340      	adds	r3, #64	; 0x40
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3348      	adds	r3, #72	; 0x48
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	334c      	adds	r3, #76	; 0x4c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3354      	adds	r3, #84	; 0x54
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3af      	bcc.n	8002d4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e044      	b.n	8002e7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	3301      	adds	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d3b5      	bcc.n	8002df0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	687e      	ldr	r6, [r7, #4]
 8002e8c:	466d      	mov	r5, sp
 8002e8e:	f106 0410 	add.w	r4, r6, #16
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea2:	1d33      	adds	r3, r6, #4
 8002ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	f003 fe62 	bl	8006b70 <USB_DevInit>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e014      	b.n	8002ee8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f80a 	bl	8002ef0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 f820 	bl	8006f26 <USB_DevDisconnect>

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	10000003 	.word	0x10000003

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e291      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8087 	beq.w	800306a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5c:	4b96      	ldr	r3, [pc, #600]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d00c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f68:	4b93      	ldr	r3, [pc, #588]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d112      	bne.n	8002f9a <HAL_RCC_OscConfig+0x62>
 8002f74:	4b90      	ldr	r3, [pc, #576]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f82:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d06c      	beq.n	8003068 <HAL_RCC_OscConfig+0x130>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d168      	bne.n	8003068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e26b      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x7a>
 8002fa4:	4b84      	ldr	r3, [pc, #528]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a83      	ldr	r2, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e02e      	b.n	8003010 <HAL_RCC_OscConfig+0xd8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x9c>
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7b      	ldr	r2, [pc, #492]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0xd8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a75      	ldr	r2, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b73      	ldr	r3, [pc, #460]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a72      	ldr	r2, [pc, #456]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xd8>
 8002ff8:	4b6f      	ldr	r3, [pc, #444]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6e      	ldr	r2, [pc, #440]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b6c      	ldr	r3, [pc, #432]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6b      	ldr	r2, [pc, #428]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe f992 	bl	8001340 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe f98e 	bl	8001340 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e21f      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f97e 	bl	8001340 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe f97a 	bl	8001340 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e20b      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x110>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d069      	beq.n	800314a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003076:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003082:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x190>
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e1df      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	493d      	ldr	r1, [pc, #244]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	e040      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f930 	bl	8001340 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe f92c 	bl	8001340 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1bd      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4929      	ldr	r1, [pc, #164]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	e018      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe f90c 	bl	8001340 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312c:	f7fe f908 	bl	8001340 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e199      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d038      	beq.n	80031c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d019      	beq.n	8003192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f8e9 	bl	8001340 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe f8e5 	bl	8001340 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e176      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x23a>
 8003190:	e01a      	b.n	80031c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_RCC_OscConfig+0x280>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe f8cf 	bl	8001340 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe f8cb 	bl	8001340 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d903      	bls.n	80031bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e15c      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
 80031b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ee      	bne.n	80031a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a4 	beq.w	800331e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a87      	ldr	r2, [pc, #540]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7e      	ldr	r2, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x4d0>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe f893 	bl	8001340 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe f88f 	bl	8001340 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e120      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	4b75      	ldr	r3, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4d0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x31a>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e02d      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x33c>
 800325a:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	e01c      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d10c      	bne.n	8003296 <HAL_RCC_OscConfig+0x35e>
 800327c:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a60      	ldr	r2, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a5a      	ldr	r2, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	4b58      	ldr	r3, [pc, #352]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d015      	beq.n	80032e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe f843 	bl	8001340 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe f83f 	bl	8001340 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ce      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ee      	beq.n	80032be <HAL_RCC_OscConfig+0x386>
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe f82d 	bl	8001340 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe f829 	bl	8001340 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0b8      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a4 	beq.w	8003470 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003328:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d06b      	beq.n	800340c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d149      	bne.n	80033d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a30      	ldr	r2, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd fffa 	bl	8001340 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd fff6 	bl	8001340 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e087      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	4313      	orrs	r3, r2
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800339a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd ffca 	bl	8001340 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd ffc6 	bl	8001340 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e057      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x478>
 80033ce:	e04f      	b.n	8003470 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd ffb0 	bl	8001340 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd ffac 	bl	8001340 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e03d      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4ac>
 8003402:	e035      	b.n	8003470 <HAL_RCC_OscConfig+0x538>
 8003404:	40023800 	.word	0x40023800
 8003408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x544>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d028      	beq.n	800346c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d121      	bne.n	800346c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d11a      	bne.n	800346c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003442:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0d0      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 020f 	bic.w	r2, r3, #15
 80034ae:	4965      	ldr	r1, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d040      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e073      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06b      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4936      	ldr	r1, [pc, #216]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fd fee4 	bl	8001340 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fd fee0 	bl	8001340 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e053      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d210      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	4922      	ldr	r1, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f821 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1cc>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1d0>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1d4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fe40 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	0800705c 	.word	0x0800705c
 8003650:	20000004 	.word	0x20000004
 8003654:	20000008 	.word	0x20000008

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800365c:	b094      	sub	sp, #80	; 0x50
 800365e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
 8003664:	2300      	movs	r3, #0
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003668:	2300      	movs	r3, #0
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b08      	cmp	r3, #8
 800367a:	d00d      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x40>
 800367c:	2b08      	cmp	r3, #8
 800367e:	f200 80e1 	bhi.w	8003844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x34>
 8003686:	2b04      	cmp	r3, #4
 8003688:	d003      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x3a>
 800368a:	e0db      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b73      	ldr	r3, [pc, #460]	; (800385c <HAL_RCC_GetSysClockFreq+0x204>)
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003690:	e0db      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCC_GetSysClockFreq+0x208>)
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003696:	e0d8      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003698:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036a2:	4b6d      	ldr	r3, [pc, #436]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d063      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	2200      	movs	r2, #0
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
 80036c2:	2300      	movs	r3, #0
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036ca:	4622      	mov	r2, r4
 80036cc:	462b      	mov	r3, r5
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	0159      	lsls	r1, r3, #5
 80036d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036dc:	0150      	lsls	r0, r2, #5
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4621      	mov	r1, r4
 80036e4:	1a51      	subs	r1, r2, r1
 80036e6:	6139      	str	r1, [r7, #16]
 80036e8:	4629      	mov	r1, r5
 80036ea:	eb63 0301 	sbc.w	r3, r3, r1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036fc:	4659      	mov	r1, fp
 80036fe:	018b      	lsls	r3, r1, #6
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003706:	4651      	mov	r1, sl
 8003708:	018a      	lsls	r2, r1, #6
 800370a:	4651      	mov	r1, sl
 800370c:	ebb2 0801 	subs.w	r8, r2, r1
 8003710:	4659      	mov	r1, fp
 8003712:	eb63 0901 	sbc.w	r9, r3, r1
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800372a:	4690      	mov	r8, r2
 800372c:	4699      	mov	r9, r3
 800372e:	4623      	mov	r3, r4
 8003730:	eb18 0303 	adds.w	r3, r8, r3
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	462b      	mov	r3, r5
 8003738:	eb49 0303 	adc.w	r3, r9, r3
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800374a:	4629      	mov	r1, r5
 800374c:	024b      	lsls	r3, r1, #9
 800374e:	4621      	mov	r1, r4
 8003750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003754:	4621      	mov	r1, r4
 8003756:	024a      	lsls	r2, r1, #9
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375e:	2200      	movs	r2, #0
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
 8003762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003768:	f7fc fd4e 	bl	8000208 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4613      	mov	r3, r2
 8003772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003774:	e058      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003776:	4b38      	ldr	r3, [pc, #224]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	2200      	movs	r2, #0
 800377e:	4618      	mov	r0, r3
 8003780:	4611      	mov	r1, r2
 8003782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	0159      	lsls	r1, r3, #5
 800379e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a2:	0150      	lsls	r0, r2, #5
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4641      	mov	r1, r8
 80037aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ae:	4649      	mov	r1, r9
 80037b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037c8:	ebb2 040a 	subs.w	r4, r2, sl
 80037cc:	eb63 050b 	sbc.w	r5, r3, fp
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	00eb      	lsls	r3, r5, #3
 80037da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037de:	00e2      	lsls	r2, r4, #3
 80037e0:	4614      	mov	r4, r2
 80037e2:	461d      	mov	r5, r3
 80037e4:	4643      	mov	r3, r8
 80037e6:	18e3      	adds	r3, r4, r3
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	464b      	mov	r3, r9
 80037ec:	eb45 0303 	adc.w	r3, r5, r3
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037fe:	4629      	mov	r1, r5
 8003800:	028b      	lsls	r3, r1, #10
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003808:	4621      	mov	r1, r4
 800380a:	028a      	lsls	r2, r1, #10
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003812:	2200      	movs	r2, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	61fa      	str	r2, [r7, #28]
 8003818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800381c:	f7fc fcf4 	bl	8000208 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4613      	mov	r3, r2
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_GetSysClockFreq+0x200>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	3301      	adds	r3, #1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800383a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003842:	e002      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetSysClockFreq+0x204>)
 8003846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800384c:	4618      	mov	r0, r3
 800384e:	3750      	adds	r7, #80	; 0x50
 8003850:	46bd      	mov	sp, r7
 8003852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	00f42400 	.word	0x00f42400
 8003860:	007a1200 	.word	0x007a1200

08003864 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4903      	ldr	r1, [pc, #12]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	0800706c 	.word	0x0800706c

080038a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038a8:	f7ff ffdc 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0b5b      	lsrs	r3, r3, #13
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800706c 	.word	0x0800706c

080038cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d012      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f4:	4b69      	ldr	r3, [pc, #420]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038fe:	6093      	str	r3, [r2, #8]
 8003900:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	4964      	ldr	r1, [pc, #400]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d017      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	4959      	ldr	r1, [pc, #356]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003944:	d101      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003962:	4b4e      	ldr	r3, [pc, #312]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003968:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	494a      	ldr	r1, [pc, #296]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003980:	d101      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003982:	2301      	movs	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 808b 	beq.w	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b3a      	ldr	r3, [pc, #232]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	4a39      	ldr	r2, [pc, #228]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	; 0x40
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fd fcb4 	bl	8001340 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039dc:	f7fd fcb0 	bl	8001340 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e357      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d035      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d02e      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d114      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fc78 	bl	8001340 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fd fc74 	bl	8001340 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e319      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ee      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a92:	400b      	ands	r3, r1
 8003a94:	4901      	ldr	r1, [pc, #4]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	0ffffcff 	.word	0x0ffffcff
 8003aa8:	4baa      	ldr	r3, [pc, #680]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4aa9      	ldr	r2, [pc, #676]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	4ba7      	ldr	r3, [pc, #668]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	49a4      	ldr	r1, [pc, #656]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad2:	4ba0      	ldr	r3, [pc, #640]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	4a9e      	ldr	r2, [pc, #632]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ade:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ae2:	4b9c      	ldr	r3, [pc, #624]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	4999      	ldr	r1, [pc, #612]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b00:	4b94      	ldr	r3, [pc, #592]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0e:	4991      	ldr	r1, [pc, #580]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b22:	4b8c      	ldr	r3, [pc, #560]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b30:	4988      	ldr	r1, [pc, #544]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b44:	4b83      	ldr	r3, [pc, #524]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b52:	4980      	ldr	r1, [pc, #512]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b66:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4977      	ldr	r1, [pc, #476]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b88:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	496f      	ldr	r1, [pc, #444]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f023 020c 	bic.w	r2, r3, #12
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	4966      	ldr	r1, [pc, #408]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	495e      	ldr	r1, [pc, #376]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bee:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	4955      	ldr	r1, [pc, #340]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c32:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	4944      	ldr	r1, [pc, #272]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c54:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	493c      	ldr	r1, [pc, #240]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	4933      	ldr	r1, [pc, #204]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca6:	492b      	ldr	r1, [pc, #172]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d011      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc8:	4922      	ldr	r1, [pc, #136]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd8:	d101      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	4912      	ldr	r1, [pc, #72]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2c:	4909      	ldr	r1, [pc, #36]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d006      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80d9 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d48:	4b02      	ldr	r3, [pc, #8]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a01      	ldr	r2, [pc, #4]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd faf1 	bl	8001340 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd faed 	bl	8001340 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e194      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	4b6c      	ldr	r3, [pc, #432]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d021      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d11d      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d94:	4b64      	ldr	r3, [pc, #400]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	019a      	lsls	r2, r3, #6
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	071b      	lsls	r3, r3, #28
 8003dc8:	4957      	ldr	r1, [pc, #348]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02e      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d129      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dfc:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	0f1b      	lsrs	r3, r3, #28
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	019a      	lsls	r2, r3, #6
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	071b      	lsls	r3, r3, #28
 8003e30:	493d      	ldr	r1, [pc, #244]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3e:	f023 021f 	bic.w	r2, r3, #31
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4937      	ldr	r1, [pc, #220]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01d      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e62:	0e1b      	lsrs	r3, r3, #24
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	0f1b      	lsrs	r3, r3, #28
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	019a      	lsls	r2, r3, #6
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	071b      	lsls	r3, r3, #28
 8003e90:	4925      	ldr	r1, [pc, #148]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	019a      	lsls	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4919      	ldr	r1, [pc, #100]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fa34 	bl	8001340 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003edc:	f7fd fa30 	bl	8001340 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0d7      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80cd 	bne.w	800409c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fa17 	bl	8001340 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f16:	f7fd fa13 	bl	8001340 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	; 0x64
 8003f22:	d903      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0ba      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f38:	d0ed      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02e      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f62:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	0f1b      	lsrs	r3, r3, #28
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	019a      	lsls	r2, r3, #6
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	431a      	orrs	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	071b      	lsls	r3, r3, #28
 8003f96:	4944      	ldr	r1, [pc, #272]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	493d      	ldr	r1, [pc, #244]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d022      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fcc:	d11d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	0e1b      	lsrs	r3, r3, #24
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fdc:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	0f1b      	lsrs	r3, r3, #28
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	019a      	lsls	r2, r3, #6
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	071b      	lsls	r3, r3, #28
 8004002:	4929      	ldr	r1, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d028      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	4917      	ldr	r1, [pc, #92]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4911      	ldr	r1, [pc, #68]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004074:	f7fd f964 	bl	8001340 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800407c:	f7fd f960 	bl	8001340 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e007      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409a:	d1ef      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e049      	b.n	8004152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fc fee8 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fbd6 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e04c      	b.n	800420e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <HAL_TIM_Base_Start+0xc0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d022      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d01d      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_TIM_Base_Start+0xc4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_TIM_Base_Start+0xc8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_TIM_Base_Start+0xcc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_TIM_Base_Start+0xd0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_TIM_Base_Start+0xd4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start+0x70>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIM_Base_Start+0xd8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d115      	bne.n	80041f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_TIM_Base_Start+0xdc>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d015      	beq.n	800420a <HAL_TIM_Base_Start+0xae>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d011      	beq.n	800420a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	e008      	b.n	800420a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e000      	b.n	800420c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40001800 	.word	0x40001800
 8004238:	00010007 	.word	0x00010007

0800423c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e049      	b.n	80042e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fe02 	bl	8000e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fb0e 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start+0x24>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e03c      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d109      	bne.n	800432a <HAL_TIM_PWM_Start+0x3e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e02f      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x58>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e022      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d109      	bne.n	800435e <HAL_TIM_PWM_Start+0x72>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e015      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b10      	cmp	r3, #16
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x8c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e008      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e092      	b.n	80044b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start+0xb6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	e023      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Start+0xc6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	e01b      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0xd6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	e013      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0xe6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xf6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	e003      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fdea 	bl	8004fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <HAL_TIM_PWM_Start+0x1d4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_PWM_Start+0x120>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_TIM_PWM_Start+0x1d8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Start+0x124>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_TIM_PWM_Start+0x126>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <HAL_TIM_PWM_Start+0x1d4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <HAL_TIM_PWM_Start+0x1dc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_TIM_PWM_Start+0x1e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_TIM_PWM_Start+0x1e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_TIM_PWM_Start+0x1d8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <HAL_TIM_PWM_Start+0x1e8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_TIM_PWM_Start+0x1ec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d115      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_TIM_PWM_Start+0x1f0>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d015      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d011      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	e008      	b.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0ff      	b.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b14      	cmp	r3, #20
 800450a:	f200 80f0 	bhi.w	80046ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004569 	.word	0x08004569
 8004518:	080046ef 	.word	0x080046ef
 800451c:	080046ef 	.word	0x080046ef
 8004520:	080046ef 	.word	0x080046ef
 8004524:	080045a9 	.word	0x080045a9
 8004528:	080046ef 	.word	0x080046ef
 800452c:	080046ef 	.word	0x080046ef
 8004530:	080046ef 	.word	0x080046ef
 8004534:	080045eb 	.word	0x080045eb
 8004538:	080046ef 	.word	0x080046ef
 800453c:	080046ef 	.word	0x080046ef
 8004540:	080046ef 	.word	0x080046ef
 8004544:	0800462b 	.word	0x0800462b
 8004548:	080046ef 	.word	0x080046ef
 800454c:	080046ef 	.word	0x080046ef
 8004550:	080046ef 	.word	0x080046ef
 8004554:	0800466d 	.word	0x0800466d
 8004558:	080046ef 	.word	0x080046ef
 800455c:	080046ef 	.word	0x080046ef
 8004560:	080046ef 	.word	0x080046ef
 8004564:	080046ad 	.word	0x080046ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fa34 	bl	80049dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0208 	orr.w	r2, r2, #8
 8004582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]
      break;
 80045a6:	e0a5      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fa86 	bl	8004ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6999      	ldr	r1, [r3, #24]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
      break;
 80045e8:	e084      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fadd 	bl	8004bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0208 	orr.w	r2, r2, #8
 8004604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0204 	bic.w	r2, r2, #4
 8004614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	61da      	str	r2, [r3, #28]
      break;
 8004628:	e064      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fb33 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69d9      	ldr	r1, [r3, #28]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	021a      	lsls	r2, r3, #8
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	61da      	str	r2, [r3, #28]
      break;
 800466a:	e043      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fb6a 	bl	8004d4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046aa:	e023      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fb9c 	bl	8004df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046ec:	e002      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
      break;
 80046f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b4      	b.n	800488e <HAL_TIM_ConfigClockSource+0x186>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_TIM_ConfigClockSource+0x190>)
 8004740:	4013      	ands	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0xd4>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x172>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xa6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x11a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xfa>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x13a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047be:	f000 fbe5 	bl	8004f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ec:	f000 fbce 	bl	8004f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	461a      	mov	r2, r3
 8004810:	f000 fb42 	bl	8004e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb9b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	461a      	mov	r2, r3
 8004830:	f000 fb61 	bl	8004ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fb8b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	461a      	mov	r2, r3
 8004850:	f000 fb22 	bl	8004e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb7b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fb72 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	fffeff88 	.word	0xfffeff88

0800489c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <TIM_Base_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d027      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <TIM_Base_SetConfig+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <TIM_Base_SetConfig+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0x134>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <TIM_Base_SetConfig+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <TIM_Base_SetConfig+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000

080049dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4b2b      	ldr	r3, [pc, #172]	; (8004ab4 <TIM_OC1_SetConfig+0xd8>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0302 	bic.w	r3, r3, #2
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC1_SetConfig+0x64>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_OC1_SetConfig+0xe0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0308 	bic.w	r3, r3, #8
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC1_SetConfig+0x8e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC1_SetConfig+0xe0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	fffeff8f 	.word	0xfffeff8f
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0210 	bic.w	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <TIM_OC2_SetConfig+0xe4>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <TIM_OC2_SetConfig+0xe8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC2_SetConfig+0x68>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a22      	ldr	r2, [pc, #136]	; (8004bac <TIM_OC2_SetConfig+0xec>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10d      	bne.n	8004b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <TIM_OC2_SetConfig+0xe8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_OC2_SetConfig+0x94>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a17      	ldr	r2, [pc, #92]	; (8004bac <TIM_OC2_SetConfig+0xec>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d113      	bne.n	8004b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	feff8fff 	.word	0xfeff8fff
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40010400 	.word	0x40010400

08004bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <TIM_OC3_SetConfig+0xe0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <TIM_OC3_SetConfig+0xe4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC3_SetConfig+0x66>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_OC3_SetConfig+0xe8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10d      	bne.n	8004c32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <TIM_OC3_SetConfig+0xe4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0x92>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <TIM_OC3_SetConfig+0xe8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d113      	bne.n	8004c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	fffeff8f 	.word	0xfffeff8f
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <TIM_OC4_SetConfig+0xa4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <TIM_OC4_SetConfig+0xa8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC4_SetConfig+0x68>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <TIM_OC4_SetConfig+0xac>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d109      	bne.n	8004d18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	feff8fff 	.word	0xfeff8fff
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400

08004d4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <TIM_OC5_SetConfig+0x98>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <TIM_OC5_SetConfig+0x9c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_OC5_SetConfig+0x5e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a11      	ldr	r2, [pc, #68]	; (8004dec <TIM_OC5_SetConfig+0xa0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d109      	bne.n	8004dbe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	621a      	str	r2, [r3, #32]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	fffeff8f 	.word	0xfffeff8f
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40010400 	.word	0x40010400

08004df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <TIM_OC6_SetConfig+0x9c>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	051b      	lsls	r3, r3, #20
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <TIM_OC6_SetConfig+0xa0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC6_SetConfig+0x60>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <TIM_OC6_SetConfig+0xa4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d109      	bne.n	8004e64 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	feff8fff 	.word	0xfeff8fff
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 030a 	bic.w	r3, r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	031b      	lsls	r3, r3, #12
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f043 0307 	orr.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2201      	movs	r2, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e06d      	b.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800506a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d01d      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800

08005134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e040      	b.n	80051c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb ff34 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fbba 	bl	80058ec <UART_SetConfig>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e022      	b.n	80051c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fe12 	bl	8005db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fe99 	bl	8005ef8 <UART_CheckIdleState>
 80051c6:	4603      	mov	r3, r0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d132      	bne.n	800524e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Receive_IT+0x24>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e02b      	b.n	8005250 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d018      	beq.n	800523e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	613b      	str	r3, [r7, #16]
   return(result);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	61bb      	str	r3, [r7, #24]
   return(result);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	461a      	mov	r2, r3
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 ff55 	bl	80060f4 <UART_Start_Receive_IT>
 800524a:	4603      	mov	r3, r0
 800524c:	e000      	b.n	8005250 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526c:	2b20      	cmp	r3, #32
 800526e:	d132      	bne.n	80052d6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_UART_Receive_DMA+0x24>
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e02b      	b.n	80052d8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d018      	beq.n	80052c6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e6      	bne.n	8005294 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	461a      	mov	r2, r3
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 ffd7 	bl	8006280 <UART_Start_Receive_DMA>
 80052d2:	4603      	mov	r3, r0
 80052d4:	e000      	b.n	80052d8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b0ba      	sub	sp, #232	; 0xe8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005306:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800530a:	f640 030f 	movw	r3, #2063	; 0x80f
 800530e:	4013      	ands	r3, r2
 8005310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d115      	bne.n	8005348 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00f      	beq.n	8005348 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8297 	beq.w	800586c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
      }
      return;
 8005346:	e291      	b.n	800586c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8117 	beq.w	8005580 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800535e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005362:	4b85      	ldr	r3, [pc, #532]	; (8005578 <HAL_UART_IRQHandler+0x298>)
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 810a 	beq.w	8005580 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_UART_IRQHandler+0xbc>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	f043 0201 	orr.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_UART_IRQHandler+0xec>
 80053a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2202      	movs	r2, #2
 80053ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_UART_IRQHandler+0x11c>
 80053d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f2:	f043 0202 	orr.w	r2, r3, #2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d017      	beq.n	8005438 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542e:	f043 0208 	orr.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005440:	2b00      	cmp	r3, #0
 8005442:	d012      	beq.n	800546a <HAL_UART_IRQHandler+0x18a>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 81fd 	beq.w	8005870 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d005      	beq.n	80054c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04f      	beq.n	8005562 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 ffa2 	bl	800640c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d141      	bne.n	800555a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800550e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800551a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1d9      	bne.n	80054d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	2b00      	cmp	r3, #0
 8005528:	d013      	beq.n	8005552 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <HAL_UART_IRQHandler+0x29c>)
 8005530:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc f913 	bl	8001762 <HAL_DMA_Abort_IT>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d017      	beq.n	8005572 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	e00f      	b.n	8005572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9b4 	bl	80058c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e00b      	b.n	8005572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b0 	bl	80058c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e007      	b.n	8005572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9ac 	bl	80058c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005570:	e17e      	b.n	8005870 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005572:	bf00      	nop
    return;
 8005574:	e17c      	b.n	8005870 <HAL_UART_IRQHandler+0x590>
 8005576:	bf00      	nop
 8005578:	04000120 	.word	0x04000120
 800557c:	080066b9 	.word	0x080066b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	2b01      	cmp	r3, #1
 8005586:	f040 814c 	bne.w	8005822 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8145 	beq.w	8005822 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 813e 	beq.w	8005822 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2210      	movs	r2, #16
 80055ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	f040 80b6 	bne.w	800572a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8150 	beq.w	8005874 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055de:	429a      	cmp	r2, r3
 80055e0:	f080 8148 	bcs.w	8005874 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f8:	f000 8086 	beq.w	8005708 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800562a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800563e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1da      	bne.n	80055fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800566a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800566e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800567c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e1      	bne.n	8005646 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d8:	f023 0310 	bic.w	r3, r3, #16
 80056dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80056ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e4      	bne.n	80056c8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005702:	4618      	mov	r0, r3
 8005704:	f7fb ffbd 	bl	8001682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800571a:	b29b      	uxth	r3, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8d6 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005728:	e0a4      	b.n	8005874 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005736:	b29b      	uxth	r3, r3
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8096 	beq.w	8005878 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800574c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8091 	beq.w	8005878 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
 800577a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800577e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e4      	bne.n	8005756 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	623b      	str	r3, [r7, #32]
   return(result);
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b0:	633a      	str	r2, [r7, #48]	; 0x30
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e3      	bne.n	800578c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	617b      	str	r3, [r7, #20]
   return(result);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e4      	bne.n	80057d8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f85a 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005820:	e02a      	b.n	8005878 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01c      	beq.n	800587c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
    }
    return;
 800584a:	e017      	b.n	800587c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <HAL_UART_IRQHandler+0x59e>
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00c      	beq.n	800587e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 ff3d 	bl	80066e4 <UART_EndTransmit_IT>
    return;
 800586a:	e008      	b.n	800587e <HAL_UART_IRQHandler+0x59e>
      return;
 800586c:	bf00      	nop
 800586e:	e006      	b.n	800587e <HAL_UART_IRQHandler+0x59e>
    return;
 8005870:	bf00      	nop
 8005872:	e004      	b.n	800587e <HAL_UART_IRQHandler+0x59e>
      return;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_UART_IRQHandler+0x59e>
      return;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_UART_IRQHandler+0x59e>
    return;
 800587c:	bf00      	nop
  }

}
 800587e:	37e8      	adds	r7, #232	; 0xe8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4ba6      	ldr	r3, [pc, #664]	; (8005bb0 <UART_SetConfig+0x2c4>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	6979      	ldr	r1, [r7, #20]
 8005920:	430b      	orrs	r3, r1
 8005922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a94      	ldr	r2, [pc, #592]	; (8005bb4 <UART_SetConfig+0x2c8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d120      	bne.n	80059aa <UART_SetConfig+0xbe>
 8005968:	4b93      	ldr	r3, [pc, #588]	; (8005bb8 <UART_SetConfig+0x2cc>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d816      	bhi.n	80059a4 <UART_SetConfig+0xb8>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0x90>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	0800598d 	.word	0x0800598d
 8005980:	08005999 	.word	0x08005999
 8005984:	08005993 	.word	0x08005993
 8005988:	0800599f 	.word	0x0800599f
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e150      	b.n	8005c34 <UART_SetConfig+0x348>
 8005992:	2302      	movs	r3, #2
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e14d      	b.n	8005c34 <UART_SetConfig+0x348>
 8005998:	2304      	movs	r3, #4
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e14a      	b.n	8005c34 <UART_SetConfig+0x348>
 800599e:	2308      	movs	r3, #8
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e147      	b.n	8005c34 <UART_SetConfig+0x348>
 80059a4:	2310      	movs	r3, #16
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e144      	b.n	8005c34 <UART_SetConfig+0x348>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a83      	ldr	r2, [pc, #524]	; (8005bbc <UART_SetConfig+0x2d0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d132      	bne.n	8005a1a <UART_SetConfig+0x12e>
 80059b4:	4b80      	ldr	r3, [pc, #512]	; (8005bb8 <UART_SetConfig+0x2cc>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b0c      	cmp	r3, #12
 80059c0:	d828      	bhi.n	8005a14 <UART_SetConfig+0x128>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0xdc>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a09 	.word	0x08005a09
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a03 	.word	0x08005a03
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a15 	.word	0x08005a15
 80059f8:	08005a0f 	.word	0x08005a0f
 80059fc:	2300      	movs	r3, #0
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e118      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a02:	2302      	movs	r3, #2
 8005a04:	77fb      	strb	r3, [r7, #31]
 8005a06:	e115      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e112      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a0e:	2308      	movs	r3, #8
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e10f      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a14:	2310      	movs	r3, #16
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e10c      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a68      	ldr	r2, [pc, #416]	; (8005bc0 <UART_SetConfig+0x2d4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d120      	bne.n	8005a66 <UART_SetConfig+0x17a>
 8005a24:	4b64      	ldr	r3, [pc, #400]	; (8005bb8 <UART_SetConfig+0x2cc>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a2e:	2b30      	cmp	r3, #48	; 0x30
 8005a30:	d013      	beq.n	8005a5a <UART_SetConfig+0x16e>
 8005a32:	2b30      	cmp	r3, #48	; 0x30
 8005a34:	d814      	bhi.n	8005a60 <UART_SetConfig+0x174>
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d009      	beq.n	8005a4e <UART_SetConfig+0x162>
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d810      	bhi.n	8005a60 <UART_SetConfig+0x174>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <UART_SetConfig+0x15c>
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d006      	beq.n	8005a54 <UART_SetConfig+0x168>
 8005a46:	e00b      	b.n	8005a60 <UART_SetConfig+0x174>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e0f2      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e0ef      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a54:	2304      	movs	r3, #4
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e0ec      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e0e9      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a60:	2310      	movs	r3, #16
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e0e6      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a56      	ldr	r2, [pc, #344]	; (8005bc4 <UART_SetConfig+0x2d8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d120      	bne.n	8005ab2 <UART_SetConfig+0x1c6>
 8005a70:	4b51      	ldr	r3, [pc, #324]	; (8005bb8 <UART_SetConfig+0x2cc>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a7c:	d013      	beq.n	8005aa6 <UART_SetConfig+0x1ba>
 8005a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a80:	d814      	bhi.n	8005aac <UART_SetConfig+0x1c0>
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d009      	beq.n	8005a9a <UART_SetConfig+0x1ae>
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d810      	bhi.n	8005aac <UART_SetConfig+0x1c0>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <UART_SetConfig+0x1a8>
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d006      	beq.n	8005aa0 <UART_SetConfig+0x1b4>
 8005a92:	e00b      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e0cc      	b.n	8005c34 <UART_SetConfig+0x348>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e0c9      	b.n	8005c34 <UART_SetConfig+0x348>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e0c6      	b.n	8005c34 <UART_SetConfig+0x348>
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e0c3      	b.n	8005c34 <UART_SetConfig+0x348>
 8005aac:	2310      	movs	r3, #16
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e0c0      	b.n	8005c34 <UART_SetConfig+0x348>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a44      	ldr	r2, [pc, #272]	; (8005bc8 <UART_SetConfig+0x2dc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d125      	bne.n	8005b08 <UART_SetConfig+0x21c>
 8005abc:	4b3e      	ldr	r3, [pc, #248]	; (8005bb8 <UART_SetConfig+0x2cc>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aca:	d017      	beq.n	8005afc <UART_SetConfig+0x210>
 8005acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad0:	d817      	bhi.n	8005b02 <UART_SetConfig+0x216>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad6:	d00b      	beq.n	8005af0 <UART_SetConfig+0x204>
 8005ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005adc:	d811      	bhi.n	8005b02 <UART_SetConfig+0x216>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <UART_SetConfig+0x1fe>
 8005ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae6:	d006      	beq.n	8005af6 <UART_SetConfig+0x20a>
 8005ae8:	e00b      	b.n	8005b02 <UART_SetConfig+0x216>
 8005aea:	2300      	movs	r3, #0
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e0a1      	b.n	8005c34 <UART_SetConfig+0x348>
 8005af0:	2302      	movs	r3, #2
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e09e      	b.n	8005c34 <UART_SetConfig+0x348>
 8005af6:	2304      	movs	r3, #4
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e09b      	b.n	8005c34 <UART_SetConfig+0x348>
 8005afc:	2308      	movs	r3, #8
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e098      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b02:	2310      	movs	r3, #16
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e095      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <UART_SetConfig+0x2e0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d125      	bne.n	8005b5e <UART_SetConfig+0x272>
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <UART_SetConfig+0x2cc>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b20:	d017      	beq.n	8005b52 <UART_SetConfig+0x266>
 8005b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b26:	d817      	bhi.n	8005b58 <UART_SetConfig+0x26c>
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2c:	d00b      	beq.n	8005b46 <UART_SetConfig+0x25a>
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b32:	d811      	bhi.n	8005b58 <UART_SetConfig+0x26c>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <UART_SetConfig+0x254>
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3c:	d006      	beq.n	8005b4c <UART_SetConfig+0x260>
 8005b3e:	e00b      	b.n	8005b58 <UART_SetConfig+0x26c>
 8005b40:	2301      	movs	r3, #1
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e076      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b46:	2302      	movs	r3, #2
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e073      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e070      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b52:	2308      	movs	r3, #8
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e06d      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e06a      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <UART_SetConfig+0x2e4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d138      	bne.n	8005bda <UART_SetConfig+0x2ee>
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <UART_SetConfig+0x2cc>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b76:	d017      	beq.n	8005ba8 <UART_SetConfig+0x2bc>
 8005b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7c:	d82a      	bhi.n	8005bd4 <UART_SetConfig+0x2e8>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	d00b      	beq.n	8005b9c <UART_SetConfig+0x2b0>
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d824      	bhi.n	8005bd4 <UART_SetConfig+0x2e8>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <UART_SetConfig+0x2aa>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d006      	beq.n	8005ba2 <UART_SetConfig+0x2b6>
 8005b94:	e01e      	b.n	8005bd4 <UART_SetConfig+0x2e8>
 8005b96:	2300      	movs	r3, #0
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e04b      	b.n	8005c34 <UART_SetConfig+0x348>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e048      	b.n	8005c34 <UART_SetConfig+0x348>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e045      	b.n	8005c34 <UART_SetConfig+0x348>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e042      	b.n	8005c34 <UART_SetConfig+0x348>
 8005bae:	bf00      	nop
 8005bb0:	efff69f3 	.word	0xefff69f3
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	40004400 	.word	0x40004400
 8005bc0:	40004800 	.word	0x40004800
 8005bc4:	40004c00 	.word	0x40004c00
 8005bc8:	40005000 	.word	0x40005000
 8005bcc:	40011400 	.word	0x40011400
 8005bd0:	40007800 	.word	0x40007800
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e02c      	b.n	8005c34 <UART_SetConfig+0x348>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a72      	ldr	r2, [pc, #456]	; (8005da8 <UART_SetConfig+0x4bc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d125      	bne.n	8005c30 <UART_SetConfig+0x344>
 8005be4:	4b71      	ldr	r3, [pc, #452]	; (8005dac <UART_SetConfig+0x4c0>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bf2:	d017      	beq.n	8005c24 <UART_SetConfig+0x338>
 8005bf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bf8:	d817      	bhi.n	8005c2a <UART_SetConfig+0x33e>
 8005bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfe:	d00b      	beq.n	8005c18 <UART_SetConfig+0x32c>
 8005c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c04:	d811      	bhi.n	8005c2a <UART_SetConfig+0x33e>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <UART_SetConfig+0x326>
 8005c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c0e:	d006      	beq.n	8005c1e <UART_SetConfig+0x332>
 8005c10:	e00b      	b.n	8005c2a <UART_SetConfig+0x33e>
 8005c12:	2300      	movs	r3, #0
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e00d      	b.n	8005c34 <UART_SetConfig+0x348>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e00a      	b.n	8005c34 <UART_SetConfig+0x348>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e007      	b.n	8005c34 <UART_SetConfig+0x348>
 8005c24:	2308      	movs	r3, #8
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e004      	b.n	8005c34 <UART_SetConfig+0x348>
 8005c2a:	2310      	movs	r3, #16
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e001      	b.n	8005c34 <UART_SetConfig+0x348>
 8005c30:	2310      	movs	r3, #16
 8005c32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3c:	d15b      	bne.n	8005cf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d828      	bhi.n	8005c96 <UART_SetConfig+0x3aa>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x360>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fd fe04 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005c74:	61b8      	str	r0, [r7, #24]
        break;
 8005c76:	e013      	b.n	8005ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fd fe14 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 8005c7c:	61b8      	str	r0, [r7, #24]
        break;
 8005c7e:	e00f      	b.n	8005ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <UART_SetConfig+0x4c4>)
 8005c82:	61bb      	str	r3, [r7, #24]
        break;
 8005c84:	e00c      	b.n	8005ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fd fce7 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61b8      	str	r0, [r7, #24]
        break;
 8005c8c:	e008      	b.n	8005ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61bb      	str	r3, [r7, #24]
        break;
 8005c94:	e004      	b.n	8005ca0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d074      	beq.n	8005d90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	005a      	lsls	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d916      	bls.n	8005cf0 <UART_SetConfig+0x404>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d212      	bcs.n	8005cf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f023 030f 	bic.w	r3, r3, #15
 8005cd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	89fa      	ldrh	r2, [r7, #14]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	e04f      	b.n	8005d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	77bb      	strb	r3, [r7, #30]
 8005cf4:	e04c      	b.n	8005d90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d828      	bhi.n	8005d4e <UART_SetConfig+0x462>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x418>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d4f 	.word	0x08005d4f
 8005d1c:	08005d4f 	.word	0x08005d4f
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	08005d47 	.word	0x08005d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7fd fda8 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e013      	b.n	8005d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fd fdb8 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 8005d34:	61b8      	str	r0, [r7, #24]
        break;
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <UART_SetConfig+0x4c4>)
 8005d3a:	61bb      	str	r3, [r7, #24]
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7fd fc8b 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8005d42:	61b8      	str	r0, [r7, #24]
        break;
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	77bb      	strb	r3, [r7, #30]
        break;
 8005d56:	bf00      	nop
    }

    if (pclk != 0U)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085a      	lsrs	r2, r3, #1
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	441a      	add	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d909      	bls.n	8005d8c <UART_SetConfig+0x4a0>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7e:	d205      	bcs.n	8005d8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	e001      	b.n	8005d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40007c00 	.word	0x40007c00
 8005dac:	40023800 	.word	0x40023800
 8005db0:	00f42400 	.word	0x00f42400

08005db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb2:	d10a      	bne.n	8005eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f08:	f7fb fa1a 	bl	8001340 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d10e      	bne.n	8005f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f81b 	bl	8005f66 <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e011      	b.n	8005f5e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b09c      	sub	sp, #112	; 0x70
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	e0a7      	b.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	f000 80a3 	beq.w	80060c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f82:	f7fb f9dd 	bl	8001340 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d13f      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fac:	667b      	str	r3, [r7, #100]	; 0x64
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e6      	bne.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e068      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d050      	beq.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d148      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	613b      	str	r3, [r7, #16]
   return(result);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	66bb      	str	r3, [r7, #104]	; 0x68
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006092:	623a      	str	r2, [r7, #32]
 8006094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	69f9      	ldr	r1, [r7, #28]
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e010      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	f43f af48 	beq.w	8005f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3770      	adds	r7, #112	; 0x70
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b097      	sub	sp, #92	; 0x5c
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d10e      	bne.n	8006146 <UART_Start_Receive_IT+0x52>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <UART_Start_Receive_IT+0x48>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800613a:	e02d      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006144:	e028      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10d      	bne.n	800616a <UART_Start_Receive_IT+0x76>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <UART_Start_Receive_IT+0x6c>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800615e:	e01b      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	227f      	movs	r2, #127	; 0x7f
 8006164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006168:	e016      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006172:	d10d      	bne.n	8006190 <UART_Start_Receive_IT+0x9c>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <UART_Start_Receive_IT+0x92>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	227f      	movs	r2, #127	; 0x7f
 8006180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006184:	e008      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	223f      	movs	r2, #63	; 0x3f
 800618a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618e:	e003      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2222      	movs	r2, #34	; 0x22
 80061a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	657b      	str	r3, [r7, #84]	; 0x54
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e4:	d107      	bne.n	80061f6 <UART_Start_Receive_IT+0x102>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <UART_Start_Receive_IT+0x184>)
 80061f2:	669a      	str	r2, [r3, #104]	; 0x68
 80061f4:	e002      	b.n	80061fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <UART_Start_Receive_IT+0x188>)
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d019      	beq.n	8006238 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e6      	bne.n	8006204 <UART_Start_Receive_IT+0x110>
 8006236:	e018      	b.n	800626a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f043 0320 	orr.w	r3, r3, #32
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006256:	623b      	str	r3, [r7, #32]
 8006258:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	69f9      	ldr	r1, [r7, #28]
 800625c:	6a3a      	ldr	r2, [r7, #32]
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	61bb      	str	r3, [r7, #24]
   return(result);
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e6      	bne.n	8006238 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	375c      	adds	r7, #92	; 0x5c
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	0800689f 	.word	0x0800689f
 800627c:	08006739 	.word	0x08006739

08006280 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b096      	sub	sp, #88	; 0x58
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2222      	movs	r2, #34	; 0x22
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d028      	beq.n	8006306 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b8:	4a3e      	ldr	r2, [pc, #248]	; (80063b4 <UART_Start_Receive_DMA+0x134>)
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c0:	4a3d      	ldr	r2, [pc, #244]	; (80063b8 <UART_Start_Receive_DMA+0x138>)
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c8:	4a3c      	ldr	r2, [pc, #240]	; (80063bc <UART_Start_Receive_DMA+0x13c>)
 80062ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d0:	2200      	movs	r2, #0
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	4619      	mov	r1, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	461a      	mov	r2, r3
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	f7fb f96b 	bl	80015c2 <HAL_DMA_Start_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2210      	movs	r2, #16
 80062f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e051      	b.n	80063aa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006322:	657b      	str	r3, [r7, #84]	; 0x54
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
 800632e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800633a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	653b      	str	r3, [r7, #80]	; 0x50
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006360:	637a      	str	r2, [r7, #52]	; 0x34
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006394:	623a      	str	r2, [r7, #32]
 8006396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3758      	adds	r7, #88	; 0x58
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	080064d5 	.word	0x080064d5
 80063b8:	080065fd 	.word	0x080065fd
 80063bc:	0800663b 	.word	0x0800663b

080063c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	613b      	str	r3, [r7, #16]
   return(result);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006400:	bf00      	nop
 8006402:	3724      	adds	r7, #36	; 0x24
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b095      	sub	sp, #84	; 0x54
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	643b      	str	r3, [r7, #64]	; 0x40
 8006434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	61fb      	str	r3, [r7, #28]
   return(result);
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	64bb      	str	r3, [r7, #72]	; 0x48
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	2b01      	cmp	r3, #1
 8006480:	d118      	bne.n	80064b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0310 	bic.w	r3, r3, #16
 8006496:	647b      	str	r3, [r7, #68]	; 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6979      	ldr	r1, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	613b      	str	r3, [r7, #16]
   return(result);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064c8:	bf00      	nop
 80064ca:	3754      	adds	r7, #84	; 0x54
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b09c      	sub	sp, #112	; 0x70
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ea:	d071      	beq.n	80065d0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	66bb      	str	r3, [r7, #104]	; 0x68
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006512:	65bb      	str	r3, [r7, #88]	; 0x58
 8006514:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	667b      	str	r3, [r7, #100]	; 0x64
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006546:	647a      	str	r2, [r7, #68]	; 0x44
 8006548:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800654c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	623b      	str	r3, [r7, #32]
   return(result);
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	663b      	str	r3, [r7, #96]	; 0x60
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800657a:	633a      	str	r2, [r7, #48]	; 0x30
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659a:	2b01      	cmp	r3, #1
 800659c:	d118      	bne.n	80065d0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d2:	2200      	movs	r2, #0
 80065d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065e4:	4619      	mov	r1, r3
 80065e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065e8:	f7ff f974 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ec:	e002      	b.n	80065f4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80065ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065f0:	f7ff f952 	bl	8005898 <HAL_UART_RxCpltCallback>
}
 80065f4:	bf00      	nop
 80065f6:	3770      	adds	r7, #112	; 0x70
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	2b01      	cmp	r3, #1
 8006616:	d109      	bne.n	800662c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff f955 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800662a:	e002      	b.n	8006632 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff f93d 	bl	80058ac <HAL_UART_RxHalfCpltCallback>
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006654:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d109      	bne.n	8006678 <UART_DMAError+0x3e>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b21      	cmp	r3, #33	; 0x21
 8006668:	d106      	bne.n	8006678 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff fea4 	bl	80063c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d109      	bne.n	800669a <UART_DMAError+0x60>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b22      	cmp	r3, #34	; 0x22
 800668a:	d106      	bne.n	800669a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006694:	6978      	ldr	r0, [r7, #20]
 8006696:	f7ff feb9 	bl	800640c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a0:	f043 0210 	orr.w	r2, r3, #16
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f7ff f908 	bl	80058c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff f8f2 	bl	80058c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	613b      	str	r3, [r7, #16]
   return(result);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f8aa 	bl	8005884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006730:	bf00      	nop
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b096      	sub	sp, #88	; 0x58
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006746:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006750:	2b22      	cmp	r3, #34	; 0x22
 8006752:	f040 8098 	bne.w	8006886 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006760:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006764:	b2d9      	uxtb	r1, r3
 8006766:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	400a      	ands	r2, r1
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d17b      	bne.n	8006896 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b2:	653b      	str	r3, [r7, #80]	; 0x50
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
 80067be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	623b      	str	r3, [r7, #32]
   return(result);
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f0:	633a      	str	r2, [r7, #48]	; 0x30
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e5      	bne.n	80067d0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681c:	2b01      	cmp	r3, #1
 800681e:	d12e      	bne.n	800687e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	60fb      	str	r3, [r7, #12]
   return(result);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0310 	bic.w	r3, r3, #16
 800683a:	64bb      	str	r3, [r7, #72]	; 0x48
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	617b      	str	r3, [r7, #20]
   return(result);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e6      	bne.n	8006826 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b10      	cmp	r3, #16
 8006864:	d103      	bne.n	800686e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2210      	movs	r2, #16
 800686c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff f82c 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800687c:	e00b      	b.n	8006896 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f80a 	bl	8005898 <HAL_UART_RxCpltCallback>
}
 8006884:	e007      	b.n	8006896 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0208 	orr.w	r2, r2, #8
 8006894:	619a      	str	r2, [r3, #24]
}
 8006896:	bf00      	nop
 8006898:	3758      	adds	r7, #88	; 0x58
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b096      	sub	sp, #88	; 0x58
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b6:	2b22      	cmp	r3, #34	; 0x22
 80068b8:	f040 8098 	bne.w	80069ec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80068cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80068d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d17b      	bne.n	80069fc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
 8006924:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e6      	bne.n	8006904 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	61fb      	str	r3, [r7, #28]
   return(result);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	64bb      	str	r3, [r7, #72]	; 0x48
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006982:	2b01      	cmp	r3, #1
 8006984:	d12e      	bne.n	80069e4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	60bb      	str	r3, [r7, #8]
   return(result);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	613b      	str	r3, [r7, #16]
   return(result);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d103      	bne.n	80069d4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2210      	movs	r2, #16
 80069d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fe ff79 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069e2:	e00b      	b.n	80069fc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fe ff57 	bl	8005898 <HAL_UART_RxCpltCallback>
}
 80069ea:	e007      	b.n	80069fc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0208 	orr.w	r2, r2, #8
 80069fa:	619a      	str	r2, [r3, #24]
}
 80069fc:	bf00      	nop
 80069fe:	3758      	adds	r7, #88	; 0x58
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a04:	b084      	sub	sp, #16
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	f107 001c 	add.w	r0, r7, #28
 8006a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d120      	bne.n	8006a5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	4b20      	ldr	r3, [pc, #128]	; (8006ab0 <USB_CoreInit+0xac>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d105      	bne.n	8006a52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa96 	bl	8006f84 <USB_CoreReset>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
 8006a5c:	e010      	b.n	8006a80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa8a 	bl	8006f84 <USB_CoreReset>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10b      	bne.n	8006a9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f043 0206 	orr.w	r2, r3, #6
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aaa:	b004      	add	sp, #16
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	ffbdffbf 	.word	0xffbdffbf

08006ab4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f023 0201 	bic.w	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d115      	bne.n	8006b24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b04:	2001      	movs	r0, #1
 8006b06:	f7fa fc27 	bl	8001358 <HAL_Delay>
      ms++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa29 	bl	8006f68 <USB_GetMode>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d01e      	beq.n	8006b5a <USB_SetCurrentMode+0x84>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b31      	cmp	r3, #49	; 0x31
 8006b20:	d9f0      	bls.n	8006b04 <USB_SetCurrentMode+0x2e>
 8006b22:	e01a      	b.n	8006b5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d115      	bne.n	8006b56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b36:	2001      	movs	r0, #1
 8006b38:	f7fa fc0e 	bl	8001358 <HAL_Delay>
      ms++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa10 	bl	8006f68 <USB_GetMode>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <USB_SetCurrentMode+0x84>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b31      	cmp	r3, #49	; 0x31
 8006b52:	d9f0      	bls.n	8006b36 <USB_SetCurrentMode+0x60>
 8006b54:	e001      	b.n	8006b5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e005      	b.n	8006b66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b32      	cmp	r3, #50	; 0x32
 8006b5e:	d101      	bne.n	8006b64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b70:	b084      	sub	sp, #16
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e009      	b.n	8006ba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3340      	adds	r3, #64	; 0x40
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b0e      	cmp	r3, #14
 8006ba8:	d9f2      	bls.n	8006b90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11c      	bne.n	8006bea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbe:	f043 0302 	orr.w	r3, r3, #2
 8006bc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e005      	b.n	8006bf6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c10:	461a      	mov	r2, r3
 8006c12:	680b      	ldr	r3, [r1, #0]
 8006c14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d10c      	bne.n	8006c36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c22:	2100      	movs	r1, #0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f965 	bl	8006ef4 <USB_SetDevSpeed>
 8006c2a:	e008      	b.n	8006c3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f960 	bl	8006ef4 <USB_SetDevSpeed>
 8006c34:	e003      	b.n	8006c3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c36:	2103      	movs	r1, #3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f95b 	bl	8006ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c3e:	2110      	movs	r1, #16
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f8f3 	bl	8006e2c <USB_FlushTxFifo>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f91f 	bl	8006e94 <USB_FlushRxFifo>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c72:	461a      	mov	r2, r3
 8006c74:	2300      	movs	r3, #0
 8006c76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	e043      	b.n	8006d12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca0:	d118      	bne.n	8006cd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e013      	b.n	8006ce6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	e008      	b.n	8006ce6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	461a      	mov	r2, r3
 8006d06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d3b7      	bcc.n	8006c8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	e043      	b.n	8006da8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d36:	d118      	bne.n	8006d6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e013      	b.n	8006d7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	461a      	mov	r2, r3
 8006d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	e008      	b.n	8006d7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	461a      	mov	r2, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006da0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	3301      	adds	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3b7      	bcc.n	8006d20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <USB_DevInit+0x2b4>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	f043 0208 	orr.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <USB_DevInit+0x2b8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e20:	b004      	add	sp, #16
 8006e22:	4770      	bx	lr
 8006e24:	803c3800 	.word	0x803c3800
 8006e28:	40000004 	.word	0x40000004

08006e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a13      	ldr	r2, [pc, #76]	; (8006e90 <USB_FlushTxFifo+0x64>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e01b      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	daf2      	bge.n	8006e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <USB_FlushTxFifo+0x64>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e006      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d0f0      	beq.n	8006e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	00030d40 	.word	0x00030d40

08006e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <USB_FlushRxFifo+0x5c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e018      	b.n	8006ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	daf2      	bge.n	8006ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2210      	movs	r2, #16
 8006ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <USB_FlushRxFifo+0x5c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d901      	bls.n	8006ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e006      	b.n	8006ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b10      	cmp	r3, #16
 8006ee0:	d0f0      	beq.n	8006ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	00030d40 	.word	0x00030d40

08006ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	f003 0301 	and.w	r3, r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <USB_CoreReset+0x64>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e01b      	b.n	8006fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	daf2      	bge.n	8006f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f043 0201 	orr.w	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <USB_CoreReset+0x64>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e006      	b.n	8006fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d0f0      	beq.n	8006fba <USB_CoreReset+0x36>

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	00030d40 	.word	0x00030d40

08006fec <memset>:
 8006fec:	4402      	add	r2, r0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <memset+0xa>
 8006ff4:	4770      	bx	lr
 8006ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffa:	e7f9      	b.n	8006ff0 <memset+0x4>

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	; (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	; (8007040 <__libc_init_array+0x44>)
 8007010:	f000 f818 	bl	8007044 <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	0800707c 	.word	0x0800707c
 8007038:	0800707c 	.word	0x0800707c
 800703c:	0800707c 	.word	0x0800707c
 8007040:	08007080 	.word	0x08007080

08007044 <_init>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	bf00      	nop
 8007048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704a:	bc08      	pop	{r3}
 800704c:	469e      	mov	lr, r3
 800704e:	4770      	bx	lr

08007050 <_fini>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr
